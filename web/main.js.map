{"version":3,"sources":["./src/app/pages/main/customer/customer-create/customer-create.component.scss","./src/app/components/modals/medicine-unit-modal/medicine-unit-modal.component.scss","./src/app/components/modals/reports/report-price-trend/report-price-trend.component.scss","./src/app/components/modals/reports/report-overall-sales/report-overall-sales.component.scss","./src/app/pages/main/feeds-medicine-management/medicine/medicine-listing/medicine-listing.component.scss","./src/app/components/modals/reports/report-stocks/report-stocks.component.html","./src/app/pages/main/performance-report/consumption/feeds/feeds.component.scss","./src/app/components/modals/reports/report-price-trend/report-price-trend.component.html","./src/app/components/modals/reports/report-trays/report-trays.component.html","./src/app/pages/main/activity/activity-listing/activity-listing.component.scss","./src/app/pages/main/staff/staff-view/staff-view.component.html","./src/app/components/modals/reports/report-medicine/report-medicine.component.scss","./src/app/components/modals/reports/report-footer/report-footer.component.html","./src/app/pages/main/dashboard/dashboard.component.html","./src/app/pages/main/daily-reports/daily-reports-house-listing/daily-reports-house-listing.component.scss","./src/app/pages/main/daily-reports/daily-reports-view/daily-reports-view.component.html","./src/app/pages/main/performance-report/harvested/production-by-egg-size/production-by-egg-size.component.scss","./src/app/pages/main/transactions/transactions-view/transactions-view.component.scss","./src/app/pages/main/transactions/transactions-create/transactions-create.component.html","./src/app/pages/main/transactions/transactions-listing-by-order-status/transactions-listing-by-order-status.component.html","./src/app/components/modals/medicine-consumption-update-modal/medicine-consumption-update-modal.component.scss","./src/app/pages/main/performance-report/harvested/production-per-house/production-per-house.component.scss","./src/app/components/modals/reports/report-sacks/report-sacks.component.html","./src/app/components/modals/reports/report-footer/report-footer.component.scss","./src/app/layout/template/template.component.html","./src/app/pages/main/feeds-medicine-management/medicine/medicine-create/medicine-create.component.scss","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-listing/feeds-medicine-consumption-listing.component.html","./src/app/pages/main/inventory-stocks/trays/trays-listing/trays-listing.component.html","./src/app/pages/main/performance-report/sales/overall-sales/overall-sales.component.scss","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-view/feeds-medicine-consumption-view.component.scss","./src/app/pages/main/performance-report/harvested/production-by-egg-size/production-by-egg-size.component.html","./src/app/components/modals/confirm-password-modal/confirm-password-modal.component.html","./src/app/pages/main/staff/staff-listing/staff-listing.component.html","./src/app/pages/main/transactions/transactions-create-preview/transactions-create-preview.component.scss","./src/app/pages/main/performance-report/sales/sales-by-egg-size/sales-by-egg-size.component.scss","./src/app/pages/main/payment/payment-update/payment-update.component.scss","./src/app/pages/main/payment/payment-listing/payment-listing.component.scss","./src/app/pages/main/daily-reports/daily-reports-listing/daily-reports-listing.component.scss","./src/app/pages/main/price-management/price-management-listing/price-management-listing.component.html","./src/app/pages/main/customer/customer-listing/customer-listing.component.scss","./src/app/pages/main/feeds-medicine-management/medicine/medicine-update/medicine-update.component.scss","./src/app/components/modals/reports/report-fresh-eggs-view/report-fresh-eggs-view.component.scss","./src/app/pages/main/staff/staff-listing/staff-listing.component.scss","./src/app/pages/main/staff/staff-my-profile/staff-my-profile.component.html","./src/app/pages/auth/login/login.component.html","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-create/feeds-medicine-consumption-create.component.html","./src/app/pages/main/customer/customer-listing/customer-listing.component.html","./src/app/components/modals/reports/report-monthly-record/report-monthly-record.component.html","./src/app/pages/main/performance-report/stocks/stocks-view/stocks-view.component.scss","./src/app/pages/main/price-management/price-management-view/price-management-view.component.html","./src/app/pages/main/transactions/transactions-listing/transactions-listing.component.html","./src/app/pages/main/feeds-medicine-management/medicine/medicine-create/medicine-create.component.html","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-create/feeds-medicine-consumption-create.component.scss","./src/app/components/modals/reports/report-production-per-house/report-production-per-house.component.scss","./src/app/components/modals/house-modal/house-modal.component.scss","./src/app/components/modals/reports/report-egg-price/report-egg-price.component.html","./src/app/pages/main/payment/payment-listing/payment-listing.component.html","./src/app/pages/main/payment/payment-print/payment-print.component.scss","./src/app/pages/main/inventory-stocks/trays/trays-view/trays-view.component.html","./src/app/pages/main/price-management/price-management-listing/price-management-listing.component.scss","./src/app/components/modals/reports/report-sales-egg/report-sales-egg.component.scss","./src/app/components/modals/house-modal/house-modal.component.html","./src/app/components/modals/transaction-create-modal/transaction-create-modal.component.scss","./src/app/pages/main/staff/staff-create/staff-create.component.html","./src/app/pages/main/performance-report/harvested/production-per-house/production-per-house.component.html","./src/app/pages/main/inventory-stocks/fresh-eggs/fresh-eggs-view/fresh-eggs-view.component.html","./src/app/pages/main/daily-reports/daily-reports-view/daily-reports-view.component.scss","./src/app/components/modals/reports/report-sales-egg/report-sales-egg.component.html","./src/app/components/reports/reports-buttons/reports-buttons.component.html","./src/app/pages/main/transactions/transactions-create/transactions-create.component.scss","./src/app/components/modals/view-payment-modal/view-payment-modal.component.html","./src/app/pages/main/feeds-medicine-management/feeds/feeds-create/feeds-create.component.scss","./src/app/pages/main/house/house-listing/house-listing.component.scss","./src/app/pages/main/staff/staff-my-profile/staff-my-profile.component.scss","./src/app/components/modals/fresh-egg-inventory-modal/fresh-egg-inventory-modal.component.html","./node_modules/moment/locale sync ^\\.\\/.*$","./src/app/pages/main/inventory-stocks/fresh-eggs/fresh-eggs-listing/fresh-eggs-listing.component.html","./src/app/pages/main/transactions/transactions-listing/transactions-listing.component.scss","./src/app/components/modals/medicine-unit-modal/medicine-unit-modal.component.html","./src/app/components/modals/confirm-password-modal/confirm-password-modal.component.scss","./src/app/pages/main/performance-report/consumption/medicine/medicine.component.scss","./src/app/components/modals/reports/report-feeds-consumption/report-feeds-consumption.component.scss","./src/app/pages/main/customer/customer-update/customer-update.component.html","./src/app/components/modals/add-discount-modal/add-discount-modal.component.scss","./src/app/pages/main/inventory-stocks/trays/trays-listing/trays-listing.component.scss","./src/app/pages/main/feeds-medicine-management/feeds/feeds-update/feeds-update.component.scss","./src/app/pages/main/transactions/transactions-listing-by-order-status/transactions-listing-by-order-status.component.scss","./src/app/pages/main/customer/customer-view/customer-view.component.html","./src/app/pages/main/payment/payment-print/payment-print.component.html","./src/app/components/modals/transaction-create-modal/transaction-create-modal.component.html","./src/app/components/modals/reports/report-daily-house/report-daily-house.component.html","./src/app/app.component.html","./src/app/pages/main/feeds-medicine-management/feeds/feeds-update/feeds-update.component.html","./src/app/components/modals/general-modal/general-modal.component.scss","./src/app/components/reports/reports-buttons/reports-buttons.component.scss","./src/app/pages/main/feeds-medicine-management/medicine/medicine-update/medicine-update.component.html","./src/app/components/modals/reports/report-daily/report-daily.component.html","./src/app/components/modals/reports/report-production-per-house/report-production-per-house.component.html","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-listing/feeds-medicine-consumption-listing.component.scss","./src/app/pages/main/staff/staff-update/staff-update.component.html","./src/app/components/modals/reports/report-overall-sales/report-overall-sales.component.html","./src/app/components/modals/fresh-egg-inventory-modal/fresh-egg-inventory-modal.component.scss","./src/app/components/modals/reports/report-fresh-eggs/report-fresh-eggs.component.html","./src/app/pages/main/feeds-medicine-management/feeds/feeds-create/feeds-create.component.html","./src/app/pages/main/dashboard/dashboard.component.scss","./src/app/pages/main/customer/customer-view/customer-view.component.scss","./src/app/components/modals/reports/report-medicine/report-medicine.component.html","./src/app/pages/main/staff/staff-update/staff-update.component.scss","./src/app/pages/main/inventory-stocks/trays/trays-view/trays-view.component.scss","./src/app/pages/main/feeds-medicine-management/feeds/feeds-listing/feeds-listing.component.scss","./src/app/pages/main/performance-report/stocks/stocks-listing/stocks-listing.component.html","./src/app/pages/main/feeds-medicine-management/medicine/medicine-listing/medicine-listing.component.html","./src/app/components/modals/reports/report-daily-house/report-daily-house.component.scss","./src/app/components/modals/add-discount-modal/add-discount-modal.component.html","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-view/feeds-medicine-consumption-view.component.html","./src/app/components/modals/reports/report-fresh-eggs-view/report-fresh-eggs-view.component.html","./src/app/components/modals/feed-consumption-update-modal/feed-consumption-update-modal.component.scss","./src/app/pages/main/feeds-medicine-management/feeds/feeds-listing/feeds-listing.component.html","./src/app/pages/main/customer/customer-create/customer-create.component.html","./src/app/components/modals/price-modal/price-modal.component.html","./src/app/pages/main/customer/customer-update/customer-update.component.scss","./src/app/components/modals/reports/report-daily/report-daily.component.scss","./src/app/pages/main/daily-reports/daily-reports-house-listing/daily-reports-house-listing.component.html","./src/app/pages/main/activity/activity-listing/activity-listing.component.html","./src/app/components/modals/reports/report-feeds-consumption/report-feeds-consumption.component.html","./src/app/pages/main/transactions/transactions-listing-by-payment-status/transactions-listing-by-payment-status.component.html","./src/app/components/modals/reports/report-stocks/report-stocks.component.scss","./src/app/pages/auth/login/login.component.scss","./src/app/pages/main/inventory-stocks/sacks/sacks-listing/sacks-listing.component.scss","./src/app/components/modals/general-modal/general-modal.component.html","./src/app/pages/main/performance-report/consumption/feeds/feeds.component.html","./src/app/pages/main/transactions/transactions-create-preview/transactions-create-preview.component.html","./src/app/components/modals/reports/report-trays/report-trays.component.scss","./node_modules/tslib/tslib.es6.js","./src/app/components/modals/reports/report-production-by-egg-size/report-production-by-egg-size.component.html","./src/app/components/modals/reports/report-daily-view/report-daily-view.component.html","./src/app/pages/main/performance-report/stocks/stocks-view/stocks-view.component.html","./src/app/pages/main/house/house-listing/house-listing.component.html","./src/app/pages/main/performance-report/sales/overall-sales/overall-sales.component.html","./src/app/components/modals/reports/report-production-by-egg-size/report-production-by-egg-size.component.scss","./src/app/pages/main/performance-report/consumption/medicine/medicine.component.html","./src/app/components/modals/medicine-consumption-update-modal/medicine-consumption-update-modal.component.html","./src/app/pages/main/payment/payment-update/payment-update.component.html","./src/app/pages/main/inventory-stocks/sacks/sacks-view/sacks-view.component.html","./src/app/components/modals/price-modal/price-modal.component.scss","./src/app/pages/main/performance-report/stocks/stocks-listing/stocks-listing.component.scss","./src/app/pages/main/price-management/price-management-view/price-management-view.component.scss","./src/app/pages/main/inventory-stocks/sacks/sacks-listing/sacks-listing.component.html","./src/app/components/modals/feed-consumption-update-modal/feed-consumption-update-modal.component.html","./src/app/components/modals/reports/report-egg-price/report-egg-price.component.scss","./src/app/pages/main/performance-report/sales/sales-by-egg-size/sales-by-egg-size.component.html","./src/app/pages/main/inventory-stocks/fresh-eggs/fresh-eggs-view/fresh-eggs-view.component.scss","./src/app/pages/main/staff/staff-view/staff-view.component.scss","./src/app/pages/main/transactions/transactions-view/transactions-view.component.html","./src/app/components/modals/view-payment-modal/view-payment-modal.component.scss","./src/app/components/modals/reports/report-daily-view/report-daily-view.component.scss","./src/app/components/modals/reports/report-fresh-eggs/report-fresh-eggs.component.scss","./src/app/pages/main/daily-reports/daily-reports-listing/daily-reports-listing.component.html","./src/app/pages/main/transactions/transactions-listing-by-payment-status/transactions-listing-by-payment-status.component.scss","./src/app/components/modals/reports/report-monthly-record/report-monthly-record.component.scss","./src/app/pages/main/staff/staff-create/staff-create.component.scss","./src/app/pages/main/inventory-stocks/fresh-eggs/fresh-eggs-listing/fresh-eggs-listing.component.scss","./src/app/components/modals/reports/report-sacks/report-sacks.component.scss","./src/app/app.component.scss","./src/app/pages/main/inventory-stocks/sacks/sacks-view/sacks-view.component.scss","./src/app/layout/template/template.component.scss","./src/app/lib/jwt/jwt.ts","./src/app/lib/cookie/cookie.ts","./src/app/lib/urls/urls.ts","./src/app/lib/env/env.ts","./src/app/services/house/house.service.ts","./src/app/services/orders/orders.service.ts","./src/app/services/user/user.service.ts","./src/app/services/customer/customer.service.ts","./src/app/services/price-management/price-management.service.ts","./src/app/services/payment/payment.service.ts","./src/app/services/feeds-medicine-consumption/feeds-medicine-consumption.service.ts","./src/app/components/modals/confirm-password-modal/confirm-password-modal.component.ts","./src/app/services/feeds-medicine-management/feeds-medicine-management.service.ts","./src/app/components/modals/general-modal/general-modal.component.ts","./src/app/services/auth/auth.service.ts","./src/app/services/angular-fire-store/angular-fire-store.service.ts","./src/app/services/notifications/notifications.service.ts","./src/app/layout/template/template.component.ts","./src/app/guard/auth/auth.guard.ts","./src/app/pages/auth/login/login.component.ts","./src/app/lib/strrandom/strrandom.ts","./src/app/pages/main/customer/customer-create/customer-create.component.ts","./src/app/components/datatables/customer-listing/customer-listing.ts","./src/app/components/datatables/limit/limit.ts","./src/app/services/general/general.service.ts","./src/app/pages/main/customer/customer-listing/customer-listing.component.ts","./src/app/services/staff/staff.service.ts","./src/app/pages/main/customer/customer-update/customer-update.component.ts","./src/app/components/datatables/customer-view/customer-view.ts","./src/app/components/datatables/filter/order-status/order-status.ts","./src/app/components/datatables/filter/payment-status/payment-status.ts","./src/app/components/datatables/filter/mode-of-payment/mode-of-payment.ts","./src/app/services/transactions/transactions.service.ts","./src/app/pages/main/customer/customer-view/customer-view.component.ts","./src/app/components/datatables/daily-reports-house-listing/daily-reports-house-listing.ts","./src/app/components/datatables/filter/report-status/report-status.ts","./src/app/services/daily-reports/daily-reports.service.ts","./src/app/components/modals/reports/report-daily-house/report-daily-house.component.ts","./src/app/pages/main/daily-reports/daily-reports-house-listing/daily-reports-house-listing.component.ts","./src/app/components/datatables/daily-reports-listing/daily-reports-listing.ts","./src/app/components/modals/reports/report-daily/report-daily.component.ts","./src/app/pages/main/daily-reports/daily-reports-listing/daily-reports-listing.component.ts","./src/app/components/modals/reports/report-daily-view/report-daily-view.component.ts","./src/app/pages/main/daily-reports/daily-reports-view/daily-reports-view.component.ts","./src/app/services/dashboard/dashboard.service.ts","./src/app/pages/main/dashboard/dashboard.component.ts","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-create/feeds-medicine-consumption-create.component.ts","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-listing/feeds-medicine-consumption-listing.component.ts","./src/app/components/datatables/feeds-medicine-consumption-view/feeds-medicine-consumption-view.ts","./src/app/components/modals/medicine-consumption-update-modal/medicine-consumption-update-modal.component.ts","./src/app/components/modals/feed-consumption-update-modal/feed-consumption-update-modal.component.ts","./src/app/services/inventory-stocks/inventory-stocks.service.ts","./src/app/components/modals/reports/report-monthly-record/report-monthly-record.component.ts","./src/app/pages/main/feeds-medicine-consumption/feeds-medicine-consumption-view/feeds-medicine-consumption-view.component.ts","./src/app/pages/main/feeds-medicine-management/feeds/feeds-create/feeds-create.component.ts","./src/app/components/datatables/feeds-listing/feeds-listing.ts","./src/app/pages/main/feeds-medicine-management/feeds/feeds-listing/feeds-listing.component.ts","./src/app/pages/main/feeds-medicine-management/feeds/feeds-update/feeds-update.component.ts","./src/app/components/modals/medicine-unit-modal/medicine-unit-modal.component.ts","./src/app/pages/main/feeds-medicine-management/medicine/medicine-create/medicine-create.component.ts","./src/app/components/datatables/medicine-listing/medicine-listing.ts","./src/app/pages/main/feeds-medicine-management/medicine/medicine-listing/medicine-listing.component.ts","./src/app/pages/main/feeds-medicine-management/medicine/medicine-update/medicine-update.component.ts","./src/app/components/datatables/house-listing/house-listing.ts","./src/app/components/modals/house-modal/house-modal.component.ts","./src/app/pages/main/house/house-listing/house-listing.component.ts","./src/app/components/datatables/fresh-eggs-listing/fresh-eggs-listing.ts","./src/app/components/modals/reports/report-fresh-eggs/report-fresh-eggs.component.ts","./src/app/pages/main/inventory-stocks/fresh-eggs/fresh-eggs-listing/fresh-eggs-listing.component.ts","./src/app/components/datatables/fresh-eggs-view/fresh-eggs-view.ts","./src/app/components/modals/reports/report-fresh-eggs-view/report-fresh-eggs-view.component.ts","./src/app/pages/main/inventory-stocks/fresh-eggs/fresh-eggs-view/fresh-eggs-view.component.ts","./src/app/components/datatables/sacks-listing/sacks-listing.ts","./src/app/components/modals/reports/report-sacks/report-sacks.component.ts","./src/app/pages/main/inventory-stocks/sacks/sacks-listing/sacks-listing.component.ts","./src/app/components/datatables/sacks-view/sacks-view.ts","./src/app/pages/main/inventory-stocks/sacks/sacks-view/sacks-view.component.ts","./src/app/components/datatables/trays-listing/trays-listing.ts","./src/app/components/modals/reports/report-trays/report-trays.component.ts","./src/app/pages/main/inventory-stocks/trays/trays-listing/trays-listing.component.ts","./src/app/components/datatables/trays-view/trays-view.ts","./src/app/pages/main/inventory-stocks/trays/trays-view/trays-view.component.ts","./src/app/services/egg-type/egg-type.service.ts","./src/app/services/performance-report/performance-report.service.ts","./src/app/components/modals/reports/report-feeds-consumption/report-feeds-consumption.component.ts","./src/app/pages/main/performance-report/consumption/feeds/feeds.component.ts","./src/app/components/modals/reports/report-medicine/report-medicine.component.ts","./src/app/pages/main/performance-report/consumption/medicine/medicine.component.ts","./src/app/components/modals/reports/report-production-by-egg-size/report-production-by-egg-size.component.ts","./src/app/pages/main/performance-report/harvested/production-by-egg-size/production-by-egg-size.component.ts","./src/app/components/modals/reports/report-production-per-house/report-production-per-house.component.ts","./src/app/pages/main/performance-report/harvested/production-per-house/production-per-house.component.ts","./src/app/components/datatables/performance-report/sales/overall-sales/overall-sales.ts","./src/app/components/modals/reports/report-overall-sales/report-overall-sales.component.ts","./src/app/pages/main/performance-report/sales/overall-sales/overall-sales.component.ts","./src/app/components/modals/reports/report-sales-egg/report-sales-egg.component.ts","./src/app/pages/main/performance-report/sales/sales-by-egg-size/sales-by-egg-size.component.ts","./src/app/components/datatables/performance-report/stocks/stocks.ts","./src/app/components/modals/reports/report-stocks/report-stocks.component.ts","./src/app/pages/main/performance-report/stocks/stocks-listing/stocks-listing.component.ts","./src/app/pages/main/performance-report/stocks/stocks-view/stocks-view.component.ts","./src/app/components/datatables/payments/payments.ts","./src/app/components/datatables/filter/payment-attachment/payment-attachment.ts","./src/app/components/modals/view-payment-modal/view-payment-modal.component.ts","./src/app/pages/main/payment/payment-listing/payment-listing.component.ts","./src/app/pages/main/payment/payment-update/payment-update.component.ts","./src/app/components/datatables/payment/payment-form-print/payment-form-print.ts","./src/app/pages/main/payment/payment-print/payment-print.component.ts","./src/app/components/datatables/price-management-listing/price-management-listing.ts","./src/app/components/modals/price-modal/price-modal.component.ts","./src/app/components/modals/reports/report-egg-price/report-egg-price.component.ts","./src/app/pages/main/price-management/price-management-listing/price-management-listing.component.ts","./src/app/components/datatables/price-management-view/price-management-view.ts","./src/app/components/modals/reports/report-price-trend/report-price-trend.component.ts","./src/app/pages/main/price-management/price-management-view/price-management-view.component.ts","./src/app/components/datatables/filter/staff-role/staff-role.ts","./src/app/pages/main/staff/staff-create/staff-create.component.ts","./src/app/components/datatables/staff-listing/staff-listing.ts","./src/app/pages/main/staff/staff-listing/staff-listing.component.ts","./src/app/pages/main/staff/staff-update/staff-update.component.ts","./src/app/components/datatables/staff-view/staff-view.ts","./src/app/pages/main/staff/staff-view/staff-view.component.ts","./src/app/pages/main/staff/staff-my-profile/staff-my-profile.component.ts","./src/app/components/modals/transaction-create-modal/transaction-create-modal.component.ts","./src/app/components/datatables/transaction-create/transaction-create.ts","./src/app/pages/main/transactions/transactions-create/transactions-create.component.ts","./src/app/pages/main/transactions/transactions-create-preview/transactions-create-preview.component.ts","./src/app/components/datatables/transactions-listing/transactions-listing.ts","./src/app/pages/main/transactions/transactions-listing/transactions-listing.component.ts","./src/app/components/datatables/transactions-listing-by-order-status/transactions-listing-by-order-status.ts","./src/app/pages/main/transactions/transactions-listing-by-order-status/transactions-listing-by-order-status.component.ts","./src/app/components/datatables/transactions-listing-by-payment-status/transactions-listing-by-payment-status.ts","./src/app/pages/main/transactions/transactions-listing-by-payment-status/transactions-listing-by-payment-status.component.ts","./src/app/components/datatables/transactions-view/transactions-view.ts","./src/app/components/modals/fresh-egg-inventory-modal/fresh-egg-inventory-modal.component.ts","./src/app/components/modals/add-discount-modal/add-discount-modal.component.ts","./src/app/pages/main/transactions/transactions-view/transactions-view.component.ts","./src/app/components/datatables/activity-listing/activity-listing.ts","./src/app/pages/main/activity/activity-listing/activity-listing.component.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/components/modules/material/material.module.ts","./src/app/components/reports/reports-buttons/reports-buttons.component.ts","./src/environments/environment.ts","./src/app/components/modals/reports/report-footer/report-footer.component.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","value","step","next","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__exportStar","m","__values","__read","ar","error","__spread","concat","__spreadArrays","il","k","a","j","jl","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","default","__importDefault","jwt","date","header","alg","typ","payload","signature","secret","timezone","setAlgo","setClaim","setIssuer","issuer","setAudience","audience","setExpiration","expiration","setId","setIssuedAt","now","getTimeFormated","setSecret","setDate","Date","mon","addZero","getMonth","getDate","hr","getHours","min","getMinutes","sec","getSeconds","getFullYear","getTimezone","name","guess","gmt","toString","split","sha256","h","base64url","source","string","JSON","stringify","b64url","btoa","replace","getToken","getPayload","token","base64Url","base64","decodeURIComponent","atob","charCodeAt","slice","join","parse","isConsented","deleteCookie","domain","setCookie","getCookie","ca","document","cookie","caLen","cookieName","substring","expireDays","path","expires","setTime","getTime","toUTCString","cpath","cdomain","consent","isConsent","COOKIE","EXPIRE_DAYS","preventDefault","providedIn","urls","http","session","router","secure","url","secureUrl","devicetoken","deviceid","apikey","_SUPERADMIN","_ADMIN","_SALES","_PRODUCTIONPLANNER","_PRODUCTIONMANAGER","_PRESSOPERATOR","getUrl","createUrlParam","uriStr","setToken","day","generateToken","retrieve","tz","getHttpOptions","headers","Authorization","Devicetoken","Deviceid","exchangeToken","httpOptions","get","subscribe","data","env","getList","page","limit","order","search","err","message","getAllList","save","post","remove","HouseService","action","getCount","savePayment","formData","FormData","propt","append","getCollectibles","user_id","OrdersService","saveUser","updateUser","confirmPassword","UserService","console","log","getCustomerTypes","viewRecord","getProfile","getRecord","CustomerService","type","from","to","getPriceTrend","PriceManagementService","getListByOrderId","order_id","delete","saveDiscount","PaymentService","house_id","getHouselist","updateFeeds","formdata","request","getAllmedicine","getAllFeeds","saveMed","getHouserecord","updateMeds","validate","FeedsMedicineConsumptionService","dialogRef","formBuilder","_snackBar","dialog","ordersService","priceManagementService","userService","events","customerService","paymentService","feedsMedicineConsumptionService","item","modal_title","modal_primary_button","modal_primary_button_class","modal_message","show_password","isLoading","confirmPasswordForm","group","password","compose","required","minLength","ngOnInit","controls","setValue","role","submit","res","proceedAction","openSnackBar","catch","closeModal","publish","showPassword","refresh","close","open","verticalPosition","announcementMessage","duration","ConfirmPasswordModalComponent","selector","template","getFeedsList","delivery_date","feed","expiration_date","getMedicineList","medicine","getFeedRecord","getMedicineRecord","saveFeed","saveMedicine","removeFeed","removeMedicine","getMedicineUnits","saveMedicineUnit","removeMedicineUnit","FeedsMedicineManagementService","feedsMedicineManagementService","modal_secondary_button","modal_secondary_button_class","generalForm","addControl","maxLength","openModal","width","afterClosed","GeneralModalComponent","isLoggedIn","jti","navigate","login","generate","validateUserRole","localStorage","getItem","user_role_id","AuthService","afs","getCollection","collection","Observable","observer","valueChanges","getWhere","field","query","where","getData","setData","doc","set","removeData","generateId","createId","AngularFireStoreService","getUserNotificationList","isUnread","markNotificationAsRead","NotificationsService","auth","breakpointObserver","houseService","notificationsService","houses","statuscount","isHandset$","notifCount","notifPreview","observe","Handset","pipe","matches","shareReplay","getHouses","userLogin","showSnackBar","getStatuscount","waitForNotifications","Number","forEach","document_id","logout","clear","gotoPage","notifData","item_id","horizontalPosition","TemplateComponent","_route","canActivate","state","AuthGuard","route","loginForm","email","remember_me","store","setItem","LoginComponent","generateFileName","fileNameGenerator","len","charSet","randomString","randomPoz","Math","floor","random","validateNumber","event","window","keyCode","which","checkUrl","includes","convertTo24Hrs","time","hours","match","minutes","AMPM","sHours","sMinutes","converToMin","parseInt","strrandom","location","strand","customer_type_options","isProfileImageLoaded","isProfilePhotoCropped","profileUploadWrongFile","uploadMaxLimitReached","userForm","first_name","last_name","customer_type_id","number","pattern","photo","back","fileChange","files","size","profilePhoto","imageProfilePhotoCropped","croppedprofilePhoto","fileOfBlob","File","file","imageProfileLoaded","startCrop","imageCropper","crop","goBack","static","CustomerCreateComponent","datatable","canSort","isVisible","canToggle","limitoptions","getActivity","order_status","mode_of_payment","GeneralService","generalService","isLoaded","ths","limits","visible_columns","items","totalItems","prev_page","next_page","totalPages","limit_disabled","order_by_column","order_by","activity","showtimeago","index","searchItem","changeLimit","orderList","can_sort","counter","CustomerListingComponent","role_id","dailyhouse_id","StaffService","staffService","authService","params","generatePassword","CustomerUpdateComponent","orderstatus","paymentstatus","realpaymentstatus","modeofpayment","payment_status","TransactionsService","datePipe","transactions","order_status_options","payment_status_options","mode_of_payment_options","created_at","show_filter","user_profile","collectibles","getOrders","changePaymentStatus","changeOrderStatus","changeModeOfPayment","chooseCreatedAt","transform","begin","end","showFilter","clearFilters","changeColumnVisibility","some","CustomerViewComponent","reportstatus","flockman_id","getSortingRecord","house_harvest_id","DailyReportsService","dailyReportsService","exportAsService","staff_items","flockmanId","exportAsConfig","elementId","options","jsPDF","orientation","format","margin","compress","pagebreak","after","showall","pdfCallbackFn","date_today","all","user","houseId","exportPdf","opt","fileName","pdf","noOfPages","internal","getNumberOfPages","setPage","setFontSize","text","pageSize","getWidth","getHeight","ReportDailyHouseComponent","report_status_options","max_date","changeReportStatus","panelClass","exportToCsv","datas","med_intake","medicine_name","med","prepared_by_date","age","mortality","mortality_rate","cull","bird_count","real_egg_count","production_rate","feeds","bags","sortingRecordstatus","recordStatus","flockman","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","filename","generateCsv","DailyReportsHouseListingComponent","ReportDailyComponent","getStaffList","changeFlockman","house_name","DailyReportsListingComponent","sorting_item","html2canvas","scale","image","quality","daily_report","sorting_report","ReportDailyViewComponent","selectedIndex","printabledata","meds","house","egg_count","checked_by_name","received_by_name","prepared_by_name","tabChanged","DailyReportsViewComponent","getDashboard","getFeedConsumption","getMedicineConsumption","getHarvestStatus","getHarvestRate","getRecentTransactions","getActivityLog","getStaffActivities","getCode","DashboardService","dashboardService","pieChartOptions","responsive","legend","position","labels","fontSize","fontColor","tooltips","callbacks","datasetIndex","footer","datasets","toFixed","plugins","datalabels","formatter","ctx","pieChartLabels","pieChartData","pieChartType","pieChartLegend","pieChartPlugins","piechartvalues","barChartOptions","maintainAspectRatio","aspectRatio","scales","yAxes","scaleLabel","display","labelString","lineHeight","ticks","callback","tier","log10","abs","postfix","formatted","pow","test","substr","parts","color","barChartLabels","barChartType","barChartLegend","barChartPlugins","barChartData","barchartvalues","dateToday","dashboard_data","feed_consumption_data","medicine_consumption_data","harvest_production_status_data","harvest_rate_data","recent_transactions_data","staff_activities_data","masonryItems","userProfile","changeType","consumed_feeds","backgroundColor","hoverBackgroundColor","abbreviateNumber","DashboardComponent","feedsandmedicineConsumption","monthdatetoday","house_options","feeds_and_medicine","medicines","checkedMedicine","days","medic","disable_main_input","date_increment","feed_options","medicineConsumptionForm","age_week","age_day","loopDates","year","month","loop","medics","med_id","feed_id","feed_consumption","newDate","getHouseList","getAllmedicines","daily_house_harvest_id","getDailyhouserecord","getFeedsandmedicineconsumption","house_data","house_details","tindex","findIndex","x","medicine_ids","medicine_values","mindex","current_age_of_chicken","beginning_population","house_record","getHousedetails","setMedvalue","chooseFeed","setFeedValue","info","checkbox","checked","FeedsMedicineConsumptionCreateComponent","canAdd","getHouseListing","FeedsMedicineConsumptionListingComponent","medicineUpdateForm","daily_house_report_id","item_med_ids","MedicineConsumptionUpdateModalComponent","feedUpdateForm","FeedConsumptionUpdateModalComponent","getTrayList","getTrayRecord","getSackList","getSackRecord","getEggList","getEggRecord","InventoryStocksService","inventoryStocksService","ReportMonthlyRecordComponent","feedsmedicine","dateCreatedat","contentEditable","datetoday","isToday","onRowEnter","feeds_bags","innerHTML","reloadData","getSelection","removeAllRanges","updateMed","openPdf","feeds_medicine","age_string","medicine_string","medicine_value","medicine_unit","unit","end_bird_population","feed_info","rec_feed_consumption","req_feeds","FeedsMedicineConsumptionViewComponent","min_date","feedForm","kg_per_bag","max","pieces","converted","unit_price","remarks","convertWeight","FeedsCreateComponent","current_date","isExpired","chooseDeliveryDate","chooseExpirationDate","FeedsListingComponent","FeedsUpdateComponent","medicineUnitForm","MedicineUnitModalComponent","units","medicineForm","unit_id","net_weight","MedicineCreateComponent","MedicineListingComponent","MedicineUpdateComponent","houseForm","capacity","beginning","clearValidators","setValidators","canDelete","HouseModalComponent","getListing","HouseListingComponent","ReportFreshEggsComponent","beginning_stocks","total_harvested","waste_sales","total_remaining_stocks","FreshEggsListingComponent","ReportFreshEggsViewComponent","remaining","harvested","sales","egg_type","FreshEggsViewComponent","ReportSacksComponent","total_out_sales","total_out","last_data","last_ending","total_in","SacksListingComponent","in_house","out_sales","sack_bldg_inventory","count","SacksViewComponent","ReportTraysComponent","returned","number_of_out_sales","total_remaining","TraysListingComponent","TraysViewComponent","EggTypeService","getProductionHouse","getProductionEggSize","getOverallSales","getSalesByEggSize","getFeedConsumptionReport","getStocks","getMedicineconsumption","getLocationwithhighestorders","getCreditBalance","PerformanceReportService","eggTypeService","performanceReportService","lineChartOptions","stacked","xAxes","dset","piece","lineChartLabels","lineChartType","lineChartLegend","lineChartPlugins","lineChartData","chartvalues","chartlabels","overall_harvested_eggs","charthousevalues","getGraph","chv","index_of_date","findhome","find","daily_harvest_report","sum","findIfVisible","hidden","ReportFeedsConsumptionComponent","FeedsComponent","overall","medicine_volume","ReportMedicineComponent","getAllhouse","changeHouse","selectMed","selectHouse","downloadModal","MedicineComponent","egg_type_options","selected_house","getEggTypeList","ReportProductionByEggSizeComponent","filter","egg","daily_sorting_inventory","type_id","index_of_find","houseSelected","ProductionByEggSizeComponent","fontStyle","grouped_date","daily_sorting_report","ReportProductionPerHouseComponent","ProductionPerHouseComponent","beginAtZero","tooltipItem","overall_value","getIndex","total","borderColor","ReportOverallSalesComponent","spanGaps","OverallSalesComponent","egg_types","ReportSalesEggComponent","align","barsChartOptions","barsChartLabels","barsChartType","barsChartLegend","barsChartPlugins","barsChartData","highest_orders","credit_balance","chartvalues_balance","chartvalues_credit","getHighestorders","getCreditbalance","week","balance","credit","SalesByEggSizeComponent","chartvalues_in","chartvalues_out","egg_in","egg_out","ReportStocksComponent","StocksListingComponent","StocksViewComponent","datatable2","paymentattachment","paymentattachment_options","type_label","isPhotoLoaded","isPhotoCropped","photoUploadWrongFile","attachmentForm","attachment_no","payment_id","attachment","temp_photo","photoChange","imagePhotoCropped","croppedPhoto","imageLoaded","ViewPaymentModalComponent","visible_columns_others","ths_others","items_others","getListOthers","payment","PaymentListingComponent","transactionsService","order_items","canChangeMode","isReceiptPhotoLoaded","isReceiptPhotoCropped","receiptUploadWrongFile","uploadReceiptMaxLimitReached","paymentForm","total_price","due_date","receipt_photo","receipt_no","last_payment","changePayment","calculateRemaining","enterCashAmount","remaining_balance","receiptChange","receiptPhoto","imageReceiptPhotoCropped","croppedReceiptPhoto","imageReceiptLoaded","chooseDate","savePrint","PaymentUpdateComponent","fromPage","price","order_item_details","PaymentPrintComponent","priceForm","current_price","per_piece","egg_type_type","proceedProcess","PriceModalComponent","per_case","per_tray","ReportEggPriceComponent","updated_at","PriceManagementListingComponent","type_name","ReportPriceTrendComponent","lineTension","PriceManagementViewComponent","staffroleoptions","roles","username","changeRole","removeControl","StaffCreateComponent","StaffListingComponent","user_info","user_logged_in","profile_picture","profile_first_name","profile_last_name","contact_number","address_address","StaffUpdateComponent","code_options","getCodefilter","report_status","changeCode","StaffViewComponent","StaffMyProfileComponent","grand_total","orderForm","cart","customer","customer_name","TransactionCreateModalComponent","customer_options","mode_of_payment_label","total_pieces","total_qty","qty","canProceed","my_order","validateProceed","isUsed","getCustomerList","customerSelected","get_customer_name","eggTypeSelected","addItemToCart","changeQty","cartToRetain","removeItemInCart","splice","grand_total_pcs","TransactionsCreateComponent","removeItem","TransactionsCreatePreviewComponent","TransactionsListingComponent","order_status_label","TransactionsListingByOrderStatusComponent","TransactionsListingByPaymentStatusComponent","FreshEggInventoryModalComponent","discountForm","discount","calculateFinalPrice","sub","AddDiscountModalComponent","primary_button","primary_button_action","timerLabels","Hours","Minutes","Seconds","date_to_pickup","display_timer","showAction","prepared_by","balance_credit_approved","removeTimer","TransactionsViewComponent","ActivityListingComponent","routes","component","children","redirectTo","pathMatch","AppRoutingModule","imports","forRoot","AppComponent","MaterialComponents","MaterialModule","declarations","ReportsButtonsComponent","environment","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReportFooterComponent","AppModule","entryComponents","initializeApp","providers","bootstrap","bootstrapModule","webpackEmptyAsyncContext"],"mappings":"6FAAA,OAAe,c,oCCAf,OAAe,c,oCCAf,OAAe,c,oCCAf,OAAe,c,oCCAf,OAAe,c,oCCAf,OAAe,w3O,oCCAf,OAAe,c,sDCAf,OAAe,y5P,oCCAf,OAAe,8vL,oCCAf,OAAe,c,oCCAf,OAAe,4+tB,oCCAf,OAAe,c,2ECAf,OAAe,2C,oCCAf,OAAe,wpmB,sDCAf,OAAe,c,oCCAf,OAAe,kisB,sDCAf,OAAe,c,oCCAf,OAAe,m0D,oCCAf,OAAe,spc,oCCAf,OAAe,4xY,oCCAf,OAAe,c,oCCAf,OAAe,c,oCCAf,OAAe,qwL,oCCAf,OAAe,c,oCCAf,OAAe,k7X,oCCAf,OAAe,c,oCCAf,OAAe,q3E,oCCAf,OAAe,w7V,oCCAf,OAAe,c,oCCAf,OAAe,m6D,oCCAf,OAAe,y+e,oCCAf,OAAe,0oD,oCCAf,OAAe,osU,oCCAf,OAAe,c,oCCAf,OAAe,8G,oCCAf,OAAe,+H,oCCAf,OAAe,c,oCCAf,OAAe,0H,kCCAf,OAAe,65Y,kCCAf,OAAe,c,kCCAf,OAAe,c,kCCAf,OAAe,c,kCCAf,OAAe,c,kCCAf,OAAe,m6f,kCCAf,OAAe,6pH,oCCAf,OAAe,8nd,kCCAf,OAAe,ytP,kCCAf,OAAe,iogB,kCCAf,OAAe,c,kCCAf,OAAe,4jT,kCCAf,OAAe,qvZ,kCCAf,OAAe,g6V,kCCAf,OAAe,+H,kCCAf,OAAe,c,kCCAf,OAAe,c,kCCAf,OAAe,0vM,kCCAf,OAAe,gtoB,kCCAf,OAAe,c,kCCAf,OAAe,giO,kCCAf,OAAe,c,kCCAf,OAAe,c,kCCAf,OAAe,gyG,kCCAf,OAAe,c,kCCAf,OAAe,u4Z,kCCAf,OAAe,o+V,kCCAf,OAAe,knO,kCCAf,OAAe,wpD,kCCAf,OAAe,81O,oCCAf,OAAe,ob,kCCAf,OAAe,4G,kCCAf,OAAe,s4H,kCCAf,OAAe,c,kCCAf,OAAe,c,oCCAf,OAAe,c,kCCAf,OAAe,6zE,qBCAf,IAAIA,EAAM,CACT,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,aAAc,OACd,UAAW,OACX,aAAc,OACd,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,aAAc,OACd,gBAAiB,OACjB,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,UAAW,OACX,aAAc,OACd,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,aAAc,OACd,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW,OACX,OAAQ,OACR,UAAW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AGdL,QAAS,CACPG,IAEF1mC,QAAS,CACP0mC,OAISC,GAAb,G,uCCrDA,cAEE,cAKF,OAHE,YAAAlzB,SAAA,aAJWozB,EAAuB,cALnC,YAAU,CACTjyB,SAAU,sBACVC,SAAA,qC,iDAGWgyB,GAAb,G,8ECHaC,IACC,EADDA,GAEK,CACdC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCPnB,cAEE,cAKF,OAHE,YAAA7zB,SAAA,aAJW8zB,EAAqB,cALjC,YAAU,CACT3yB,SAAU,oBACVC,SAAA,qC,iDAGW0yB,GAAb,GC+SA,4BAAwB,OAAXC,EAAS,cAxKrB,YAAS,CACRZ,aAAc,CACZ,GACA,GAEA,GAEA,GACA,GACA,GACA,GAEA,GACA,GACA,GAEA,GAEA,GACA,GACA,GAEA,GACA,GACA,GAEA,GACA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GAEA,GACA,GACA,GACA,GAEA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEFa,gBAAiB,CACf,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEFlB,QAAS,CACP,IACA,IACA,GACA,IACA,KACA,KACA,IAAoBC,UACpB,KAAmBA,UACnB,KAAiBA,UACjB,IAAaA,UACb,GACA,KACA,KAEA,KACA,KACA,KACA,KAAcA,UACd,KACA,IACA,KACA,KACA,KACA,KAAkBkB,cAAcZ,IAChC,KACA,MAEFa,UAAW,CACT,KACA,IACA,MAEFC,UAAW,CAAC,OAEDJ,GAAb,GC/SIV,IACF,eAGF,cAAyBe,gBAAgB,IACtC5zB,OAAM,SAAAlF,GAAO,OAAAqB,QAAQ/K,MAAM0J,O,mBCZ9B,SAAS+4B,EAAyB1oC,GAGjC,OAAOgE,QAAQtD,UAAU+D,MAAK,WAC7B,IAAIpE,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,KAGRqoC,EAAyBloC,KAAO,WAAa,MAAO,IACpDkoC,EAAyBhoC,QAAUgoC,EACnC/nC,EAAOC,QAAU8nC,EACjBA,EAAyBzoC,GAAK,S","file":"main.js","sourcesContent":["export default \"\"","export default \"\"","export default \"\"","export default \"\"","export default \"\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Inflow/Outflow</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30 ml-0 mr-0 mt-10\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                    <p>Total Eggs Inflow</p>\\n                    <h3>{{ item ? (item.total_egg_inflow | number) : 0 }}</h3>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p>Total Eggs Outflow</p>\\n                    <h3>{{ item ? (item.total_egg_outflow | number) : 0 }}</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30 ml-0 mr-0 break-now\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                    <canvas baseChart \\n                        [datasets]=\\\"barChartData\\\"\\n                        [labels]=\\\"barChartLabels\\\"\\n                        [options]=\\\"barChartOptions\\\"\\n                        [plugins]=\\\"barChartPlugins\\\"\\n                        [legend]=\\\"barChartLegend\\\"\\n                        [chartType]=\\\"barChartType\\\">\\n                    </canvas>\\n                </div>\\n                <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>All Dates</p>\\n                </div>\\n                <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                  <table>\\n                    <thead>\\n                      <tr>\\n                        <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                          <th *ngIf=\\\"th.isVisible && th.canToggle\\\">\\n                            {{ th.label }}\\n                          </th>\\n                        </ng-container>\\n                      </tr>\\n                    </thead>\\n                    <tbody>\\n                      <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                        <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                          <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"w-25-per\\\">{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                          <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"w-25-per\\\">{{ item.egg_in | number }}</td>\\n                          <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"w-25-per\\\">{{ item.egg_out | number }}</td>\\n                        </tr>\\n                      </ng-container>\\n                      <ng-container *ngIf=\\\"!isLoaded\\\">\\n                        <tr>\\n                          <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                            <ngx-skeleton-loader [theme]=\\\"{\\n                              'border-radius' : '5px',\\n                              'margin-bottom' : '0px',\\n                              'height' : '20px'\\n                            }\\\"></ngx-skeleton-loader>\\n                          </td>\\n                        </tr>\\n                      </ng-container>\\n                      <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                        <tr>\\n                          <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                        </tr>\\n                      </ng-container>\\n                    </tbody>\\n                  </table>\\n                </div>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n                <div class=\\\"row\\\">\\n                  <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n                  </div>\\n                </div>\\n              </ng-container>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Price Trend Report</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            \\n            <div class=\\\"container-card mb-25 mt-10 break-now\\\">\\n                <div class=\\\"row mb-30 ml-0 mr-0\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                        <!-- <p class=\\\"mb-10\\\">Overall Harvested Eggs</p> -->\\n                        <h1 class=\\\"heading\\\"><span class=\\\"sub-heading\\\">Egg Size: </span>{{ type_name }}</h1>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30 ml-0 mr-0\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                    <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                        <canvas baseChart \\n                            [datasets]=\\\"lineChartData\\\"\\n                            [labels]=\\\"lineChartLabels\\\"\\n                            [options]=\\\"lineChartOptions\\\"\\n                            [plugins]=\\\"lineChartPlugins\\\"\\n                            [legend]=\\\"lineChartLegend\\\"\\n                            [chartType]=\\\"lineChartType\\\">\\n                        </canvas>\\n                    </div>\\n                    <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                        <p>All Dates</p>\\n                    </div>\\n                    <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                        <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"container-card\\\">\\n                <div class=\\\"row mb-30 ml-0 mr-0\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                        <p class=\\\"mb-0\\\">Price Table</p>\\n                    </div>\\n                </div>\\n                <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                        <th *ngIf=\\\"th.isVisible\\\">\\n                                            {{ th.label }}\\n                                        </th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                    <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.updated_at | date: 'MM/dd/yyyy' }}</td>\\n                                    <td *ngIf=\\\"ths[1].isVisible\\\">₱ {{ item.price | number : '1.2-2' }}</td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                        <ngx-skeleton-loader [theme]=\\\"{\\n                                            'border-radius' : '5px',\\n                                            'margin-bottom' : '0px',\\n                                            'height' : '20px'\\n                                        }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-12 text-center\\\">\\n                            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n                        </div>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h5 class=\\\"mb-30\\\">Trays Inventory/Stocks</h5>\\n            </div>\\n        </div>\\n        <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        \\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table>\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible && th.canToggle\\\" class=\\\"p-10 fs-12\\\">\\n                                    {{ th.label }}\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                            <tr *ngFor=\\\"let item of items; let i = index\\\" [ngClass]=\\\"{'break-now' : (i + 1) % 11 == 0}\\\">\\n                            <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.created_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                            <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.beginning | number }}</td>\\n                            <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.returned | number }}</td>\\n                            <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.number_of_out_sales | number }}</td>\\n                            <td *ngIf=\\\"ths[4].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.total_remaining | number }}</td>\\n                            <td *ngIf=\\\"ths[5].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.name }}</td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!isLoaded\\\">\\n                            <tr>\\n                            <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                <ngx-skeleton-loader [theme]=\\\"{\\n                                'border-radius' : '5px',\\n                                'margin-bottom' : '0px',\\n                                'height' : '20px'\\n                                }\\\"></ngx-skeleton-loader>\\n                            </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                            <tr>\\n                            <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 h-22\\\"></p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\"","export default \"<section class=\\\"main-container pl-35 pt-35 pr-35\\\">\\n  <div class=\\\"row mb-20\\\">\\n      <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n          <h1 class=\\\"heading\\\">View Staff Profile</h1>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-12\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n              <i class=\\\"icon-back\\\"></i>\\n              <span class=\\\"ml-15\\\">Go back to list</span>\\n          </button>\\n      </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n      <div class=\\\"container-card view-record p-30\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-2 offset-xl-0 col-lg-3 offset-lg-0 col-md-6 offset-md-3 col-sm-6 offset-sm-3 col-6 offset-3\\\">\\n            <img *ngIf=\\\"!isLoaded || !user_profile.profile_picture\\\" src=\\\"../../../../../assets/images/profile.svg\\\" class=\\\"avatar img-responsive\\\">\\n            <img *ngIf=\\\"isLoaded && user_profile.profile_picture\\\" [src]=\\\"user_profile.profile_picture\\\" class=\\\"avatar img-responsive\\\">\\n          </div>\\n          <div class=\\\"col-xl-10 col-lg-9 col-md-12 col-sm-12 col-12 pl-0 mt-11\\\">\\n            <div class=\\\"row ml-0 mr-0\\\">\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-5 fs-12\\\">First Name</p>\\n                <h1 class=\\\"mini-heading fw-500\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.profile_first_name }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                              'border-radius': '5px',\\n                                              'margin-bottom': '0px',\\n                                              'height': '20px',\\n                                              'width': '50%'\\n                                          }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-5 fs-12\\\">Last Name</p>\\n                <h1 class=\\\"mini-heading fw-500\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.profile_last_name }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                              'border-radius': '5px',\\n                                              'margin-bottom': '0px',\\n                                              'height': '20px',\\n                                              'width': '50%'\\n                                          }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n              </div>\\n            </div>\\n            <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">User Role</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.user_role_label }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                              'border-radius': '5px',\\n                                              'margin-bottom': '0px',\\n                                              'height': '20px',\\n                                              'width': '50%'\\n                                          }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">User ID</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.staff_id }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                              'border-radius': '5px',\\n                                              'margin-bottom': '0px',\\n                                              'height': '20px',\\n                                              'width': '50%'\\n                                          }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Mobile Number</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">+63{{ user_profile.contact_number }}</h1>\\n                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                              'border-radius': '5px',\\n                                              'margin-bottom': '0px',\\n                                              'height': '20px',\\n                                              'width': '50%'\\n                                          }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\" *ngIf=\\\"user_profile.user_role_id == 4 || user_profile.user_role_id == 5\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Email</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.email }}</h1>\\n                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                              'border-radius': '5px',\\n                                              'margin-bottom': '0px',\\n                                              'height': '20px',\\n                                              'width': '50%'\\n                                          }\\\"></ngx-skeleton-loader>\\n              </div>\\n            </div>\\n            <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Address</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.profile_location }}</h1>\\n                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                            'border-radius': '5px',\\n                                            'margin-bottom': '0px',\\n                                            'height': '20px',\\n                                            'width': '50%'\\n                                        }\\\"></ngx-skeleton-loader>\\n              </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Username</p>\\n                  <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.username }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                                'border-radius': '5px',\\n                                                                'margin-bottom': '0px',\\n                                                                'height': '20px',\\n                                                                'width': '50%'\\n                                                            }\\\"></ngx-skeleton-loader>\\n                </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Password</p>\\n                <div class=\\\"row\\\">\\n                  <input type=\\\"{{ show_password ? 'text' : 'password' }}\\\" value=\\\"{{ user_profile.real_password }}\\\" class=\\\"mb-10 ml-15 field-pasword\\\" readonly placeholder=\\\"\\\"/>\\n                  <button type=\\\"button\\\" class=\\\"btn btn-clear p-absolute t-2 r-0 mt-15\\\" (click)=\\\"showPassword()\\\">\\n                    <i [ngClass]=\\\"{ 'icon-eye-close' : !show_password, 'icon-eye-open' : show_password }\\\"></i>\\n                  </button>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Date Added</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.created_at | date : 'MM/dd/yyyy' }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                            'border-radius': '5px',\\n                                            'margin-bottom': '0px',\\n                                            'height': '20px',\\n                                            'width': '50%'\\n                                        }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Last Login</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.last_login ? (user_profile.last_login | date : 'MM/dd/yyyy, hh:mm aaa') : 'Not yet logged in' }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                            'border-radius': '5px',\\n                                            'margin-bottom': '0px',\\n                                            'height': '20px',\\n                                            'width': '50%'\\n                                        }\\\"></ngx-skeleton-loader>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-12\\\">\\n      <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n        <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Actions</h1>\\n        <p class=\\\"fs-14 action-note\\\">Here are the actions you can apply for this order details.</p>\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary mt-30 btn-block\\\" mat-flat-button [routerLink]=\\\"['/staffs/update', user_profile.id]\\\">\\n          <div class=\\\"cus-layer ml-auto mr-auto\\\">\\n            <i class=\\\"icon-edit\\\"></i>\\n            <span class=\\\"ml-8 fs-14\\\">Edit Profile</span>\\n          </div>\\n        </button>\\n      </div>\\n      <br>\\n                    <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n                      <ng-container *ngIf=\\\"user_logged_in.id == user_profile.id\\\">\\n                        <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Note</h1>\\n                        <p class=\\\"fs-14 action-note\\\">Deleting your own account is prohibited.</p>\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary mt-30 btn-block\\\" disabled>\\n                          <span class=\\\"fs-14\\\">Yes, I understand - delete user</span>\\n                        </button>\\n                      </ng-container>\\n                      <ng-container *ngIf=\\\"user_logged_in.id != user_profile.id\\\">\\n                        <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Delete User?</h1>\\n                        <p class=\\\"fs-14 action-note\\\">Deleting a user removes all the data on this dashboard.</p>\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-danger mt-30 btn-block\\\"\\n                          (click)=\\\"openModal(user_profile, 'user_delete')\\\">\\n                          <span class=\\\"fs-14\\\">Yes, I understand - delete user</span>\\n                        </button>\\n                      </ng-container>\\n                    </div>\\n    </div>\\n<!--             <div class=\\\"col-xl-3 col-lg-5 col-md-5 col-sm-12 col-12\\\">\\n              <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n                <ng-container *ngIf=\\\"user_logged_in.id == user_info.id\\\">\\n                  <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Note</h1>\\n                  <p class=\\\"fs-14 action-note\\\">Deleting your own account is prohibited.</p>\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary mt-30 btn-block\\\" disabled>\\n                    <span class=\\\"fs-14\\\">Yes, I understand - delete user</span>\\n                  </button>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"user_logged_in.id != user_info.id\\\">\\n                  <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Delete User?</h1>\\n                  <p class=\\\"fs-14 action-note\\\">Deleting a user removes all the data on this dashboard.</p>\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-danger mt-30 btn-block\\\"\\n                    (click)=\\\"openModal(userForm.value, 'user_delete')\\\">\\n                    <span class=\\\"fs-14\\\">Yes, I understand - delete user</span>\\n                  </button>\\n                </ng-container>\\n              </div>\\n            </div> -->\\n  </div>\\n</section>\\n\\n<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-6 col-lg-6 col-md-8 col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">Activity Log</h1>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n<!--       <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Created - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Created' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div> -->\\n<!--       <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n            Clear Filters\\n          </button>\\n        </div>\\n      </div> -->\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n<!--       <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group\\\">\\n            <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n              <mat-select-trigger>Column Visibility</mat-select-trigger>\\n              <mat-option *ngFor=\\\"let item of ths; let i = index\\\" [value]=\\\"i\\\">{{ item.label }}</mat-option>\\n            </mat-select>\\n          </div>\\n        </div>\\n      </div> -->\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\"\\n            [(ngModel)]=\\\"created_at\\\">\\n          <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\"\\n            (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Created - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Created' }}\\n            <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n          </button>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"code\\\"\\n            (selectionChange)=\\\"changeCode($event)\\\" placeholder=\\\"Staff Activity\\\">\\n            <mat-option *ngFor=\\\"let code_option of code_options\\\" [value]=\\\"code_option.value\\\">{{ code_option.label }}</mat-option>\\n          </mat-select>\\n        </div>\\n      </div>\\n<!--       <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div> -->\\n<!--       <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button>\\n        </div>\\n      </div> -->\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n            Clear Filters\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table>\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td *ngIf=\\\"ths[0].isVisible\\\" [innerHTML]=\\\"item.action\\\"></td>\\n                <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.created_at }}</td>\\n<!--                 <td *ngIf=\\\"ths[2].isVisible\\\">\\n                  <mat-chip-list>\\n                    <mat-chip>{{ item.recordStatus }}</mat-chip>\\n                  </mat-chip-list>\\n                </td>\\n                <td *ngIf=\\\"ths[3].isVisible\\\">{{ item.bird_count | number }}</td>\\n                <td *ngIf=\\\"ths[4].isVisible\\\">{{ item.real_egg_count | number }}</td>\\n                <td *ngIf=\\\"ths[5].isVisible\\\">\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" [routerLink]=\\\"[ '/transactions/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td> -->\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n            <a (click)=\\\"gotoPage(prev_page)\\\">\\n              Previous\\n            </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n            <a (click)=\\\"gotoPage(next_page)\\\">\\n              Next\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"\"","export default \"<p>report-footer works!</p>\\n\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-25\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Welcome to your dashboard, General Manager!</h1>\\n            <p class=\\\"sub-heading\\\">These are the things that needs your attention.</p>\\n        </div>\\n        <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div> -->\\n    </div>\\n    <div class=\\\"row mb-30\\\" *ngIf=\\\"type == 0\\\">\\n        <div class=\\\"col-6 d-flex align-items-center\\\">\\n            <p class=\\\"sub-heading fw-500 m-0\\\">Today, {{ dateToday | date: 'MMMM dd, yyyy' }}</p>\\n            <div class=\\\"divider mr-15 ml-15 h-26\\\"></div>\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"changeType()\\\">\\n                <i class=\\\"icon-eye-primary\\\"></i>\\n                <span class=\\\"ml-10\\\">View numbers by this year up to date</span>\\n            </button>\\n        </div>\\n        <div class=\\\"col-6 d-flex align-items-center\\\">\\n            <p class=\\\"sub-heading mb-0 ml-auto italic\\\">(last updated a minute ago)</p>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-30\\\" *ngIf=\\\"type == 1\\\">\\n        <div class=\\\"col-6 d-flex align-items-center\\\"><button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"changeType()\\\">\\n            <i class=\\\"icon-eye-primary\\\"></i>\\n            <span class=\\\"ml-10\\\">View numbers by today</span>\\n        </button>\\n        <div class=\\\"divider mr-15 ml-15 h-26\\\"></div>\\n        <p class=\\\"sub-heading fw-500 m-0\\\">January 1 - {{ dateToday | date: 'MMMM dd, yyyy' }}</p>\\n        </div>\\n        <div class=\\\"col-6 d-flex align-items-center\\\">\\n            <p class=\\\"sub-heading mb-0 ml-auto italic\\\">(last updated a minute ago)</p>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Daily Reports For Approval</p>\\n                <h1 class=\\\"heading mb-0\\\">{{ dashboard_data ? (dashboard_data.daily_reports_for_approval | number) : 0 }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Sorted Reports For Approval</p>\\n                <h1 class=\\\"heading mb-0\\\">{{ dashboard_data ? (dashboard_data.sorted_reports_for_approval | number) : 0 }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Total Eggs Harvested</p>\\n                <h1 class=\\\"heading mb-0\\\">{{ dashboard_data ? (dashboard_data.total_eggs_harvested | number) : 0 }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Production Rate</p>\\n                <h1 class=\\\"heading mb-0\\\">{{ dashboard_data ? (dashboard_data.production_rate | number : '1.2-2') : 0 }} %</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Orders For Approval</p>\\n                <h1 class=\\\"heading mb-0\\\">{{ dashboard_data ? (dashboard_data.collectible_orders_for_approval | number) : 0 }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Collectible Amount</p>\\n                <h1 class=\\\"heading mb-0\\\">₱ {{ dashboard_data ? (dashboard_data.collectibles_amount | number : '1.2-2') : 0 }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Fully Paid Amount</p>\\n                <h1 class=\\\"heading mb-0\\\">₱ {{ dashboard_data ? (dashboard_data.fully_paid_orders | number : '1.2-2') : 0 }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-3 mb-30\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p class=\\\"mini-heading mb-10 fs-14\\\">Total Revenue</p>\\n                <h1 class=\\\"heading mb-0\\\">₱ {{ dashboard_data ? (dashboard_data.total_revenue | number : '1.2-2') : 0 }}</h1>\\n            </div>\\n        </div>\\n    </div>\\n    <ngx-masonry class=\\\"masonry-item mt-15\\\" [options]=\\\"{ transitionDuration: '0.8s', gutter: 30 }\\\">\\n        <div class=\\\"sect-layer pb-30\\\" *ngFor=\\\"let item of masonryItems; let i = index\\\">\\n            <div ngxMasonryItem class=\\\"body-card p-20\\\">\\n                <!-- Feed Consumption -->\\n                <ng-container *ngIf=\\\"item.key == 'feed_consumption'\\\">\\n                    <div class=\\\"flex-align-center mb-10\\\">\\n                        <p class=\\\"mini-heading mb-0 fs-16\\\">{{item.title}}</p>\\n                        <button *ngIf=\\\"item.url\\\" type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm ml-auto\\\" [routerLink]=\\\"[item.url]\\\">\\n                            <span class=\\\"mr-15\\\">View more</span>\\n                            <i class=icon-proceed></i>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"row\\\" *ngIf=\\\"feed_consumption_data && feed_consumption_data.length > 0\\\">\\n                        <div class=\\\"col-12\\\">\\n                            <canvas baseChart\\n                                [datasets]=\\\"barChartData\\\"\\n                                [labels]=\\\"barChartLabels\\\"\\n                                [options]=\\\"barChartOptions\\\"\\n                                [plugins]=\\\"barChartPlugins\\\"\\n                                [legend]=\\\"barChartLegend\\\"\\n                                [chartType]=\\\"barChartType\\\">\\n                            </canvas>\\n                        </div>\\n                    </div>\\n                </ng-container>\\n                <!-- Feed Consumption -->\\n                <!-- Medicine Consumption -->\\n                <ng-container *ngIf=\\\"item.key == 'medicine_consumption'\\\">\\n                    <div class=\\\"flex-align-center mb-10\\\">\\n                        <p class=\\\"mini-heading mb-0 fs-16\\\">{{item.title}}</p>\\n                        <button *ngIf=\\\"item.url\\\" type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm ml-auto\\\" [routerLink]=\\\"[item.url]\\\">\\n                            <span class=\\\"mr-15\\\">View more</span>\\n                            <i class=icon-proceed></i>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-title\\\">\\n                        <div class=\\\"col-4\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Medicine Name</p>\\n                        </div>\\n                        <div class=\\\"col-4\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Unit</p>\\n                        </div>\\n                        <div class=\\\"col-4\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Consumed Value</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-cont\\\">\\n                        <ng-container *ngIf=\\\"medicine_consumption_data\\\">\\n                            <ng-container *ngFor=\\\"let item of medicine_consumption_data; let i = index\\\">\\n                                <div class=\\\"col-4\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.medicine }}</p>\\n                                </div>\\n                                <div class=\\\"col-4\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.unit.unit }}</p>\\n                                </div>\\n                                <div class=\\\"col-4\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.consumed_medicine | number }}</p>\\n                                </div>\\n                            </ng-container>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!medicine_consumption_data\\\">\\n                            <div class=\\\"col-12 text-center\\\">\\n                                <p class=\\\"sub-heading\\\">No record found</p>\\n                            </div>\\n                        </ng-container>\\n                    </div>\\n                </ng-container>\\n                <!-- Medicine Consumption -->\\n                <!-- Harvest Production Status -->\\n                <ng-container *ngIf=\\\"item.key == 'harvest_production_status'\\\">\\n                    <div class=\\\"flex-align-center mb-10\\\">\\n                        <p class=\\\"mini-heading mb-0 fs-16\\\">{{item.title}}</p>\\n                        <button *ngIf=\\\"item.url\\\" type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm ml-auto\\\" [routerLink]=\\\"[item.url]\\\">\\n                            <span class=\\\"mr-15\\\">View more</span>\\n                            <i class=icon-proceed></i>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-title\\\">\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Flockman Name</p>\\n                        </div>\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Total Egg Prod</p>\\n                        </div>\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Prod Rate</p>\\n                        </div>\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Action</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-cont\\\">\\n                        <ng-container *ngIf=\\\"harvest_production_status_data\\\">\\n                            <ng-container *ngFor=\\\"let item of harvest_production_status_data; let i = index\\\">\\n                                <div class=\\\"col-3\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.first_name }} {{ item.last_name }}</p>\\n                                </div>\\n                                <div class=\\\"col-3\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.total_egg_production ? (item.total_egg_production) : 0 }}</p>\\n                                </div>\\n                                <div class=\\\"col-3\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.production_rate ? (item.production_rate | number : '1.2-2') : 0 }} %</p>\\n                                </div>\\n                                <div class=\\\"col-3\\\">\\n                                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm btn-block pl-0\\\">\\n                                        <i class=\\\"icon-eye\\\"></i>\\n                                        View Report\\n                                    </button>\\n                                </div>\\n                            </ng-container>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!harvest_production_status_data\\\">\\n                            <div class=\\\"col-12 text-center\\\">\\n                                <p class=\\\"sub-heading\\\">No record found</p>\\n                            </div>\\n                        </ng-container>\\n                    </div>\\n                </ng-container>\\n                <!-- Harvest Production Status -->\\n                <!-- Harvest Production Rate per houses -->\\n                <ng-container *ngIf=\\\"item.key == 'harvest_production_rate'\\\">\\n                    <div class=\\\"flex-align-center mb-10\\\">\\n                        <p class=\\\"mini-heading mb-0 fs-16\\\">{{item.title}}</p>\\n                        <button *ngIf=\\\"item.url\\\" type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm ml-auto\\\" [routerLink]=\\\"[item.url]\\\">\\n                            <span class=\\\"mr-15\\\">View more</span>\\n                            <i class=icon-proceed></i>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"row\\\" *ngIf=\\\"harvest_rate_data && harvest_rate_data.length > 0\\\">\\n                        <div class=\\\"col-12\\\">\\n                            <canvas baseChart\\n                                [data]=\\\"pieChartData\\\"\\n                                [labels]=\\\"pieChartLabels\\\"\\n                                [chartType]=\\\"pieChartType\\\"\\n                                [options]=\\\"pieChartOptions\\\"\\n                                [plugins]=\\\"pieChartPlugins\\\"\\n                                [legend]=\\\"pieChartLegend\\\">\\n                            </canvas>\\n                        </div>\\n                    </div>\\n                </ng-container>\\n                <!-- Harvest Production Rate per houses -->\\n                <!-- Recent Transactions -->\\n                <ng-container *ngIf=\\\"item.key == 'recent_transactions'\\\">\\n                    <div class=\\\"flex-align-center mb-10\\\">\\n                        <p class=\\\"mini-heading mb-0 fs-16\\\">{{item.title}}</p>\\n                        <button *ngIf=\\\"item.url\\\" type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm ml-auto\\\" [routerLink]=\\\"[item.url]\\\">\\n                            <span class=\\\"mr-15\\\">View more</span>\\n                            <i class=icon-proceed></i>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-title\\\">\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Order no.</p>\\n                        </div>\\n                        <div class=\\\"col-4\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Customer Name</p>\\n                        </div>\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Status</p>\\n                        </div>\\n                        <div class=\\\"col-2\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Date</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-cont scrollable h-300\\\">\\n                        <ng-container *ngIf=\\\"recent_transactions_data\\\">\\n                            <ng-container *ngFor=\\\"let item of recent_transactions_data; let i = index\\\">\\n                                <div class=\\\"col-3\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.transaction_id }}</p>\\n                                </div>\\n                                <div class=\\\"col-4\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.customer_name }}</p>\\n                                </div>\\n                                <div class=\\\"col-3\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.status }}</p>\\n                                </div>\\n                                <div class=\\\"col-2\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.created_at | date : 'LLL dd' }}</p>\\n                                </div>\\n                            </ng-container>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!recent_transactions_data\\\">\\n                            <div class=\\\"col-12 text-center\\\">\\n                                <p class=\\\"sub-heading\\\">No record found</p>\\n                            </div>\\n                        </ng-container>\\n                    </div>\\n                </ng-container>\\n                <!-- Recent Transactions -->\\n                <!-- Recent Staff Activities -->\\n                <ng-container *ngIf=\\\"item.key == 'recent_staff_activities'\\\">\\n                    <div class=\\\"flex-align-center mb-10\\\">\\n                        <p class=\\\"mini-heading mb-0 fs-16\\\">{{item.title}}</p>\\n                        <button *ngIf=\\\"item.url\\\" type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm ml-auto\\\" [routerLink]=\\\"[item.url]\\\">\\n                            <span class=\\\"mr-15\\\">View more</span>\\n                            <i class=icon-proceed></i>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-title\\\">\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Name</p>\\n                        </div>\\n                        <div class=\\\"col-6\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Activity</p>\\n                        </div>\\n                        <div class=\\\"col-3\\\">\\n                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Date</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row pl-10 pr-10 meds-cont scrollable h-300\\\">\\n                        <ng-container *ngIf=\\\"staff_activities_data\\\">\\n                            <ng-container *ngFor=\\\"let item of staff_activities_data; let i = index\\\">\\n<!--                                 <div class=\\\"col-12\\\">\\n                                    <p class=\\\"mini-heading mb-14 mt-14 fs-16 font-weight-normal\\\">{{ i }}</p>\\n                                </div> -->\\n                                <div class=\\\"col-3\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.name }}</p>\\n                                </div>\\n                                <div class=\\\"col-6\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\" [innerHTML]=\\\"item.action\\\"></p>\\n                                </div>\\n                                <div class=\\\"col-3\\\">\\n                                    <p class=\\\"mini-heading mb-10 mt-10 fs-16 font-weight-normal\\\">{{ item.created_at | date: 'medium' }}</p>\\n                                </div>\\n                            </ng-container>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!staff_activities_data\\\">\\n                            <div class=\\\"col-12 text-center\\\">\\n                                <p class=\\\"sub-heading\\\">No record found</p>\\n                            </div>\\n                        </ng-container>\\n                    </div>\\n                </ng-container>\\n                <!-- Recent Staff Activities -->\\n            </div>\\n        </div>\\n    </ngx-masonry>\\n</section>\\n\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-20\\\">\\n        <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n            <h1 class=\\\"heading\\\">View Daily Report</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-12 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-8\\\">\\n            <mat-tab-group [(selectedIndex)]=\\\"selectedIndex\\\" (selectedIndexChange)=\\\"tabChanged($event)\\\">\\n                <mat-tab label=\\\"Harvest Report\\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <!-- <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Report Status</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.recordStatus }}</td>\\n                                        </tr> -->\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Harvested by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.name }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">House/Building no.</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.house ? item.house.house_name : '' }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Report Date</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.prepared_by_date | date: 'MM/dd/yyyy' }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Report Time</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.prepared_by_date | date: 'hh:mm aaa' }}</td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Basic Details</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Bird Count</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.bird_count | number }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Age</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.age }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Mortality</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.mortality | number }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Cull</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.cull | number }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">End Bird Population</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.bird_count | number }}</td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Feeds and Medicine Consumption Details</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">No. of Sacks</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.feeds ? (item.feeds.bags | number) : 0 }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Feed Consumption</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.feeds ? item.feeds.string : '' }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Medicine intake</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngFor=\\\"let medicine of item.medicine; let i = index\\\">\\n                                                    {{ medicine.medicine }} {{ i < item.medicine.length - 1 ? ', ' : '' }}\\n                                                </ng-container>\\n                                            </td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Counted Egg Details</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Egg Count</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.egg_count | number }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Validated Egg Count</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.real_egg_count | number }}</td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Report Signatory</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Prepared by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.prepared_by_name }} ({{ item.prepared_by_role }})</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Signature</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <img [src]=\\\"item.prepared_by_path\\\" class=\\\"img-responsive\\\">\\n                                            </td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\" *ngIf=\\\"item.checked_by\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Checked by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.checked_by_name }} ({{ item.checked_by_role }})</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Signature</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <img [src]=\\\"item.checked_by_path\\\" class=\\\"img-responsive\\\">\\n                                            </td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\" *ngIf=\\\"item.received_by\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Received by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.received_by_name }} ({{ item.received_by_role }})</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Signature</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <img [src]=\\\"item.received_by_path\\\" class=\\\"img-responsive\\\">\\n                                            </td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </mat-tab>\\n                <mat-tab label=\\\"Sorted Report\\\" *ngIf=\\\"item && item.isSorted == 1\\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <!-- <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Report Status</td>\\n                                            <td class=\\\"w-70-per\\\">{{ item.recordStatus }}</td>\\n                                        </tr> -->\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Sorted by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ sorting_item.prepared_by_name }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">House/Building no.</td>\\n                                            <td class=\\\"w-70-per\\\">{{ sorting_item.house ? sorting_item.house.house_name : '' }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Report Date</td>\\n                                            <td class=\\\"w-70-per\\\">{{ sorting_item.prepared_by_date | date: 'MM/dd/yyyy' }}</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Report Time</td>\\n                                            <td class=\\\"w-70-per\\\">{{ sorting_item.prepared_by_date | date: 'hh:mm aaa' }}</td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Sorted Egg Details</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr *ngFor=\\\"let egg of sorting_item.eggs; let i = index\\\">\\n                                            <td class=\\\"w-30-per alt\\\">{{ egg.egg_type.type }}</td>\\n                                            <td class=\\\"w-70-per\\\">{{ egg.egg_count | number }}</td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Report Signatory</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Prepared by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ sorting_item.prepared_by_name }} ({{ sorting_item.prepared_by_role }})</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Signature</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <img [src]=\\\"sorting_item.prepared_by_path\\\" class=\\\"img-responsive\\\">\\n                                            </td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\" *ngIf=\\\"sorting_item.checked_by\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Checked by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ sorting_item.checked_by_name }} ({{ sorting_item.checked_by_role }})</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Signature</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <img [src]=\\\"sorting_item.checked_by_path\\\" class=\\\"img-responsive\\\">\\n                                            </td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\" *ngIf=\\\"sorting_item.received_by\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                      <tbody>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Received by</td>\\n                                            <td class=\\\"w-70-per\\\">{{ sorting_item.received_by_name }} ({{ sorting_item.received_by_role }})</td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Signature</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <img [src]=\\\"sorting_item.received_by_path\\\" class=\\\"img-responsive\\\">\\n                                            </td>\\n                                        </tr>\\n                                      </tbody>\\n                                  </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </mat-tab>\\n            </mat-tab-group>\\n            \\n        </div>\\n        <div class=\\\"col-4\\\">\\n            <div class=\\\"body-card pt-18 pl-24 pr-24 pb-38\\\">\\n                <h1 class=\\\"mini-heading fs-16 fw-500 mb-20\\\">Actions</h1>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block mb-12\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                  <span class=\\\"ml-15\\\">Download as PDF</span>\\n                </button>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n                  <span class=\\\"ml-15\\\">Download as CSV</span>\\n                </button>\\n            </div>\\n            <div class=\\\"body-card pt-29 pl-26 pr-26 pb-58 mt-38\\\">\\n                <h1 class=\\\"mini-heading fs-16 fw-500 mb-20\\\">Report Tracking Status</h1>\\n                <div class=\\\"tracking-sect\\\">\\n                    <ngx-skeleton-loader *ngIf=\\\"!item\\\" [theme]=\\\"{\\n                        'border-radius': '5px',\\n                        'margin-bottom': '0px',\\n                        'height': '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                    <div class=\\\"timeline-sect\\\" *ngIf=\\\"item\\\">\\n                        <ng-container *ngFor=\\\"let tl of item.tracking_status; let i = index\\\">\\n                            <div class=\\\"tl-row row\\\">\\n                                <div class=\\\"col-3 pr-0\\\">\\n                                    <div class=\\\"timeline tl-date no-padding-left no-padding-right\\\">\\n                                        {{ tl.date | date:'MMM dd, yyyy' }}<br>\\n                                        {{ tl.date | date:'h:mm aaa' }}\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-2\\\">\\n                                    <div class=\\\"timeline\\\">\\n                                        <div class=\\\"timeline-progress\\\" [ngClass]=\\\"{'finish': tl.status == 2}\\\"></div>\\n                                        <div class=\\\"timeline-circle\\\" [ngClass]=\\\"[tl.status == 2 ? 'finish':'', tl.status == 1 ? 'pending':'']\\\">\\n                                            <img class=\\\"tl-check\\\" *ngIf=\\\"tl.status == 2\\\" src=\\\"./../../../../../assets/images/custom-check.png\\\">\\n                                            <div class=\\\"tl-pending\\\" *ngIf=\\\"tl.status == 1\\\"></div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-7 pl-0\\\">\\n                                    <div class=\\\"timeline tl-cont no-padding-left\\\">\\n                                        <p class=\\\"mb-0 mt-3\\\">{{ tl.message }}</p>\\n                                        <!-- <p no-margin class=\\\"tl-note\\\" *ngIf=\\\"tl.note\\\">{{ tl.note }}</p> -->\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </ng-container>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\"","export default \".alt {\\n  background: rgba(229, 229, 229, 0.4) !important;\\n}\\n\\n.order-timer {\\n  background: #DDE1E5;\\n  border-radius: 5px;\\n  margin-top: -15px;\\n  margin-bottom: 22px;\\n  overflow: hidden;\\n}\\n\\n.order-timer .note {\\n  display: inline-block;\\n  /* font-size: $font17; */\\n  line-height: 25px;\\n  letter-spacing: -0.0241176em;\\n  color: #494A4B;\\n  padding: 13px;\\n}\\n\\n.order-timer .note img {\\n  margin-right: 13px;\\n  width: 28px;\\n  height: 28px;\\n  /* font-size: $font49; */\\n}\\n\\n.order-timer .countdown .measurements {\\n  text-align: center;\\n  margin: 0 5px;\\n}\\n\\n.order-timer .countdown .measurements:first-child {\\n  margin-left: 0;\\n}\\n\\n.order-timer .countdown .measurements:last-child {\\n  margin-right: 0;\\n}\\n\\n.order-timer .countdown .measurements .measurements-number {\\n  font-size: 24px;\\n  line-height: 1;\\n}\\n\\n.order-timer .countdown .measurements .measurements-text {\\n  font-size: 10px;\\n  line-height: 1;\\n}\\n\\n.order-timer .timer {\\n  background: #72787F;\\n  border-radius: 0px 0px 5px 5px;\\n  padding: 7px 13px;\\n  display: inline-block;\\n  color: #FFF;\\n}\\n\\n.order-timer .timer p {\\n  margin: 0;\\n}\\n\\n.order-timer .timer img {\\n  margin-left: 40px;\\n  margin-right: 2px;\\n  width: 25px;\\n  height: 25px;\\n}\\n\\n.order-timer .timer .measurements {\\n  min-width: 25px;\\n  position: relative;\\n}\\n\\n.order-timer .timer .measurements p {\\n  margin-bottom: 0;\\n}\\n\\n.order-timer .timer .measurements .measurements-number {\\n  font-weight: bold;\\n  font-size: 20px;\\n  line-height: 23px;\\n  letter-spacing: 0.02em;\\n}\\n\\n.order-timer .timer .measurements .measurements-text {\\n  font-size: 10px;\\n  line-height: 14px;\\n}\\n\\n.order-timer .timer .measurements .divider {\\n  /* margin-top: -24px;\\n  margin-right: -7px; */\\n  position: absolute;\\n  top: -2px;\\n  right: -7px;\\n  font-weight: bold;\\n  font-size: 20px;\\n}\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <form [formGroup]=\\\"orderForm\\\" (ngSubmit)=\\\"submit()\\\">\\n        <div class=\\\"row mb-15\\\">\\n            <div class=\\\"col-xl-auto offset-xl-1\\\">\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack('go_back', 'transaction_create')\\\">\\n                    <i class=\\\"icon-back\\\"></i>\\n                    <span class=\\\"ml-15\\\">Go back to list</span>\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-35\\\">\\n            <div class=\\\"col-xl-auto offset-xl-1\\\">\\n                <h1 class=\\\"heading\\\">Add new order</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-35\\\">\\n            <div class=\\\"col-4 offset-4\\\">\\n                <img src=\\\"./../../../../../assets/images/others/order-step-1.svg\\\" class=\\\"img-responsive\\\"/>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-10 offset-xl-1\\\">\\n                <div class=\\\"container-card view-record\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"p-30 ml-20\\\">\\n                            <h1 class=\\\"heading\\\">Basic Info.</h1>\\n                        </div>\\n                        <div class=\\\"p-30 ml-auto mr-10\\\">\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n                                Clear Fields\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Customer Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"customer_name\\\" [matAutocomplete]=\\\"auto\\\" (input)=\\\"getCustomerList()\\\"/>\\n                                    <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"customerSelected($event)\\\">\\n                                        <mat-option *ngFor=\\\"let customer of customer_options\\\" [value]=\\\"customer.id\\\">\\n                                            <small>{{ customer.profile_first_name }} {{ customer.profile_last_name }}</small>\\n                                        </mat-option>\\n                                    </mat-autocomplete>\\n                                    <ng-container *ngIf=\\\"orderForm.controls.customer_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"orderForm.controls.customer_name.hasError('required')\\\">Customer name is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.customer_name.hasError('maxlength')\\\">Name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Mobile Phone <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">+63</span>\\n                                        </div>\\n                                        <input type=\\\"tel\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"number\\\" placeholder=\\\"xxx xxx xxxx\\\" maxlength=\\\"10\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"orderForm.controls.number.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.number.hasError('required')\\\">\\n                                            Mobile phone is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.number.hasError('pattern')\\\">\\n                                            Mobile phone is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.number.hasError('maxlength')\\\">\\n                                            Mobile phone must not exceed 10 digits</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.number.hasError('minlength')\\\">\\n                                            Mobile phone must be atleast 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-12 col-lg-12 col-md-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Home Address <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"location\\\" />\\n                                    <ng-container *ngIf=\\\"orderForm.controls.location.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.location.hasError('required')\\\">\\n                                            Home Address is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.location.hasError('maxlength')\\\">\\n                                            Address should not exceed 250 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <!-- <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Mode of Payment <span class=\\\"required\\\">*</span></label>\\n                                    <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" formControlName=\\\"mode_of_payment\\\" placeholder=\\\"Mode of Payment\\\">\\n                                        <mat-option *ngFor=\\\"let item of mode_of_payment_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n                                    </mat-select>\\n                                    <ng-container *ngIf=\\\"orderForm.controls.mode_of_payment.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.mode_of_payment.hasError('required')\\\">\\n                                            Mode of payment is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div> -->\\n                            <div class=\\\"col-xl-12 col-lg-12 col-md-12\\\">\\n                                <label class=\\\"text-secondary\\\">Other special requests or message</label>\\n                                <textarea class=\\\"form-control mb-10\\\" rows=\\\"3\\\" maxlength=\\\"250\\\" formControlName=\\\"request\\\"></textarea>\\n                                <ng-container *ngIf=\\\"orderForm.controls.request.touched\\\">\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.request.hasError('maxlength')\\\">Request or message should not exceed 250 characters</p>\\n                                </ng-container>\\n                                <p class=\\\"text-right text-secondary\\\">{{ orderForm.controls.request.value.length }}/250</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-10 offset-xl-1\\\">\\n                <div class=\\\"container-card view-record\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading\\\">Add your items</h1>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-12\\\">\\n                            <div class=\\\"data-table p-relative table-listing ml-30 mr-30\\\" style=\\\"overflow: auto;\\\">\\n                                <table class=\\\"border-0\\\">\\n                                    <thead>\\n                                        <tr>\\n                                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                                    {{ th.label }}\\n                                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                                    </ng-container>\\n                                                </th>\\n                                            </ng-container>\\n                                        </tr>\\n                                    </thead>\\n                                    <tbody class=\\\"pl-30 pr-30\\\" *ngIf=\\\"cart.length > 0\\\">\\n                                        <ng-container *ngFor=\\\"let item of cart; let i = index\\\">\\n                                            <tr>\\n                                                <td class=\\\"w-20-per border-0\\\">\\n                                                    <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" placeholder=\\\"Select Egg Size\\\" [value]=\\\"item.id\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\">\\n                                                        <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                                                    </mat-select>\\n                                                </td>\\n                                                <td class=\\\"w-15-per border-0\\\">\\n                                                    ₱ {{ item.price ? (item.price | number : '1.2-2') : 0 }}\\n                                                </td>\\n                                                <td class=\\\"w-20-per border-0\\\">\\n                                                    <div class=\\\"form-group\\\" *ngFor=\\\"let cart_type of item.items; let t = index\\\">\\n                                                        <label class=\\\"text-secondary\\\">per {{ cart_type.type_id == 1 ? 'case: 360 pcs' : cart_type.type_id == 2 ? 'tray: 30 pcs' : 'piece'}}</label>\\n                                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"1\\\" placeholder=\\\"0\\\" (input)=\\\"changeQty($event, i, t)\\\" [disabled]=\\\"!item.id\\\" [value]=\\\"cart_type.qty > 0 ? cart_type.qty : ''\\\"/>\\n                                                    </div>\\n                                                </td>\\n                                                <td class=\\\"w-15-per border-0\\\">\\n                                                    {{ item.total_qty | number }} pcs\\n                                                </td>\\n                                                <td class=\\\"w-25-per border-0\\\">\\n                                                    ₱ {{ item.total_price | number : '1.2-2' }}\\n                                                </td>\\n                                                <td class=\\\"w-5-per border-0\\\">\\n                                                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"removeItemInCart(i)\\\" *ngIf=\\\"cart.length > 1\\\">\\n                                                        <i class=\\\"icon-cart-remove\\\"></i>\\n                                                    </button>\\n                                                </td>\\n                                            </tr>\\n                                        </ng-container>\\n                                    </tbody>\\n                                    <tbody class=\\\"pl-30 pr-30\\\">\\n                                        <tr class=\\\"border-0\\\">\\n                                            <td>\\n                                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"addItemToCart()\\\">\\n                                                    <i class=\\\"icon-add-round fs-28\\\"></i>\\n                                                    <span class=\\\"ml-15\\\">Add new item</span>\\n                                                </button>\\n                                            </td>\\n                                        </tr>\\n                                    </tbody>\\n                                </table>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\"\\n                                    (click)=\\\"goBack('form_cancel', 'transaction_create')\\\">\\n                                    Cancel\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" [disabled]=\\\"!orderForm.valid || !canProceed\\\">\\n                                    Next Step\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </form>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">{{ order_status_label }}</h1>\\n      <p class=\\\"sub-heading mb-8\\\">Total number of transactions: <strong>{{ totalItems | number }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n            'border-radius' : '5px',\\n            'margin-bottom' : '10px',\\n            'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n      <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/transactions/create\\\">\\n        <i class=\\\"icon-add\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new transaction</span>\\n      </button>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Ordered - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Ordered' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"payment_status\\\" (selectionChange)=\\\"changePaymentStatus($event)\\\" placeholder=\\\"Payment Status\\\">\\n                <mat-option *ngFor=\\\"let item of payment_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n            Clear Filters\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group\\\">\\n            <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n              <mat-select-trigger>Column Visibility</mat-select-trigger>\\n              <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n              </ng-container>\\n            </mat-select>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.transaction_id }}</td>\\n                <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.created_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.customer_name }}</td>\\n                <td *ngIf=\\\"ths[3].isVisible\\\">\\n                  <mat-chip-list>\\n                    <mat-chip *ngIf=\\\"item.order_status == 1\\\" color=\\\"primary\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 2\\\" color=\\\"secondary\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 3\\\" color=\\\"warning\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 4\\\" color=\\\"success\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 7 || item.order_status == 8\\\" color=\\\"danger\\\">{{ item.status }}</mat-chip>\\n                  </mat-chip-list>\\n                </td>\\n                <td *ngIf=\\\"ths[4].isVisible\\\">\\n                  <ng-container *ngFor=\\\"let egg of item.order_items; let i = index\\\">\\n                    {{ egg.egg_type.type }} {{ i < item.order_items.length -1 ? ', ':'' }}\\n                  </ng-container>\\n                </td>\\n                <td *ngIf=\\\"ths[5].isVisible\\\">{{ item.total_pieces | number }}</td>\\n                <td *ngIf=\\\"ths[6].isVisible\\\">₱ {{ item.total_price | number : '1.2-2' }}</td>\\n                <td *ngIf=\\\"ths[7].isVisible\\\">{{ item.payment_type }}</td>\\n                <td *ngIf=\\\"ths[8].isVisible\\\">\\n                  <mat-chip-list>\\n                    <mat-chip *ngIf=\\\"item.payment_status == 0\\\" color=\\\"secondary\\\">{{ item.payment_status_label }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.payment_status == 1\\\" color=\\\"success\\\">{{ item.payment_status_label }}</mat-chip>\\n                  </mat-chip-list>\\n                </td>\\n                <td *ngIf=\\\"ths[9].isVisible\\\">\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/transactions/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n            <a (click)=\\\"gotoPage(prev_page)\\\">\\n              Previous\\n            </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n            <a (click)=\\\"gotoPage(next_page)\\\">\\n              Next\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"\"","export default \"\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h5 class=\\\"mb-30\\\">Sacks Inventory/Stocks</h5>\\n            </div>\\n        </div>\\n        <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        \\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table>\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible && th.canToggle\\\" class=\\\"p-10 fs-12\\\">\\n                                    {{ th.label }}\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                            <tr *ngFor=\\\"let item of items; let i = index\\\" [ngClass]=\\\"{'break-now' : (i + 1) % 11 == 0}\\\">\\n                            <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                            <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.last_data ? (item.last_data.last_ending) : 0 }}</td>\\n                            <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.total_in | number }}</td>\\n                            <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.total_out_sales | number }}</td>\\n                            <td *ngIf=\\\"ths[4].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.last_ending | number }}</td>\\n                            <td *ngIf=\\\"ths[5].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.name }}</td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!isLoaded\\\">\\n                            <tr>\\n                            <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                <ngx-skeleton-loader [theme]=\\\"{\\n                                'border-radius' : '5px',\\n                                'margin-bottom' : '0px',\\n                                'height' : '20px'\\n                                }\\\"></ngx-skeleton-loader>\\n                            </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                            <tr>\\n                            <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 h-22\\\"></p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\"","export default \"<mat-drawer-container class=\\\"sidenav-container\\\">\\n  <mat-drawer #drawer class=\\\"sidenav\\\" fixedInViewport\\n      [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\n      [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\n      [opened]=\\\"(isHandset$ | async) === false\\\">\\n    <mat-toolbar class=\\\"h-auto pt-15 pb-15\\\">\\n      <img class=\\\"m-auto\\\" src=\\\"../../../assets/images/gapan-logo.svg\\\">\\n    </mat-toolbar>\\n    <mat-nav-list>\\n      <mat-accordion>\\n        <ng-container *ngIf=\\\"userLogin.user_role_id == 4\\\">\\n          <a mat-list-item routerLink=\\\"/dashboard\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-dashboard\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">Dashboard</span>\\n          </a>\\n          <a mat-list-item routerLink=\\\"/house\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-house-building\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">House/Building</span>\\n          </a>\\n          <a mat-list-item routerLink=\\\"/staffs\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-staffs\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">Staffs</span>\\n          </a>\\n          <a mat-list-item routerLink=\\\"/activity-log/activity\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-daily-reports\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">Activity Log</span>\\n          </a>\\n          <a mat-list-item routerLink=\\\"/customers\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-customers\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">Customers</span>\\n          </a>\\n          <mat-expansion-panel class=\\\"m-0 no-box-shadow\\\">\\n            <mat-expansion-panel-header class=\\\"pl-15 pr-15\\\">\\n              <mat-panel-title>\\n                <i class=\\\"icon-feeds-medicine-management\\\"></i>\\n                <span class=\\\"fs-16 ml-15\\\">Feeds and Medicine Management</span>\\n              </mat-panel-title>\\n            </mat-expansion-panel-header>\\n            <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/feeds-medicine-management/feeds\\\" routerLinkActive=\\\"active-list-item\\\">Feeds</a>\\n            <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/feeds-medicine-management/medicine\\\" routerLinkActive=\\\"active-list-item\\\">Medicine</a>\\n          </mat-expansion-panel>\\n          <a mat-list-item routerLink=\\\"/feeds-medicine-consumption\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-feeds-medicine-consumption\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">Feeds and Medicine Consumption</span>\\n          </a>\\n          <mat-expansion-panel class=\\\"m-0 no-box-shadow pt-5 pb-5\\\">\\n            <mat-expansion-panel-header class=\\\"pl-15 pr-15\\\">\\n              <mat-panel-title>\\n                <i class=\\\"icon-daily-reports\\\"></i>\\n                <span class=\\\"fs-16 ml-15\\\">Daily Reports</span>\\n              </mat-panel-title>\\n            </mat-expansion-panel-header>\\n            <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/daily-reports\\\" routerLinkActive=\\\"active-list-item\\\">All</a>\\n            <ng-container *ngFor=\\\"let house of houses; let i = index\\\">\\n              <a mat-list-item class=\\\"pl-35 fs-14\\\" [routerLink]=\\\"[ '/daily-reports-house', house.id]\\\" routerLinkActive=\\\"active-list-item\\\">House/Building no. {{ house.house_name }}</a>\\n            </ng-container>\\n          </mat-expansion-panel>\\n        </ng-container>\\n        <mat-expansion-panel class=\\\"m-0 no-box-shadow\\\">\\n          <mat-expansion-panel-header class=\\\"pl-15 pr-15\\\">\\n            <mat-panel-title>\\n              <i class=\\\"icon-transactions\\\"></i>\\n              <span class=\\\"fs-16 ml-15\\\">Transactions</span>\\n            </mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/transactions\\\" routerLinkActive=\\\"active-list-item\\\">All</a>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" [routerLink]=\\\"[ '/transactions-status', 1]\\\" routerLinkActive=\\\"active-list-item\\\">Pending\\n            <mat-chip-list class=\\\"ml-auto\\\" *ngIf=\\\"statuscount && statuscount.pending > 0\\\">\\n              <mat-chip>{{ statuscount && statuscount.pending ? statuscount.pending : 0 }}</mat-chip>\\n            </mat-chip-list>\\n          </a>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" [routerLink]=\\\"[ '/transactions-payment', 3]\\\" routerLinkActive=\\\"active-list-item\\\">With Balance\\n            <mat-chip-list class=\\\"ml-auto\\\" *ngIf=\\\"statuscount && statuscount.balance > 0\\\">\\n              <mat-chip>{{ statuscount && statuscount.balance ? statuscount.balance : 0 }}</mat-chip>\\n            </mat-chip-list>\\n          </a>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" [routerLink]=\\\"[ '/transactions-payment', 2]\\\" routerLinkActive=\\\"active-list-item\\\">With Credit\\n            <mat-chip-list class=\\\"ml-auto\\\" *ngIf=\\\"statuscount && statuscount.credit > 0\\\">\\n              <mat-chip>{{ statuscount && statuscount.credit ? statuscount.credit : 0 }}</mat-chip>\\n            </mat-chip-list>\\n          </a>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" [routerLink]=\\\"[ '/transactions-status', 4]\\\" routerLinkActive=\\\"active-list-item\\\">Completed\\n            <mat-chip-list class=\\\"ml-auto\\\" *ngIf=\\\"statuscount && statuscount.completed > 0\\\">\\n              <mat-chip>{{ statuscount && statuscount.completed ? statuscount.completed : 0 }}</mat-chip>\\n            </mat-chip-list>\\n          </a>\\n        </mat-expansion-panel>\\n        <ng-container *ngIf=\\\"userLogin.user_role_id == 5\\\">\\n          <a mat-list-item routerLink=\\\"/customers\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-customers\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">Customers</span>\\n          </a>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"userLogin.user_role_id == 4\\\">\\n          <a mat-list-item routerLink=\\\"/price-management\\\" routerLinkActive=\\\"active-list-item\\\">\\n            <i class=\\\"icon-price-management\\\"></i>\\n            <span class=\\\"fs-16 ml-15\\\">Price Management</span>\\n          </a>\\n          <mat-expansion-panel class=\\\"m-0 no-box-shadow\\\">\\n            <mat-expansion-panel-header class=\\\"pl-15 pr-15\\\">\\n              <mat-panel-title>\\n                <i class=\\\"icon-performance-report\\\"></i>\\n                <span class=\\\"fs-16 ml-15\\\">Performance Report</span>\\n              </mat-panel-title>\\n            </mat-expansion-panel-header>\\n            <mat-accordion>\\n              <mat-expansion-panel class=\\\"m-0 no-box-shadow\\\">\\n                <mat-expansion-panel-header class=\\\"pl-50 pr-15\\\">\\n                  <mat-panel-title>\\n                    <span class=\\\"fs-14\\\">Harvested</span>\\n                  </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <a mat-list-item class=\\\"pl-60 fs-14\\\" routerLink=\\\"/performance-report/harvested/production-by-egg-size\\\" routerLinkActive=\\\"active-list-item\\\">Production by egg size</a>\\n                <a mat-list-item class=\\\"pl-60 fs-14\\\" routerLink=\\\"/performance-report/harvested/production-per-house\\\" routerLinkActive=\\\"active-list-item\\\">Production per house</a>\\n              </mat-expansion-panel>\\n              <mat-expansion-panel class=\\\"m-0 no-box-shadow\\\">\\n                <mat-expansion-panel-header class=\\\"pl-50 pr-15\\\">\\n                  <mat-panel-title>\\n                    <span class=\\\"fs-14\\\">Sales</span>\\n                  </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <a mat-list-item class=\\\"pl-60 fs-14\\\" routerLink=\\\"/performance-report/sales/overall-sales\\\" routerLinkActive=\\\"active-list-item\\\">Overall Sales</a>\\n                <a mat-list-item class=\\\"pl-60 fs-14\\\" routerLink=\\\"/performance-report/sales/sales-by-egg-size\\\" routerLinkActive=\\\"active-list-item\\\">Sales by egg size</a>\\n              </mat-expansion-panel>\\n              <mat-expansion-panel class=\\\"m-0 no-box-shadow\\\">\\n                <mat-expansion-panel-header class=\\\"pl-50 pr-15\\\">\\n                  <mat-panel-title>\\n                    <span class=\\\"fs-14\\\">Consumption</span>\\n                  </mat-panel-title>\\n                </mat-expansion-panel-header>\\n                <a mat-list-item class=\\\"pl-60 fs-14\\\" routerLink=\\\"/performance-report/consumption/feeds\\\" routerLinkActive=\\\"active-list-item\\\">Feeds</a>\\n                <a mat-list-item class=\\\"pl-60 fs-14\\\" routerLink=\\\"/performance-report/consumption/medicine\\\" routerLinkActive=\\\"active-list-item\\\">Medicine</a>\\n              </mat-expansion-panel>\\n              <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/performance-report/stocks\\\" routerLinkActive=\\\"active-list-item\\\">Inflow/Outflow</a>\\n            </mat-accordion>\\n          </mat-expansion-panel>\\n        </ng-container>\\n        <mat-expansion-panel class=\\\"m-0 no-box-shadow\\\">\\n          <mat-expansion-panel-header class=\\\"pl-15 pr-15\\\">\\n            <mat-panel-title>\\n              <i class=\\\"icon-inventory-stocks\\\"></i>\\n              <span class=\\\"fs-16 ml-15\\\">Inventory/Stocks</span>\\n            </mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/inventory-stocks/fresh-eggs\\\" routerLinkActive=\\\"active-list-item\\\">Fresh Eggs</a>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/inventory-stocks/trays\\\" routerLinkActive=\\\"active-list-item\\\">Trays</a>\\n          <a mat-list-item class=\\\"pl-35 fs-14\\\" routerLink=\\\"/inventory-stocks/sacks\\\" routerLinkActive=\\\"active-list-item\\\">Sacks</a>\\n        </mat-expansion-panel>\\n      </mat-accordion>\\n    </mat-nav-list>\\n  </mat-drawer>\\n  <mat-drawer-content>\\n    <mat-toolbar color=\\\"light\\\">\\n      <button\\n          type=\\\"button\\\"\\n          aria-label=\\\"Toggle sidenav\\\"\\n          mat-icon-button\\n          (click)=\\\"drawer.toggle()\\\"\\n          *ngIf=\\\"isHandset$ | async\\\">\\n          <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n      </button>\\n      <span class=\\\"ml-auto\\\">\\n        <button mat-icon-button [matMenuTriggerFor]=\\\"notifications\\\">\\n          <mat-icon *ngIf=\\\"notifCount > 0\\\" aria-hidden=\\\"false\\\" [matBadge]=\\\"notifCount\\\" matBadgeColor=\\\"warn\\\">notifications_none</mat-icon>\\n          <mat-icon *ngIf=\\\"notifCount == 0\\\" aria-hidden=\\\"false\\\">notifications_none</mat-icon>\\n        </button>\\n        <mat-menu #notifications=\\\"matMenu\\\" class=\\\"notif-container\\\">\\n          <ng-container *ngIf=\\\"notifPreview && notifPreview.length > 0\\\">\\n            <mat-card *ngFor=\\\"let notifData of notifPreview; let i = index\\\" class=\\\"no-box-shadow\\\" (click)=\\\"gotoPage(notifData)\\\">\\n              <mat-card-header class=\\\"notif-card-header\\\">\\n                <div mat-card-avatar>\\n                  <img *ngIf=\\\"notifData.owner_profile_pic\\\" class=\\\"rounded-circle w-40\\\" [src]=\\\"notifData.owner_profile_pic\\\">\\n                  <img *ngIf=\\\"!notifData.owner_profile_pic\\\" class=\\\"rounded-circle w-40\\\" src=\\\"../../../../assets/images/image_icon.png\\\" alt=\\\"profile_pic\\\">\\n                </div>\\n                <!-- <mat-card-title>Shiba Inu</mat-card-title> -->\\n                <mat-card-subtitle class=\\\"m-0\\\">\\n                  <p class=\\\"fs-14 mb-10\\\" [innerHTML]=\\\"notifData.data\\\"></p>\\n                  <p class=\\\"fs-10 italic text-right m-0\\\">{{ notifData.updated_at | timeago }}</p>\\n                </mat-card-subtitle>\\n              </mat-card-header>\\n            </mat-card>\\n          </ng-container>\\n        </mat-menu>\\n        <button mat-flat-button [matMenuTriggerFor]=\\\"menu\\\" class=\\\"ml-10\\\">\\n          <img *ngIf=\\\"userLogin.user_profile.profile_picture\\\"  class=\\\"rounded-circle w-30 mr-10\\\"\\n          [src]=\\\"userLogin.user_profile.profile_picture\\\">\\n          <img *ngIf=\\\"!userLogin.user_profile.profile_picture\\\" class=\\\"rounded-circle w-30 mr-10\\\" src=\\\"../../../../assets/images/image_icon.png\\\" alt=\\\"profile_pic\\\">\\n          <span>{{ userLogin && userLogin.user_profile ? userLogin.user_profile.first_name + ' ' + userLogin.user_profile.last_name : '' }}</span>\\n          <mat-icon aria-hidden=\\\"false\\\">expand_more</mat-icon>\\n        </button>\\n        <mat-menu #menu=\\\"matMenu\\\">\\n          <button mat-menu-item routerLink=\\\"/my-profile\\\">My Profile</button>\\n          <button mat-menu-item (click)=\\\"logout()\\\">Logout</button>\\n        </mat-menu>\\n      </span>\\n    </mat-toolbar>\\n    <router-outlet> </router-outlet>\\n  </mat-drawer-content>\\n</mat-drawer-container>  \"","export default \"\"","export default \"<section class=\\\"main-container p-35 h-100-per\\\">\\n    <div class=\\\"row mb-35\\\">\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n        <h1 class=\\\"heading\\\">Feeds and Medicine Consumption</h1>\\n        <p class=\\\"sub-heading\\\">For this month of {{ monthdatetoday | date : 'MMMM yyyy' }}</p>\\n      </div>\\n      <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary btn-block\\\">\\n          <i class=\\\"icon-folder\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">View Archived Records</span>\\n        </button>\\n      </div> -->\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/feeds-medicine-consumption/create\\\">\\n          <i class=\\\"icon-add\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new monthly record</span>\\n        </button>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <ng-container *ngIf=\\\"isLoaded && houses.length > 0\\\">\\n        <div class=\\\"col-3 mb-30\\\" *ngFor=\\\"let house of houses; let i = index\\\">\\n          <div class=\\\"container-card card-radius p-20\\\">\\n            <mat-icon>home</mat-icon>\\n            <p class=\\\"mini-heading mb-10 fs-16\\\">House/Building no. {{ house.house_name }}</p>\\n            <div class=\\\"row\\\">\\n            <i Class=\\\"material-icons ml-10\\\">check_box</i><p class=\\\"sub-heading mt-3 mb-10 fs-13\\\">Daily House Report: {{ house.report_count }}</p>\\n            </div>\\n            <!-- *ngIf=\\\"activity && activity.updated_at\\\" -->\\n            <span class=\\\"sub-heading italic fs-12\\\">Last updated: {{ house.updated_at | timeago }} </span>\\n  <!--           <h1 class=\\\"heading mb-0\\\">{{ dashboard_data ? (dashboard_data.daily_reports_for_approval | number) : 0 }}</h1> -->\\n            <span class=\\\"card-line\\\">____________________________</span>\\n            <div class=\\\"row\\\">\\n                <button Class=\\\"fs-12 p-1 ml-11\\\" mat-flat-button [routerLink]=\\\"[ '/feeds-medicine-consumption/view', house.id]\\\">View Details\\n              <i class=\\\"material-icons mb-2\\\">keyboard_arrow_right</i>\\n              </button>\\n            </div>  \\n         </div>\\n        </div>\\n      </ng-container>\\n    </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">Tray Inventory/Stocks</h1>\\n      <p class=\\\"sub-heading mb-8\\\">Grand total quantity of trays: <strong>{{ totalItems | number }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.created_at\\\">last updated {{ activity.created_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.created_at\\\" [theme]=\\\"{\\n            'border-radius' : '5px',\\n            'margin-bottom' : '10px',\\n            'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n        <i class=\\\"icon-download\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n        <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n      </button>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n        <i class=\\\"icon-download\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n        <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Dates - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Dates' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 offset-xl-2 col-lg-4 offset-lg-2 col-md-8 col-sm-9 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search Date and Time\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n<!--           <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button> -->\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [max]=\\\"max_date\\\" [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\"\\n                [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\"\\n                (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Dates - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Dates' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td>{{ item.created_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                <td>{{ item.beginning | number }}</td>\\n                <td>{{ item.returned | number }}</td>\\n                <td>{{ item.number_of_out_sales | number }}</td>\\n                <td>{{ item.total_remaining | number }}</td>\\n                <td>{{ item.name }}</td>\\n                <td>\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/inventory-stocks/trays/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n              <a (click)=\\\"gotoPage(prev_page)\\\">\\n                  Previous\\n              </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n              <a (click)=\\\"gotoPage(next_page)\\\">\\n                  Next\\n              </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"\"","export default \".alt {\\n  background: rgba(229, 229, 229, 0.4) !important;\\n}\\n\\n.order-timer {\\n  background: #DDE1E5;\\n  border-radius: 5px;\\n  margin-top: -15px;\\n  margin-bottom: 22px;\\n  overflow: hidden;\\n}\\n\\n.order-timer .note {\\n  display: inline-block;\\n  /* font-size: $font17; */\\n  line-height: 25px;\\n  letter-spacing: -0.0241176em;\\n  color: #494A4B;\\n  padding: 13px;\\n}\\n\\n.order-timer .note img {\\n  margin-right: 13px;\\n  width: 28px;\\n  height: 28px;\\n  /* font-size: $font49; */\\n}\\n\\n.order-timer .countdown .measurements {\\n  text-align: center;\\n  margin: 0 5px;\\n}\\n\\n.order-timer .countdown .measurements:first-child {\\n  margin-left: 0;\\n}\\n\\n.order-timer .countdown .measurements:last-child {\\n  margin-right: 0;\\n}\\n\\n.order-timer .countdown .measurements .measurements-number {\\n  font-size: 24px;\\n  line-height: 1;\\n}\\n\\n.order-timer .countdown .measurements .measurements-text {\\n  font-size: 10px;\\n  line-height: 1;\\n}\\n\\n.order-timer .timer {\\n  background: #72787F;\\n  border-radius: 0px 0px 5px 5px;\\n  padding: 7px 13px;\\n  display: inline-block;\\n  color: #FFF;\\n}\\n\\n.order-timer .timer p {\\n  margin: 0;\\n}\\n\\n.order-timer .timer img {\\n  margin-left: 40px;\\n  margin-right: 2px;\\n  width: 25px;\\n  height: 25px;\\n}\\n\\n.order-timer .timer .measurements {\\n  min-width: 25px;\\n  position: relative;\\n}\\n\\n.order-timer .timer .measurements p {\\n  margin-bottom: 0;\\n}\\n\\n.order-timer .timer .measurements .measurements-number {\\n  font-weight: bold;\\n  font-size: 20px;\\n  line-height: 23px;\\n  letter-spacing: 0.02em;\\n}\\n\\n.order-timer .timer .measurements .measurements-text {\\n  font-size: 10px;\\n  line-height: 14px;\\n}\\n\\n.order-timer .timer .measurements .divider {\\n  /* margin-top: -24px;\\n  margin-right: -7px; */\\n  position: absolute;\\n  top: -2px;\\n  right: -7px;\\n  font-weight: bold;\\n  font-size: 20px;\\n}\\n\\n.rowActive {\\n  background-color: #c6c6c6;\\n}\\n\\n.activeRow {\\n  border: 2px solid black;\\n}\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Harvest Performance Report</h1>\\n            <!-- <ng-container *ngIf=\\\"showtimeago\\\">\\n                <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '10px',\\n                    'height' : '20px'\\n                }\\\"></ngx-skeleton-loader>\\n            </ng-container> -->\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12\\\">\\n                <p class=\\\"mb-10 fw-500\\\">Harvested production by egg sizes</p>\\n                <ng-container *ngIf=\\\"showtimeago\\\">\\n                    <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                    <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                        'border-radius' : '5px',\\n                        'margin-bottom' : '10px',\\n                        'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                </ng-container>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <div class=\\\"inner-group in-line\\\">\\n                                <label class=\\\"mr-15\\\">Show:</label>\\n\\n                                <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"By egg type\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                                    <mat-select-trigger>By egg type</mat-select-trigger>\\n                                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                                        <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                                    </ng-container>\\n                                </mat-select>\\n\\n                                <!-- <mat-select multiple class=\\\"btn btn-drop-down text-left\\\" placeholder=\\\"All egg type\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_eggs\\\">\\n                                    <mat-select-trigger>All egg type</mat-select-trigger>\\n                                    <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                                </mat-select> -->\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <mat-select class=\\\"btn btn-drop-down btn-block text-left\\\" placeholder=\\\"All house/building\\\" (selectionChange)=\\\"houseSelected($event)\\\" [(ngModel)]=\\\"house_id\\\">\\n                                <mat-option *ngFor=\\\"let house of house_options\\\" [value]=\\\"house.id\\\">House/building no. {{ house.house_name }}</mat-option>\\n                            </mat-select>\\n                        </div>\\n                    </div>\\n                    \\n                    \\n                    <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <mat-select multiple class=\\\"btn btn-drop-down btn-block\\\" placeholder=\\\"All egg type\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_eggs\\\">\\n                                <mat-select-trigger>All egg type</mat-select-trigger>\\n                                <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                            </mat-select>\\n                        </div>\\n                    </div> -->\\n                    <!-- <div class=\\\"col-xl-5 col-lg-5 col-md-5 col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left\\\" placeholder=\\\"All house/building\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_house\\\">\\n                                <mat-select-trigger>All house/building</mat-select-trigger>\\n                                <mat-option *ngFor=\\\"let house of house_options\\\" [value]=\\\"house.id\\\">House/building no. {{ house.house_name }}</mat-option>\\n                            </mat-select>\\n                        </div>\\n                    </div> -->\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">\\n                                <span *ngIf=\\\"(from | date: 'yyyy-MM-dd') != (to | date: 'yyyy-MM-dd')\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}</span>\\n                                <span *ngIf=\\\"(from | date: 'yyyy-MM-dd') == (to | date: 'yyyy-MM-dd')\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}</span>\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\" *ngIf=\\\"from && to\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                    </div>\\n                </div>\\n                <!-- <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div> -->\\n            </div>\\n        </div>\\n\\n        <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-5 fs-14\\\">Overall Harvested Eggs</p>\\n                <h1 class=\\\"heading fs-34\\\">{{ overall_harvested_eggs | number }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded && items.length > 0 && visible_columns.length > 0\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                <canvas baseChart \\n                    [datasets]=\\\"barChartData\\\"\\n                    [labels]=\\\"barChartLabels\\\"\\n                    [options]=\\\"barChartOptions\\\"\\n                    [plugins]=\\\"barChartPlugins\\\"\\n                    [legend]=\\\"barChartLegend\\\"\\n                    [chartType]=\\\"barChartType\\\">\\n                </canvas>\\n            </div>\\n            <!-- <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>Egg Sizes</p>\\n            </div> -->\\n            <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>All Dates</p>\\n            </div>\\n            <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p *ngIf=\\\"(from | date: 'yyyy-MM-dd') != (to | date: 'yyyy-MM-dd')\\\">{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                <p *ngIf=\\\"(from | date: 'yyyy-MM-dd') == (to | date: 'yyyy-MM-dd')\\\">{{ from | date : 'MMMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table [ngStyle]=\\\"{'width.px': 180 * visible_columns.length}\\\">\\n                        <thead>\\n                            <tr>\\n                                <th class=\\\"sort\\\" (click)=\\\"orderList(true, 'received_by_date', order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    Date\\n                                    <i *ngIf=\\\"order.order_by_column == 'received_by_date'\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'received_by_date' }\\\"></i>\\n                                </th>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                    <td class=\\\"w-20-per\\\">{{ item.grouped_date | date: 'MM/dd/yyyy' }}</td>\\n                                    <ng-container *ngFor=\\\"let item of item.daily_sorting_inventory; let i = index\\\">\\n                                        <td *ngIf=\\\"ths[i].isVisible\\\" class=\\\"w-20-per\\\">{{ item.sum | number }}</td>\\n                                    </ng-container>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius' : '5px',\\n                                    'margin-bottom' : '0px',\\n                                    'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                            </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <!-- <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                <div class=\\\"inner-group in-line\\\">\\n                    <label class=\\\"mr-15\\\">Show</label>\\n                    <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                        <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                    </mat-select>\\n                    <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                        <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                    </mat-select>\\n                    <label>of {{ totalItems | number }} entries</label>\\n                </div>\\n                </div>\\n            </div> -->\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12 ml-auto\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                    <a (click)=\\\"gotoPage(prev_page)\\\">\\n                        Previous\\n                    </a>\\n                </li>\\n                <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                    <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                </ng-container>\\n                \\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                    <a (click)=\\\"gotoPage(next_page)\\\">\\n                        Next\\n                    </a>\\n                </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"confirmPasswordForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group p-relative\\\">\\n                <input type=\\\"{{ show_password ? 'text' : 'password' }}\\\" formControlName=\\\"password\\\" class=\\\"form-control mb-10\\\" />\\n                <button type=\\\"button\\\" class=\\\"btn btn-clear p-absolute t-2 r-0\\\" (click)=\\\"showPassword()\\\">\\n                    <i [ngClass]=\\\"{ 'icon-eye-close' : !show_password, 'icon-eye-open' : show_password }\\\"></i>\\n                </button>\\n                <ng-container *ngIf=\\\"confirmPasswordForm.controls.password.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"confirmPasswordForm.controls.password.hasError('required')\\\">Password is required</p>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-6 text-right\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\">Cancel</button>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"modal_primary_button_class\\\" [disabled]=\\\"!confirmPasswordForm.valid || isLoading\\\">{{ modal_primary_button }}</button>\\n        </div>\\n    </div>\\n</form>\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n      <h1 class=\\\"heading\\\">Staff Management</h1>\\n      <p class=\\\"sub-heading mb-8\\\">Total number of staff: <strong>{{ totalItems }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.update_at\\\">last updated {{ activity.update_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.update_at\\\" [theme]=\\\"{\\n          'border-radius' : '5px',\\n          'margin-bottom' : '10px',\\n          'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/staffs/create\\\">\\n        <i class=\\\"icon-add\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new staff</span>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"role_id\\\" (selectionChange)=\\\"changeRole($event)\\\" placeholder=\\\"Staff Role\\\">\\n                <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.value\\\">{{ role.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [max]=\\\"max_date\\\" [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Added - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Added' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n            Clear Filters\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-4 col-sm-4 col-8 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-2 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\" [routerLink]=\\\"[ '/staffs/view', item.id]\\\" class=\\\"cursor-pointer\\\">\\n                <td>{{ item.staff_id }}</td>\\n                <td>{{ item.profile_first_name }} {{ item.profile_last_name }}</td>\\n                <td>{{ item.roles_name }}</td>\\n                <td>{{ item.username }}</td>\\n                <td>{{ item.contact_number ? '+63' : '' }}<span *ngIf=\\\"item.contact_number\\\">{{item.contact_number}}</span></td>\\n                <td>{{ item.last_login ? (item.last_login | date : 'MM/dd/yyyy, hh:mm aaa') : 'Not yet logged in' }}</td>\\n                <td>\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/staffs/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n              <a (click)=\\\"gotoPage(prev_page)\\\">\\n                  Previous\\n              </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n              <a (click)=\\\"gotoPage(next_page)\\\">\\n                  Next\\n              </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>  \"","export default \"\"","export default \".card-line {\\n  color: #cccccc;\\n  font-weight: 400;\\n}\\n\\n.card-subline {\\n  color: #EAEDF0;\\n}\"","export default \"/* .order-summary {\\n    background-color: color(container, bg);\\n} */\\nhr.h-2 {\\n  background-color: #72787F;\\n}\"","export default \"\"","export default \".mat-select-value::after {\\n  content: \\\"asd\\\";\\n}\\n\\n.mat-select-value-text {\\n  display: none !important;\\n}\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Egg Price Management</h1>\\n            <ng-container *ngIf=\\\"showtimeago\\\">\\n                <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '10px',\\n                    'height' : '20px'\\n                }\\\"></ngx-skeleton-loader>\\n            </ng-container>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"downloadModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <h6 class=\\\"card-heading\\\">Filters</h6>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"type\\\" (selectionChange)=\\\"changeType($event)\\\" placeholder=\\\"Egg Size\\\">\\n                                <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                            </mat-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Range - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Range' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n                        Clear Filters\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"container-card p-30\\\">\\n      <div class=\\\"row mb-25\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"inner-group\\\">\\n                  <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n                    <mat-select-trigger>Column Visibility</mat-select-trigger>\\n                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                      <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                    </ng-container>\\n                  </mat-select>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group search\\\">\\n              <i class=\\\"icon-search\\\"></i>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search egg type\\\" [(ngModel)]=\\\"search\\\"\\n                (keydown.enter)=\\\"searchItem()\\\" />\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n              <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n              <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n      <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                  <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.egg_type_type }}</td>\\n                  <td *ngIf=\\\"ths[1].isVisible\\\">₱ {{ item.per_piece | number : '1.2-2' }}</td>\\n                  <td *ngIf=\\\"ths[2].isVisible\\\">₱ {{ item.per_tray | number : '1.2-2' }}</td>\\n                  <td *ngIf=\\\"ths[3].isVisible\\\">₱ {{ item.per_case | number : '1.2-2' }}</td>\\n                  <td *ngIf=\\\"ths[4].isVisible\\\">{{ item.updated_at | date: 'MM/dd/yyyy' }}</td>\\n                  <td *ngIf=\\\"ths[5].isVisible\\\">\\n                      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/price-management/view', item.type_id]\\\">\\n                          <i class=\\\"icon-price-trend\\\"></i>\\n                          View price trend\\n                        </button>\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item)\\\">\\n                      <i class=\\\"icon-edit\\\"></i>\\n                      Update price\\n                    </button>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n      <div class=\\\"row mt-35\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n          <ul class=\\\"paginate pull-right\\\">\\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                <a (click)=\\\"gotoPage(prev_page)\\\">\\n                    Previous\\n                </a>\\n            </li>\\n            <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n              <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n            </ng-container>\\n            \\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                <a (click)=\\\"gotoPage(next_page)\\\">\\n                    Next\\n                </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n    </div>\\n  </section>  \"","export default \"\"","export default \"\"","export default \"\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-20\\\">\\n        <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n            <h1 class=\\\"heading\\\">My Profile</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n        <div class=\\\"container-card view-record p-30\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-2 offset-xl-0 col-lg-3 offset-lg-0 col-md-6 offset-md-3 col-sm-6 offset-sm-3 col-6 offset-3\\\">\\n              <img *ngIf=\\\"!isLoaded || !user_profile.profile_picture\\\" src=\\\"../../../../../assets/images/profile.svg\\\" class=\\\"avatar img-responsive\\\">\\n              <img *ngIf=\\\"isLoaded && user_profile.profile_picture\\\" [src]=\\\"user_profile.profile_picture\\\" class=\\\"avatar img-responsive\\\">\\n            </div>\\n            <div class=\\\"col-xl-10 col-lg-9 col-md-12 col-sm-12 col-12 pl-0 mt-11\\\">\\n              <div class=\\\"row ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-5 fs-12\\\">First Name</p>\\n                  <h1 class=\\\"mini-heading fw-500\\\">{{ user_profile.profile_first_name }}</h1>\\n                </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-5 fs-12\\\">Last Name</p>\\n                  <h1 class=\\\"mini-heading fw-500\\\">{{ user_profile.profile_last_name }}</h1>\\n                </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Username</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.username }}</h1>\\n                </div>\\n              </div>\\n              <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">User Role</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.user_role_label }}</h1>\\n                </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">User ID</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.id }}</h1>\\n                </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Mobile Number</p>\\n                  <h1 class=\\\"fs-16\\\">+63{{ user_profile.contact_number }}</h1>\\n                </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\" *ngIf=\\\"user_profile.user_role_id == 4 || user_profile.user_role_id == 5\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Email</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.email }}</h1>\\n                </div>\\n              </div>\\n              <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Address</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.profile_location }}</h1>\\n                </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Password</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.real_password }}</h1>\\n                </div>\\n              </div>\\n              <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Date Added</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.created_at | date : 'MM/dd/yyyy' }}</h1>\\n                </div>\\n                <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                  <p class=\\\"mb-8 fs-12\\\">Last Login</p>\\n                  <h1 class=\\\"fs-16\\\">{{ user_profile.last_login ? (user_profile.last_login | date : 'MM/dd/yyyy, hh:mm aaa') : 'Not yet logged in' }}</h1>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-12\\\">\\n        <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n          <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Actions</h1>\\n          <p class=\\\"fs-14 action-note\\\">Here are the actions you can apply for this order details.</p>\\n          <button type=\\\"button\\\" class=\\\"btn btn-secondary mt-30 btn-block\\\" mat-flat-button [routerLink]=\\\"['/staffs/update', user_profile.id]\\\">\\n            <div class=\\\"cus-layer ml-auto mr-auto\\\">\\n              <i class=\\\"icon-edit\\\"></i>\\n              <span class=\\\"ml-8 fs-14\\\">Edit Profile</span>\\n            </div>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </section>\\n  \\n  <section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n      <div class=\\\"col-xl-6 col-lg-6 col-md-8 col-sm-12 col-12\\\">\\n        <h1 class=\\\"heading\\\">Activity Log</h1>\\n      </div>\\n    </div>\\n    \\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <h6 class=\\\"card-heading\\\">Filters</h6>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n  <!--       <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Created - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Created' }}\\n                  <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                </button>\\n              </div>\\n            </div>\\n          </div>\\n        </div> -->\\n  <!--       <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n          </div>\\n        </div> -->\\n      </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n      <div class=\\\"row mb-25\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n  <!--       <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group\\\">\\n              <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n                <mat-select-trigger>Column Visibility</mat-select-trigger>\\n                <mat-option *ngFor=\\\"let item of ths; let i = index\\\" [value]=\\\"i\\\">{{ item.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n        </div> -->\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\"\\n              [(ngModel)]=\\\"created_at\\\">\\n            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\"\\n              (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Created - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Created' }}\\n              <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n            </button>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"code\\\"\\n              (selectionChange)=\\\"changeCode($event)\\\" placeholder=\\\"Staff Activity\\\">\\n              <mat-option *ngFor=\\\"let code_option of code_options\\\" [value]=\\\"code_option.value\\\">{{ code_option.label }}</mat-option>\\n            </mat-select>\\n          </div>\\n        </div>\\n  <!--       <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group search\\\">\\n              <i class=\\\"icon-search\\\"></i>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n                (keydown.enter)=\\\"searchItem()\\\" />\\n            </div>\\n          </div>\\n        </div> -->\\n  <!--       <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n              <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n              <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n            </button>\\n          </div>\\n        </div> -->\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n      <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table>\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                  <td *ngIf=\\\"ths[0].isVisible\\\" [innerHTML]=\\\"item.action\\\">{{ item.action }}</td>\\n                  <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.created_at }}</td>\\n  <!--                 <td *ngIf=\\\"ths[2].isVisible\\\">\\n                    <mat-chip-list>\\n                      <mat-chip>{{ item.recordStatus }}</mat-chip>\\n                    </mat-chip-list>\\n                  </td>\\n                  <td *ngIf=\\\"ths[3].isVisible\\\">{{ item.bird_count | number }}</td>\\n                  <td *ngIf=\\\"ths[4].isVisible\\\">{{ item.real_egg_count | number }}</td>\\n                  <td *ngIf=\\\"ths[5].isVisible\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" [routerLink]=\\\"[ '/transactions/view', item.id]\\\">\\n                      <i class=\\\"icon-datatables-view\\\"></i>\\n                      View\\n                    </button>\\n                  </td> -->\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n      <div class=\\\"row mt-35\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n          <ul class=\\\"paginate pull-right\\\">\\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n              <a (click)=\\\"gotoPage(prev_page)\\\">\\n                Previous\\n              </a>\\n            </li>\\n            <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n              <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n            </ng-container>\\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n              <a (click)=\\\"gotoPage(next_page)\\\">\\n                Next\\n              </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n    </div>\\n  </section>\"","export default \"<div class=\\\"login-container\\\">\\n  <div class=\\\"inner-container\\\">\\n    <div class=\\\"col1\\\">\\n      <div class=\\\"login-wrapper ml-100 mr-100\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <img class=\\\"img2\\\" class=\\\"mt-60\\\" src=\\\"../../../assets/images/gapan-logo.svg\\\" alt=\\\"\\\" width=\\\"50%\\\"/>\\n          </div>\\n        </div>\\n        <h3 class=\\\"fs-20 mt-26 mb-0 fw-500\\\">Welcome to Gapan Fresh Eggs, Inc.</h3>\\n        <p id=\\\"welcome\\\" class=\\\"fs-16 lh-24 mb-0 mt-11 text-secondary\\\">\\n          Welcome back, login now to get started.\\n        </p>\\n        <div class=\\\"mt-35\\\">\\n          <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-12\\\">\\n                <div class=\\\"form-group\\\">\\n                  <label class=\\\"text-secondary\\\">Email or Username</label>\\n                  <input type=\\\"text\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"email\\\" (keydown.enter)=\\\"login()\\\" placeholder=\\\"Enter your email or username\\\"/>\\n                  <ng-container *ngIf=\\\"loginForm.controls.email.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"loginForm.controls.email.hasError('required')\\\">Email or username is required</p>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"loginForm.controls.email.hasError('pattern')\\\">Please enter a valid email address</p>\\n                    <!-- <p class=\\\"text-danger\\\" *ngIf=\\\"loginForm.controls.username.hasError('email')\\\">Please enter a valid email address</p> -->\\n                  </ng-container>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-12\\\">\\n                <div class=\\\"form-group\\\">\\n                  <label class=\\\"text-secondary\\\">Password</label>\\n                  <div class=\\\"p-relative\\\">\\n                    <input type=\\\"{{ show_password ? 'text' : 'password' }}\\\" formControlName=\\\"password\\\" class=\\\"form-control mb-10\\\" (keydown.enter)=\\\"login()\\\" placeholder=\\\"Enter your password\\\" />\\n                    <button type=\\\"button\\\" class=\\\"btn btn-clear p-absolute t-2 r-0\\\" (click)=\\\"showPassword()\\\">\\n                        <i [ngClass]=\\\"{ 'icon-eye-close' : !show_password, 'icon-eye-open' : show_password }\\\"></i>\\n                    </button>\\n                  </div>\\n                  <ng-container *ngIf=\\\"loginForm.controls.password.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"loginForm.controls.password.hasError('required')\\\">Password is required</p>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"loginForm.controls.password.hasError('minlength')\\\">Password must contain at least 8 characters</p>\\n                  </ng-container>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\">\\n                  <mat-checkbox formControlName=\\\"remember_me\\\">Remember me</mat-checkbox>\\n                </div>\\n              </div>\\n              <div class=\\\"col-md-6 text-right\\\">\\n                <div class=\\\"form-group\\\">\\n                  <button class=\\\"btn btn-forgot p-0\\\">Forgot Password?</button>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-12 text-right\\\">\\n                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block fs-16 lh-24 h-46 fw-400\\\" [disabled]=\\\"!loginForm.valid\\\">Login</button>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col2\\\">\\n      <img class=\\\"img1\\\" src=\\\"../../../assets/images/image.png\\\" />\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<section class=\\\"main-container p-35\\\" [ngClass]=\\\"{ 'h-100-per' : !house_id }\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-auto offset-xl-2\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"openModal('go_back', 'feedmedconsumption_create')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <h1 class=\\\"heading\\\">Add new monthly record</h1>\\n            <p class=\\\"sub-heading\\\">For this month of {{ monthdatetoday | date : 'MMMM yyyy' }}</p>\\n        </div>\\n    </div>\\n    <form [formGroup]=\\\"medicineConsumptionForm\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-8 offset-xl-2\\\">\\n                <div class=\\\"container-card view-record\\\">\\n                        <div class=\\\"p-30\\\">\\n                            <h1 class=\\\"heading\\\">Record Details</h1>\\n                        </div>\\n                        <div class=\\\"pr-30 pl-30 pb-30\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-secondary\\\">House/Building no. <span class=\\\"required\\\">*</span></label>\\n                                        <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"house_id\\\" placeholder=\\\"Please select a house/bldg no.\\\" (selectionChange)=\\\"getHousedetails($event)\\\">\\n                                            <mat-option *ngFor=\\\"let house of house_options\\\" [value]=\\\"house.id\\\">House/bldg no. {{ house.house_name }}</mat-option>\\n                                        </mat-select>\\n                                        <ng-container *ngIf=\\\"medicineConsumptionForm.controls.house_id.touched\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"medicineConsumptionForm.controls.house_id.hasError('required')\\\">House is required</p>\\n                                        </ng-container>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-secondary\\\">Add Beginning Population of Chickens <span class=\\\"required\\\">*</span></label>\\n                                        <div class=\\\"input-group\\\">\\n                                            <ng-container *ngIf=\\\"disable_main_input\\\">\\n                                                <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"bird_count\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\" [disabled]=\\\"disable_main_input\\\" disabled/>\\n                                            </ng-container>\\n                                            <ng-container *ngIf=\\\"!disable_main_input\\\">\\n                                                <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"bird_count\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\" [disabled]=\\\"disable_main_input\\\"/>\\n                                            </ng-container>\\n                                        </div>\\n                                        <ng-container *ngIf=\\\"medicineConsumptionForm.controls.bird_count.touched\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"medicineConsumptionForm.controls.bird_count.hasError('required')\\\">Beginning population is\\n                                                required</p>\\n                                        </ng-container>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-secondary\\\">Beginning age of Chickens<span class=\\\"required\\\">*</span></label>\\n                                            <div class=\\\"input-group\\\">\\n                                                <div class=\\\"input-group-prepend\\\">\\n                                                    <span class=\\\"input-group-text mb-10\\\">Weeks</span>\\n                                                </div>\\n                                                <ng-container *ngIf=\\\"disable_main_input\\\">\\n                                                    <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"age_week\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\" disabled/>\\n                                                </ng-container>\\n                                                <ng-container *ngIf=\\\"!disable_main_input\\\">\\n                                                    <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"age_week\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\"/>\\n                                                </ng-container>\\n                                            </div>\\n                                        <ng-container *ngIf=\\\"medicineConsumptionForm.controls.age_week.touched\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"medicineConsumptionForm.controls.age_week.hasError('required')\\\">Week is\\n                                                required</p>\\n                                        </ng-container>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-secondary\\\"><span class=\\\"required\\\"></span></label>\\n                                        <div class=\\\"input-group\\\">\\n                                            <div class=\\\"input-group-prepend\\\">\\n                                                <span class=\\\"input-group-text mb-10\\\">Days</span>\\n                                            </div>\\n                                            <ng-container *ngIf=\\\"disable_main_input\\\">\\n                                                <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"age_day\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\" disabled/>\\n                                            </ng-container>\\n                                            <ng-container *ngIf=\\\"!disable_main_input\\\">\\n                                                <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"age_day\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\"/>\\n                                            </ng-container>\\n                                        </div>\\n                                        <ng-container *ngIf=\\\"medicineConsumptionForm.controls.age_day.touched\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"medicineConsumptionForm.controls.age_day.hasError('required')\\\">Day is\\n                                                required</p>\\n                                        </ng-container>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    \\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row pt-30\\\" *ngIf=\\\"house_id && medicine && medicine.length > 0\\\">\\n            <div class=\\\"col-xl-8 offset-xl-2\\\">\\n                <div class=\\\"container-card view-record\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading\\\">Prescribed Medicine per day</h1>\\n                    </div>\\n                    <div class=\\\"pr-30 pl-30 pb-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-12 col-lg-12 col-md-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-1\\\">\\n                                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Day</p>\\n                                        </div>\\n                                        <div class=\\\"col-11\\\">\\n                                            <p class=\\\"mini-heading fs-16 mb-10 font-weight-normal\\\">Medicine Name</p>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"row\\\" *ngFor=\\\"let day of days; let i = index\\\" [ngClass]=\\\"{ 'mb-30 border-bottom' : i < days.length - 1 }\\\">\\n                                    <div class=\\\"col-xl-1 col-lg-1 col-md-1\\\">\\n                                        <p class=\\\"mini-heading mb-10 mt-10 fs-16 fw-500\\\">{{ day.day | date : 'dd' }}</p>\\n                                    </div>\\n                                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 mb-30\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                                <div class=\\\"form-group\\\">\\n                                                    <label class=\\\"fs-16 mb-10\\\">Choose a feed</label>\\n                                                    <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" placeholder=\\\"Please choose feed\\\" [value]=\\\"medicine[i].feed.feed_id\\\" (selectionChange)=\\\"chooseFeed($event, i)\\\" [disabled]=\\\"medicine[i].day <= (date_today | date : 'yyyy-MM-dd') ? true : false\\\">\\n                                                        <mat-option *ngFor=\\\"let feed of feed_options\\\" [value]=\\\"feed.id\\\">{{ feed.feed }}</mat-option>\\n                                                    </mat-select>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                                <div class=\\\"form-group\\\">\\n                                                    <label class=\\\"fs-16 mb-10\\\">Feed Consumption</label>\\n                                                    <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\" (input)=\\\"setFeedValue($event.target.value, i)\\\" [value]=\\\"medicine[i].feed.feed_consumption\\\" [disabled]=\\\"medicine[i].day <= (date_today | date : 'yyyy-MM-dd') ? true : false\\\"/>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\" *ngFor=\\\"let med of medicines; let x = index\\\">\\n                                                <mat-checkbox [value]=\\\"med.id\\\" (change)=\\\"checkbox($event, i, x)\\\" [checked]=\\\"medicine[i].med[x].value > 0 ? true : false\\\" [disabled]=\\\"medicine[i].day <= (date_today | date : 'yyyy-MM-dd') ? true : false\\\">{{ med.medicine }}</mat-checkbox>\\n                                            <div class=\\\"input-group\\\">\\n                                                <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" placeholder=\\\"0\\\" (input)=\\\"setMedvalue($event.target.value,i,x)\\\" [value]=\\\"medicine[i].med[x].value\\\" [disabled]=\\\"medicine[i].day <= (date_today | date : 'yyyy-MM-dd') ? true : false\\\"/>\\n                                                <div class=\\\"input-group-append\\\">\\n                                                    <span class=\\\"input-group-text mb-10\\\">{{ med.medicine_unit.unit }}</span>\\n                                                </div> \\n                                            </div>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <!-- <div class=\\\"col-lg-5 mt-30 mb-30\\\">\\n                                    <button mat-flat-button class=\\\"btn btn-primary btn-block\\\">\\n                                        <i class=\\\"icon-add\\\"></i>\\n                                        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\" (click)=\\\"addDay()\\\">Add Daily\\n                                            Medication</span>\\n                                    </button>\\n                                </div> -->\\n                                <hr class=\\\"m-0\\\">\\n                                <div class=\\\"p-30 fixed-div\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"openModal('form_cancel', 'feedmedconsumption_create')\\\">\\n                                                Cancel\\n                                            </button>\\n                                        </div>\\n                                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(medicineConsumptionForm.value, 'medicine_add')\\\">\\n                                                Save Changes\\n                                            </button>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </form>\\n</section>\\n<!-- <div class=\\\"footer\\\" #footer>\\n    Your sticky footer with a variable height.\\n</div>\\n<footer fxFlexOffset=\\\"auto\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row row mt-20 mb-20\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"openModal('form_cancel', 'feedmedconsumption_create')\\\">\\n                    Cancel\\n                </button>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(medicineConsumptionForm.value, 'medicine_add')\\\">\\n                    Save Changes\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n</footer> -->\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n      <h1 class=\\\"heading\\\">Customer Management</h1>\\n      <p class=\\\"sub-heading mb-8\\\">Total number of customers: <strong>{{ totalItems }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.update_at\\\">last updated {{ activity.update_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.update_at\\\" [theme]=\\\"{\\n          'border-radius' : '5px',\\n          'margin-bottom' : '10px',\\n          'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n      <button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/customers/create\\\">\\n        <i class=\\\"icon-add\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new customer</span>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-4 offset-xl-3 col-lg-4 offset-lg-5 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td>{{ item.customer_id }}</td>\\n                <td>{{ item.profile_first_name }} {{ item.profile_last_name }}</td>\\n                <td>{{ item.customer_type ? item.customer_type.type : '' }}</td>\\n                <td>{{ item.contact_number ? '+63' : '' }}<span *ngIf=\\\"item.contact_number\\\">{{item.contact_number}}</span></td>\\n                <td>{{ item.address_address }}</td>\\n                <td>{{ item.created_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                <td>\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/customers/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n              <a (click)=\\\"gotoPage(prev_page)\\\">\\n                  Previous\\n              </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n              <a (click)=\\\"gotoPage(next_page)\\\">\\n                  Next\\n              </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Monthly Record</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"row ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n                    <h1 class=\\\"heading\\\">House/Building Details</h1>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"row mb-30\\\">\\n                <div class=\\\"col-12\\\">\\n                    <div class=\\\"container-card view-record p-0\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                                    <table>\\n                                        <tbody>\\n                                            <tr>\\n                                                <td class=\\\"w-30-per alt\\\">House/Building</td>\\n                                                <td class=\\\"w-70-per\\\">\\n                                                    <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.house }}</ng-container>\\n                                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                        'border-radius': '5px',\\n                                                        'margin-bottom': '0px',\\n                                                        'height': '20px',\\n                                                        'width': '50%'\\n                                                    }\\\"></ngx-skeleton-loader>\\n                                                </td>\\n                                            </tr>\\n                                            <tr>\\n                                                <td class=\\\"w-30-per alt\\\">Daily Report Progress</td>\\n                                                <td class=\\\"w-70-per\\\">\\n                                                    <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.daily_report_progress }}</ng-container>\\n                                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                        'border-radius': '5px',\\n                                                        'margin-bottom': '0px',\\n                                                        'height': '20px',\\n                                                        'width': '50%'\\n                                                    }\\\"></ngx-skeleton-loader>\\n                                                </td>\\n                                            </tr>\\n                                            <tr>\\n                                                <td class=\\\"w-30-per alt\\\">Month</td>\\n                                                <td class=\\\"w-70-per\\\">\\n                                                    <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.current_age_of_chicken ? (house_data.current_age_of_chicken.created_at | date : 'MMMM') : '' }}</ng-container>\\n                                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                        'border-radius': '5px',\\n                                                        'margin-bottom': '0px',\\n                                                        'height': '20px',\\n                                                        'width': '50%'\\n                                                    }\\\"></ngx-skeleton-loader>\\n                                                </td>\\n                                            </tr>\\n                                            <tr>\\n                                                <td class=\\\"w-30-per alt\\\">Year</td>\\n                                                <td class=\\\"w-70-per\\\">\\n                                                    <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.current_age_of_chicken ? (house_data.current_age_of_chicken.created_at | date : 'yyyy') : '' }}</ng-container>\\n                                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                        'border-radius': '5px',\\n                                                        'margin-bottom': '0px',\\n                                                        'height': '20px',\\n                                                        'width': '50%'\\n                                                    }\\\"></ngx-skeleton-loader>\\n                                                </td>\\n                                            </tr>\\n                                            <tr>\\n                                                <td class=\\\"w-30-per alt\\\">Beginning Population of Chickens</td>\\n                                                <td class=\\\"w-70-per\\\">\\n                                                    <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.beginning_population }}</ng-container>\\n                                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                        'border-radius': '5px',\\n                                                        'margin-bottom': '0px',\\n                                                        'height': '20px',\\n                                                        'width': '50%'\\n                                                    }\\\"></ngx-skeleton-loader>\\n                                                </td>\\n                                            </tr>\\n                                            <tr>\\n                                                <td class=\\\"w-30-per alt\\\">Age of Chickens</td>\\n                                                <td class=\\\"w-70-per\\\">\\n                                                    <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.age_chicken.age }}</ng-container>\\n                                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                        'border-radius': '5px',\\n                                                        'margin-bottom': '0px',\\n                                                        'height': '20px',\\n                                                        'width': '50%'\\n                                                    }\\\"></ngx-skeleton-loader>\\n                                                </td>\\n                                            </tr>\\n                                        </tbody>\\n                                    </table>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n                    <h1 class=\\\"heading\\\">Feeds and Medicine Consumption Daily Report</h1>\\n                </div>\\n            </div>\\n        \\n            <div class=\\\"container-card p-0\\\">\\n                <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                        <th class=\\\"p-10 fs-12\\\">{{ th.label }}</th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <ng-container *ngIf=\\\"isLoaded && feeds_and_medicine.length > 0\\\">\\n                                    <ng-container *ngFor=\\\"let feeds_medicine of feeds_and_medicine; let i = index\\\">\\n                                        <tr>\\n                                            <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.created_at | date: 'd' }}</td>\\n                                            <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-12\\\">\\n                                                {{ feeds_medicine.age_week > 1 ? feeds_medicine.age_week+' weeks' : feeds_medicine.age_week+' week' }},\\n                                                {{ feeds_medicine.age_day > 1 ? feeds_medicine.age_day+' days' : feeds_medicine.age_day+' day' }}</td>\\n                                            <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.mortality }}</td>\\n                                            <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.mortality_rate | percent:'1.1-2' }}</td>\\n                                            <td *ngIf=\\\"ths[4].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.cull }}</td>\\n                                            <td *ngIf=\\\"ths[5].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.end_bird_population }}</td>\\n                                            <td *ngIf=\\\"ths[6].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.real_egg_count }}</td>\\n                                            <td *ngIf=\\\"ths[7].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.production_rate | number:'2.1-2' }}%</td>\\n                                            <td *ngIf=\\\"ths[8].isVisible\\\" class=\\\"p-10 fs-12\\\">\\n                                                {{ feeds_medicine.feed_info ? feeds_medicine.feed_info.feed : '' }} ({{ feeds_medicine.feed_consumption }} g)</td>\\n                                            <td *ngIf=\\\"ths[9].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.feeds ? feeds_medicine.feeds.string : '' }}</td>\\n                                            <td *ngIf=\\\"ths[10].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.feed_info ? feeds_medicine.feed_info.feed : '' }} ({{ feeds_medicine.rec_feed_consumption }} g)</td>\\n                                            <td *ngIf=\\\"ths[11].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ feeds_medicine.req_feeds ? feeds_medicine.req_feeds.string : '' }}</td>\\n                                            <td *ngIf=\\\"ths[12].isVisible\\\" class=\\\"p-10 fs-12\\\">\\n                                                <ng-container *ngFor=\\\"let med of feeds_medicine.medicine_name; let m = index\\\">\\n                                                    {{ med.medicine }} ({{ med.medicine_value }} {{ med.medicine_unit.unit }}){{ m < feeds_medicine.medicine_name.length - 1 ? ',' : '' }}<br *ngIf=\\\"m < feeds_medicine.medicine_name.length - 1\\\">\\n                                                </ng-container>\\n                                            </td>\\n                                        </tr>\\n                                    </ng-container>\\n                                </ng-container>\\n        <!--                         <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                    <tr>\\n                                        <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                            <ngx-skeleton-loader [theme]=\\\"{\\n                                                'border-radius' : '5px',\\n                                                'margin-bottom' : '0px',\\n                                                'height' : '20px'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container> -->\\n                                <ng-container *ngIf=\\\"isLoaded && feeds_and_medicine.length == 0\\\">\\n                                    <tr>\\n                                        <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                            <tfoot>\\n                                <tr>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                        <th class=\\\"p-10 fs-12\\\">{{ th.label }}</th>\\n                                    </ng-container>\\n                                </tr>\\n                            </tfoot>\\n                        </table>\\n                    </div>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-12 col-lg-4 text-center\\\">\\n                            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n                        </div>\\n                    </div>\\n                </ng-container>\\n            </div>\\n\\n\\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-20\\\">\\n        <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n            <h1 class=\\\"heading\\\">View Price Trend</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-12 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30 mb-25\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <h6 class=\\\"card-heading\\\">Filters</h6>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"type\\\" (selectionChange)=\\\"changeType($event)\\\" placeholder=\\\"Egg Size\\\">\\n                                <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                            </mat-select>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Range - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Range' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n                        Clear Filters\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30 mb-25\\\">\\n        <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <!-- <p class=\\\"mb-10\\\">Overall Harvested Eggs</p> -->\\n                <h1 class=\\\"heading\\\"><span class=\\\"sub-heading\\\">Egg Size: </span>{{ type_name }}</h1>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"downloadModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                    <i class=\\\"icon-download\\\"></i>\\n                    <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                    <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                <canvas baseChart \\n                    [datasets]=\\\"lineChartData\\\"\\n                    [labels]=\\\"lineChartLabels\\\"\\n                    [options]=\\\"lineChartOptions\\\"\\n                    [plugins]=\\\"lineChartPlugins\\\"\\n                    [legend]=\\\"lineChartLegend\\\"\\n                    [chartType]=\\\"lineChartType\\\">\\n                </canvas>\\n            </div>\\n            <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>All Dates</p>\\n            </div>\\n            <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0\\\">Price Table</p>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table>\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                    <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                        <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                            <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.updated_at | date: 'MM/dd/yyyy' }}</td>\\n                            <td *ngIf=\\\"ths[1].isVisible\\\">₱ {{ item.price | number : '1.2-2' }}</td>\\n                        </tr>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"!isLoaded\\\">\\n                        <tr>\\n                            <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius' : '5px',\\n                                    'margin-bottom' : '0px',\\n                                    'height' : '20px'\\n                                }\\\"></ngx-skeleton-loader>\\n                            </td>\\n                        </tr>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                        <tr>\\n                            <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                        </tr>\\n                    </ng-container>\\n                    </tbody>\\n                    <tfoot>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12 ml-auto\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                        <a (click)=\\\"gotoPage(prev_page)\\\">\\n                            Previous\\n                        </a>\\n                    </li>\\n                    <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                        <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                    </ng-container>\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                        <a (click)=\\\"gotoPage(next_page)\\\">\\n                            Next\\n                        </a>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">All Transactions</h1>\\n      <p class=\\\"sub-heading mb-8\\\">Total number of transactions: <strong>{{ totalItems | number }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n            'border-radius' : '5px',\\n            'margin-bottom' : '10px',\\n            'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n      <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/transactions/create\\\">\\n        <i class=\\\"icon-add\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new transaction</span>\\n      </button>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Ordered - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Ordered' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"payment_status\\\" (selectionChange)=\\\"changePaymentStatus($event)\\\" placeholder=\\\"Payment Status\\\">\\n                <mat-option *ngFor=\\\"let item of payment_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"order_status\\\" (selectionChange)=\\\"changeOrderStatus($event)\\\" placeholder=\\\"Order Status\\\">\\n                <mat-option *ngFor=\\\"let item of order_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n            Clear Filters\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group\\\">\\n            <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n              <mat-select-trigger>Column Visibility</mat-select-trigger>\\n              <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n              </ng-container>\\n            </mat-select>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.transaction_id }}</td>\\n                <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.created_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.customer_name }}</td>\\n                <td *ngIf=\\\"ths[3].isVisible\\\">\\n                  <mat-chip-list>\\n                    <mat-chip *ngIf=\\\"item.order_status == 1\\\" color=\\\"primary\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 2\\\" color=\\\"secondary\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 3\\\" color=\\\"warning\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 4\\\" color=\\\"success\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 7 || item.order_status == 8\\\" color=\\\"danger\\\">{{ item.status }}</mat-chip>\\n                  </mat-chip-list>\\n                </td>\\n                <td *ngIf=\\\"ths[4].isVisible\\\">\\n                  <ng-container *ngFor=\\\"let egg of item.order_items; let i = index\\\">\\n                    {{ egg.egg_type.type }}{{ i < item.order_items.length -1 ? ', ':'' }}\\n                  </ng-container>\\n                </td>\\n                <td *ngIf=\\\"ths[5].isVisible\\\">{{ item.total_pieces | number }}</td>\\n                <td *ngIf=\\\"ths[6].isVisible\\\">₱ {{ item.total_price | number : '1.2-2' }}</td>\\n                <td *ngIf=\\\"ths[7].isVisible\\\">{{ item.payment_type }}</td>\\n                <td *ngIf=\\\"ths[8].isVisible\\\">\\n                  <mat-chip-list>\\n                    <mat-chip *ngIf=\\\"item.payment_status == 0\\\" color=\\\"secondary\\\">{{ item.payment_status_label }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.payment_status == 1\\\" color=\\\"success\\\">{{ item.payment_status_label }}</mat-chip>\\n                  </mat-chip-list>\\n                </td>\\n                <td *ngIf=\\\"ths[9].isVisible\\\">\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/transactions/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n            <a (click)=\\\"gotoPage(prev_page)\\\">\\n              Previous\\n            </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n            <a (click)=\\\"gotoPage(next_page)\\\">\\n              Next\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-auto offset-xl-2\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack('go_back', 'medicine_create')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <h1 class=\\\"heading\\\">Add new medicine</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"medicineForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Medicine Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"medicine\\\"/>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.medicine.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.medicine.hasError('required')\\\">Medicine name is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group row\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <label class=\\\"text-secondary\\\">Unit <span class=\\\"required\\\">*</span></label>\\n                                    </div>\\n                                    <div class=\\\"col-10\\\">\\n                                        <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"unit_id\\\" placeholder=\\\"Select a unit of measurement\\\">\\n                                            <mat-option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{ unit.unit }}</mat-option>\\n                                        </mat-select>\\n                                    </div>\\n                                    <div class=\\\"col-2 pl-0\\\">\\n                                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\">\\n                                            <i class=\\\"icon-add\\\"></i>\\n                                        </button>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.unit_id.touched\\\">\\n                                        <div class=\\\"col-12\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.unit_id.hasError('required')\\\">Unit is required</p>\\n                                        </div>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Net weight <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"net_weight\\\" placeholder=\\\"0\\\"/>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.net_weight.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.net_weight.hasError('required')\\\">Net weight is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.net_weight.hasError('min')\\\">Net weight must not be less than 0</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.net_weight.hasError('max')\\\">Net weight must not exceed 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">No. of Orders <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"pieces\\\" placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">pcs</span>\\n                                        </div>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.pieces.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.pieces.hasError('required')\\\">Number of orders is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.pieces.hasError('min')\\\">Number of orders must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Delivery Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [max]=\\\"max_date\\\" [matDatepicker]=\\\"delivery_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"delivery_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"delivery_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #delivery_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.delivery_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.delivery_date.hasError('required')\\\">Delivery date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Unit Price <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">Php</span>\\n                                        </div>\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"unit_price\\\" placeholder=\\\"0.00\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.unit_price.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.unit_price.hasError('required')\\\">Price is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.unit_price.hasError('min')\\\">Price must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Expiration Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [min]=\\\"min_date\\\" [matDatepicker]=\\\"expiration_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"expiration_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"expiration_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #expiration_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.expiration_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.expiration_date.hasError('required')\\\">Expiration date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Remarks</label>\\n                                    <textarea class=\\\"form-control mb-10\\\" rows=\\\"3\\\" maxlength=\\\"250\\\" formControlName=\\\"remarks\\\"></textarea>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.remarks.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.remarks.hasError('maxlength')\\\">Remarks should not exceed 250 characters</p>\\n                                    </ng-container>\\n                                    <p class=\\\"text-right text-secondary\\\">{{ medicineForm.controls.remarks.value.length }}/250</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"goBack('form_cancel', 'medicine_create')\\\">\\n                                    Cancel\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(medicineForm.value, 'medicine_save')\\\" [disabled]=\\\"!medicineForm.valid\\\">\\n                                    <i class=\\\"icon-add\\\"></i>\\n                                    <span class=\\\"ml-15\\\">Add Item</span>\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \".fixed-div {\\n  position: fixed;\\n  bottom: 0;\\n  /* right: 0; */\\n  width: 20%;\\n  height: 15%;\\n  left: 65%;\\n}\"","export default \"\"","export default \"\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h3 class=\\\"mt-25\\\">Gapan Fresh Eggs, Inc.</h3>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h5 class=\\\"mb-30\\\">Egg Price Report</h5>\\n            </div>\\n        </div>\\n        <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        \\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible && th.canToggle\\\" class=\\\"p-10 fs-12\\\">\\n                                    {{ th.label }}\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\" [ngClass]=\\\"{'break-now' : (i + 1) % 11 == 0}\\\">\\n                                    <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.egg_type_type }}</td>\\n                                    <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-12\\\">₱ {{ item.per_piece | number : '1.2-2' }}</td>\\n                                    <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"p-10 fs-12\\\">₱ {{ item.per_tray | number : '1.2-2' }}</td>\\n                                    <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"p-10 fs-12\\\">₱ {{ item.per_case | number : '1.2-2' }}</td>\\n                                    <td *ngIf=\\\"ths[4].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.updated_at | date: 'MM/dd/yyyy' }}</td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                                </ng-container>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        \\n        <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 h-22\\\"></p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n      <div class=\\\"col-auto\\\">\\n        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n          <i class=\\\"icon-back\\\"></i>\\n          <span class=\\\"ml-15\\\">Go back</span>\\n        </button>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n        <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" [routerLink]=\\\"['/transactions/payments/print', order_id, 'view']\\\">\\n          <i class=\\\"icon-add\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Generate Forms</span>\\n        </button>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3\\\">\\n        <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(null, 'attachment_create')\\\">\\n          <i class=\\\"icon-add\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Upload Signed Form</span>\\n        </button>\\n      </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n      <div class=\\\"col-12\\\">\\n          <h1 class=\\\"heading\\\">View Payment</h1>\\n          <ng-container *ngIf=\\\"showtimeago\\\">\\n            <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n            <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                'border-radius' : '5px',\\n                'margin-bottom' : '10px',\\n                'height' : '20px'\\n            }\\\"></ngx-skeleton-loader>\\n          </ng-container>\\n      </div>\\n    </div>\\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <h6 class=\\\"card-heading\\\">Filters</h6>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date' }}\\n                  <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                </button>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"container-card p-30 mb-30\\\">\\n      <div class=\\\"row mb-25\\\">\\n        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\n          <p class=\\\"mini-heading mb-10\\\">Official Receipts</p>\\n        </div>\\n        <!-- <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div> -->\\n        <!-- <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"inner-group\\\">\\n                  <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                    <mat-select-trigger>Column Visibility</mat-select-trigger>\\n                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                      <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                    </ng-container>\\n                  </mat-select>\\n                </div>\\n            </div>\\n        </div> -->\\n        <!-- <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group search\\\">\\n              <i class=\\\"icon-search\\\"></i>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n                (keydown.enter)=\\\"searchItem()\\\" />\\n            </div>\\n          </div>\\n        </div> -->\\n        <!-- <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n              <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n              <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n            </button>\\n          </div>\\n        </div> -->\\n      </div>\\n      <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table>\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                    <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.attachment_no }}</td>\\n                    <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.payment_amount }}</td>\\n                    <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.user_profile_first_name }} {{ item.user_profile_last_name }}</td>\\n                    <td *ngIf=\\\"ths[3].isVisible\\\">{{ item.updated_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                    <td *ngIf=\\\"ths[4].isVisible\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'attachment_update')\\\">\\n                            <i class=\\\"icon-datatables-view\\\"></i>\\n                            View\\n                        </button>\\n                        <button mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'attachment_delete')\\\">\\n                          <i class=\\\"icon-datatables-delete\\\"></i>\\n                          Delete\\n                        </button>\\n                    </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n      <!-- <div class=\\\"row mt-35\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n          <ul class=\\\"paginate pull-right\\\">\\n            <li class=\\\"link\\\" *ngIf=\\\"prev_page\\\">\\n                <a (click)=\\\"gotoPage(prev_page)\\\">\\n                    Previous\\n                </a>\\n            </li>\\n            <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n              <li (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n            </ng-container>\\n            \\n            <li class=\\\"link\\\" *ngIf=\\\"next_page\\\">\\n                <a (click)=\\\"gotoPage(next_page)\\\">\\n                    Next\\n                </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div> -->\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n      <div class=\\\"row mb-25\\\">\\n        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\n          <p class=\\\"mini-heading mb-10\\\">Signed Forms</p>\\n        </div>\\n        <!-- <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div> -->\\n        <!-- <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"inner-group\\\">\\n                  <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                    <mat-select-trigger>Column Visibility</mat-select-trigger>\\n                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                      <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                    </ng-container>\\n                  </mat-select>\\n                </div>\\n            </div>\\n        </div> -->\\n        <!-- <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group search\\\">\\n              <i class=\\\"icon-search\\\"></i>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n                (keydown.enter)=\\\"searchItem()\\\" />\\n            </div>\\n          </div>\\n        </div> -->\\n        <!-- <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n              <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n              <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n            </button>\\n          </div>\\n        </div> -->\\n      </div>\\n      <ng-container *ngIf=\\\"visible_columns_others.length > 1\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table>\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths_others; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items_others.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items_others; let i = index\\\">\\n                    <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.type_label }}</td>\\n                    <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.user_profile_first_name }} {{ item.user_profile_last_name }}</td>\\n                    <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.updated_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                    <td *ngIf=\\\"ths[3].isVisible\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'attachment_update')\\\">\\n                            <i class=\\\"icon-datatables-view\\\"></i>\\n                            View\\n                        </button>\\n                        <button mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'attachment_delete')\\\">\\n                          <i class=\\\"icon-datatables-delete\\\"></i>\\n                          Delete\\n                        </button>\\n                    </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns_others.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items_others.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns_others.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths_others; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns_others.length == 1\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n      <!-- <div class=\\\"row mt-35\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n          <ul class=\\\"paginate pull-right\\\">\\n            <li class=\\\"link\\\" *ngIf=\\\"prev_page\\\">\\n                <a (click)=\\\"gotoPage(prev_page)\\\">\\n                    Previous\\n                </a>\\n            </li>\\n            <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n              <li (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n            </ng-container>\\n            \\n            <li class=\\\"link\\\" *ngIf=\\\"next_page\\\">\\n                <a (click)=\\\"gotoPage(next_page)\\\">\\n                    Next\\n                </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div> -->\\n    </div>\\n  </section>\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary\\\" (click)=\\\"goBack()\\\">\\n                <i class=\\\"material-icons\\\">arrow_back</i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Tray Inventory/Stocks</h1>\\n            <p class=\\\"sub-heading mb-8\\\">Date: <strong>{{ items.created_at | date: 'MMMM dd, yyyy' }}</strong></p>\\n            <p class=\\\"sub-heading mb-8\\\">Warehouseman: <strong>{{ items.name }}</strong></p>\\n            <ng-container *ngIf=\\\"showtimeago\\\">\\n              <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.created_at\\\">last updated {{ activity.created_at | timeago }}</p>\\n              <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.created_at\\\" [theme]=\\\"{\\n                  'border-radius' : '5px',\\n                  'margin-bottom' : '10px',\\n                  'height' : '20px'\\n              }\\\"></ngx-skeleton-loader>\\n            </ng-container>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" [disabled]=\\\"!isLoaded\\\">\\n            <i class=\\\"icon-download\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n            <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n          </button>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" [disabled]=\\\"!isLoaded\\\">\\n            <i class=\\\"icon-download\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n            <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n          </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>Beginning stocks</p>\\n                <h1 class=\\\"heading\\\">{{ items.beginning_stock | number  }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>In/Return of Stocks</p>\\n                <h1 class=\\\"heading\\\">{{ items.returned | number  }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>No. of Out/Sales</p>\\n                <h1 class=\\\"heading\\\">{{ items.number_of_out_sales | number  }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>Total Remaining for this day</p>\\n                <h1 class=\\\"heading\\\">{{ items.total_remaining | number  }}</h1>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n      <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items.tray_inventory_report.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items.tray_inventory_report; let i = index\\\">\\n                  <td>{{ item.tray_type.type }}</td>\\n                  <td>{{ item.total_end > 0 ? 'Available' : 'Out of Stock' }}</td>\\n                  <td>{{ item.last_data ? (item.last_data.total_end | number) : 0  }}</td>\\n                  <td>{{ item.in_return | number }}</td>\\n                  <td>{{ item.sorting | number }}</td>\\n                  <td>{{ item.marketing | number }}</td>\\n                  <td>{{ item.out_hiram | number }}</td>\\n                  <td>{{ item.total_end }}</td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items.tray_inventory_report.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n    </div>\\n  </section>\"","export default \"\"","export default \"\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"houseForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <ng-container *ngIf=\\\"action == 'delete'\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"action != 'delete'\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">Enter House/Building no. <span class=\\\"required\\\">*</span></label>\\n                    <input type=\\\"number\\\" formControlName=\\\"house_name\\\" class=\\\"form-control mb-10\\\"/>\\n                    <ng-container *ngIf=\\\"houseForm.controls.house_name.touched\\\">\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"houseForm.controls.house_name.hasError('required')\\\">House name is required</p>\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"houseForm.controls.house_name.hasError('pattern')\\\">House/Building no. must be a whole number</p>\\n                    </ng-container>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">Enter Chicken Capacity <span class=\\\"required\\\">*</span></label>\\n                    <input type=\\\"number\\\" formControlName=\\\"capacity\\\" class=\\\"form-control mb-10\\\"/>\\n                    <ng-container *ngIf=\\\"houseForm.controls.capacity.touched\\\">\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"houseForm.controls.capacity.hasError('required')\\\">Capacity is required</p>\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"houseForm.controls.capacity.hasError('min') && !item\\\">Capacity must be a whole number</p>\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"houseForm.controls.capacity.hasError('min') && item && item.beginning\\\">Capacity must be more than the beginning bird count from the existing daily report</p>\\n                    </ng-container>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <div class=\\\"row\\\">\\n        <ng-container *ngIf=\\\"action=='create' || action=='edit' || (action=='delete' && item.canDelete)\\\">\\n            <div class=\\\"col-6 text-right\\\">\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\" [disabled]=\\\"isLoading\\\">Cancel</button>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"{'btn-primary' : action != 'delete', 'btn-danger' : action == 'delete' }\\\" [disabled]=\\\"!houseForm.valid || isLoading\\\">{{ modal_primary_button }}</button>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"action == 'delete' && !item.canDelete\\\">\\n            <div class=\\\"col-6 ml-auto\\\">\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-block btn-primary\\\" (click)=\\\"closeModal()\\\">{{ modal_primary_button }}</button>\\n            </div>\\n        </ng-container>\\n    </div>\\n</form>\\n\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-auto offset-xl-2\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack('go_back', 'staff_create')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <h1 class=\\\"heading\\\">Add new staff</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"userForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading\\\">Basic Info.</h1>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Select a role <span class=\\\"required\\\">*</span></label>\\n                                    <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"role\\\" placeholder=\\\"Select staff role\\\" (selectionChange)=\\\"changeRole($event)\\\">\\n                                        <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.value\\\">{{ role.label }}</mat-option>\\n                                    </mat-select>\\n                                    <ng-container *ngIf=\\\"userForm.controls.role.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.role.hasError('required')\\\">Staff role is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">First Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"first_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.first_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.first_name.hasError('required')\\\">First name is\\n                                            required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.first_name.hasError('maxLength')\\\">First name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Last Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"last_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.last_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.last_name.hasError('required')\\\">\\n                                            Last name is required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.last_name.hasError('maxLength')\\\">Last name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Username <span\\n                                            class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"username\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.username.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.username.hasError('required')\\\">Username is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.username.hasError('maxLength')\\\">Username must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\" *ngIf=\\\"userForm.controls.role.value == 4 || userForm.controls.role.value == 5\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Email <span\\n                                            class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"email\\\" formControlName=\\\"email\\\" maxlength=\\\"50\\\" minlength=\\\"6\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.email.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.email.hasError('required')\\\">Email is required</p>\\n                                            <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.email.hasError('pattern')\\\">Email is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('maxLength')\\\">Email must not exceed 50 characters</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('minLength')\\\">Email must not contain at least 6 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Mobile Phone <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">+63</span>\\n                                        </div>\\n                                        <input type=\\\"tel\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"number\\\" placeholder=\\\"xxx xxx xxxx\\\" maxlength=\\\"10\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"userForm.controls.number.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('required')\\\">\\n                                            Mobile phone is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('pattern')\\\">\\n                                            Mobile phone is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('maxlength')\\\">\\n                                            Mobile phone must not exceed 10 digits</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('minlength')\\\">\\n                                            Mobile phone must be atleast 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Address <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"location\\\" maxlength=\\\"60\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.location.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.location.hasError('required')\\\">\\n                                            Address is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.location.hasError('maxlength')\\\">Address must not exceed 60 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading mb-30\\\">Profile Photo</h1>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-3\\\">\\n                                <img *ngIf=\\\"!isProfileImageLoaded\\\" class=\\\"avatar img-responsive\\\" src=\\\"../../../../../assets/images/profile.svg\\\">\\n                                <image-cropper \\n                                    class=\\\"avatar img-responsive {{isProfileImageLoaded ? '' : 'd-none' }}\\\"\\n                                    [imageChangedEvent]=\\\"profilePhoto\\\"\\n                                    [maintainAspectRatio]=\\\"true\\\"\\n                                    [aspectRatio]=\\\"5 / 5\\\"\\n                                    [resizeToWidth]=\\\"100\\\"\\n                                    format=\\\"png,jpg,jpeg,ico\\\"\\n                                    (imageCropped)=\\\"imageProfilePhotoCropped($event)\\\"\\n                                    (imageLoaded)=\\\"imageProfileLoaded()\\\"\\n                                    [autoCrop]= \\\"true\\\"\\n                                ></image-cropper>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-10 col-sm-9 col-9\\\">\\n                                <p>Choose a file to upload:</p>\\n                                <div class=\\\"form-group row\\\">\\n                                    <input id=\\\"file-upload\\\" class=\\\"d-none\\\" type=\\\"file\\\" (change)=\\\"fileChange($event)\\\" accept=\\\"image/jpeg, image/png\\\"/>\\n                                    <div class=\\\"col-6\\\">\\n                                        <label for=\\\"file-upload\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\">\\n                                            Choose a file\\n                                        </label>\\n                                    </div>\\n                                    <div class=\\\"col-6 flex-align-center\\\" *ngIf=\\\"!isProfileImageLoaded\\\">\\n                                        <p class=\\\"m-0 font-italic\\\">No file chosen</p>\\n                                    </div>\\n                                </div>\\n                                <p class=\\\"text-danger\\\" *ngIf=\\\"profileUploadWrongFile\\\">Image is not valid</p>\\n                                <p class=\\\"text-danger\\\" *ngIf=\\\"uploadMaxLimitReached\\\">Image must not exceed 1MB</p>\\n                            </div>\\n                            <div class=\\\"col-xl-4 col-lg-4 col-md-12\\\">\\n                                <p class=\\\"note fs-12\\\">Maximum image file size is 1MB. Try resizing it to atleast 500x500 px in resolution.</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\"\\n                                    (click)=\\\"goBack('go_back', 'staff_create')\\\">\\n                                    Back\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\"\\n                                    (click)=\\\"openModal(userForm.value, 'user_add')\\\" [disabled]=\\\"!userForm.valid\\\">\\n                                    <i class=\\\"icon-add\\\"></i>\\n                                    <span class=\\\"ml-15\\\">Add new staff</span>\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Harvest Performance Report</h1>\\n            <!-- <ng-container *ngIf=\\\"showtimeago\\\">\\n                <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '10px',\\n                    'height' : '20px'\\n                }\\\"></ngx-skeleton-loader>\\n            </ng-container> -->\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12\\\">\\n                <p class=\\\"mb-10\\\">Harvested production per house/building</p>\\n                <ng-container *ngIf=\\\"showtimeago\\\">\\n                    <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                    <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                        'border-radius' : '5px',\\n                        'margin-bottom' : '10px',\\n                        'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                </ng-container>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <div class=\\\"inner-group in-line\\\">\\n                                <label class=\\\"mr-15\\\">Show:</label>\\n\\n                                <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"All house/building\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                                    <mat-select-trigger>All house/building</mat-select-trigger>\\n                                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                                        <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                                    </ng-container>\\n                                </mat-select>\\n\\n                                <!-- <mat-select multiple class=\\\"btn btn-drop-down text-left\\\" placeholder=\\\"All egg type\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_eggs\\\">\\n                                    <mat-select-trigger>All egg type</mat-select-trigger>\\n                                    <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                                </mat-select> -->\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                    \\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\" *ngIf=\\\"from && to\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"row mb-30\\\">\\n            <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-10\\\">Overall Harvested Eggs</p>\\n                <h1 class=\\\"heading\\\">{{ overall_harvested_eggs | number }}</h1>\\n            </div> -->\\n        </div>\\n        <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                <canvas baseChart \\n                    [datasets]=\\\"barChartData\\\"\\n                    [labels]=\\\"barChartLabels\\\"\\n                    [options]=\\\"barChartOptions\\\"\\n                    [plugins]=\\\"barChartPlugins\\\"\\n                    [legend]=\\\"barChartLegend\\\"\\n                    [chartType]=\\\"barChartType\\\">\\n                </canvas>\\n            </div>\\n            <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>All Dates</p>\\n            </div>\\n            <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n                        <thead>\\n                            <tr>\\n                                <th class=\\\"sort\\\" (click)=\\\"orderList(true, 'received_by_date', order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    Date\\n                                   <!--  <i *ngIf=\\\"order.order_by_column == 'received_by_date'\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'received_by_date' }\\\"></i> -->\\n                                </th>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                <td>{{ item.grouped_date | date: 'MM/dd/yyyy' }}</td>\\n                                <ng-container *ngFor=\\\"let item of item.house; let i = index\\\">\\n                                    <td *ngIf=\\\"ths[i].isVisible\\\">{{ item && item.daily_sorting_report ? (item.daily_sorting_report.sum | number) : 0 }}</td>\\n                                </ng-container>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius' : '5px',\\n                                    'margin-bottom' : '0px',\\n                                    'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                            </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12 ml-auto\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                    <a (click)=\\\"gotoPage(prev_page)\\\">\\n                        Previous\\n                    </a>\\n                </li>\\n                <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                    <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                </ng-container>\\n                \\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                    <a (click)=\\\"gotoPage(next_page)\\\">\\n                        Next\\n                    </a>\\n                </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack()\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Fresh Eggs Stocks</h1>\\n            <p class=\\\"sub-heading mb-8\\\">Date: <strong>{{ dateToday | date: 'MMMM dd, yyyy' }}</strong></p>\\n            <ng-container *ngIf=\\\"showtimeago\\\">\\n              <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.created_at\\\">last updated {{ activity.created_at | timeago }}</p>\\n              <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.created_at\\\" [theme]=\\\"{\\n                  'border-radius' : '5px',\\n                  'margin-bottom' : '10px',\\n                  'height' : '20px'\\n              }\\\"></ngx-skeleton-loader>\\n            </ng-container>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n            <i class=\\\"icon-download\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n            <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n          </button>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n            <i class=\\\"icon-download\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n            <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n          </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-15 fs-14\\\">\\n                <p>Beginning stocks</p>\\n                <h1 class=\\\"heading\\\">{{ item.beginning_stocks | number }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-15 fs-14\\\">\\n                <p>Harvested Eggs for this day</p>\\n                <h1 class=\\\"heading\\\">{{ item.total_harvested | number }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-15 fs-14\\\">\\n                <p>No. of Waste/Sales</p>\\n                <h1 class=\\\"heading\\\">{{ item.waste_sales | number }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-15 fs-14\\\">\\n                <p>Total Remaining for this day</p>\\n                <h1 class=\\\"heading\\\">{{ item.total_remaining_stocks | number }}</h1>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n      <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                  <td>{{ item.egg_type.type }}</td>\\n                  <td>\\n                    <mat-chip-list>\\n                      <mat-chip *ngIf=\\\"item.remaining > 0\\\" color=\\\"primary\\\">Available</mat-chip>\\n                      <mat-chip *ngIf=\\\"item.remaining == 0\\\" color=\\\"danger\\\">Out of Stock</mat-chip>\\n                    </mat-chip-list>\\n                  </td>\\n                  <td>{{ item.beginning ? (item.beginning | number) : 0  }}</td>\\n                  <td>{{ item.harvested ? (item.harvested | number) : 0  }}</td>\\n                  <td>{{ item.sales ? (item.sales | number) : 0  }}</td>\\n                  <td>{{ item.remaining ? (item.remaining | number) : 0  }}</td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n    </div>\\n  </section>\"","export default \"p {\\n  font-size: 16px;\\n  color: #72787F;\\n  text-transform: none;\\n}\\n\\n.heading {\\n  font-size: 24px;\\n  font-weight: bold;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.sub-heading {\\n  color: #72787F;\\n}\\n\\n.sub-heading.italic {\\n  font-style: italic;\\n}\\n\\n.sub-heading strong {\\n  color: #1E2631;\\n}\\n\\n.mini-heading {\\n  font-size: 20px;\\n  font-weight: 500;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.card-heading {\\n  font-size: 13px;\\n  font-weight: normal;\\n  text-transform: uppercase;\\n  color: #72787F;\\n}\\n\\n.sidebar {\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li {\\n  font-size: 16px;\\n}\\n\\n.sidebar ul li a.main-nav {\\n  color: #72787F;\\n}\\n\\n.sidebar ul li a.main-nav.sub {\\n  font-size: 14px;\\n}\\n\\n.sidebar ul li a.main-nav:hover {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li.active a {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\nmat-checkbox label {\\n  font-size: 16px !important;\\n}\\n\\n.vertical-text {\\n  transform: rotate(-90deg);\\n  -webkit-transform: rotate(-90deg);\\n  -moz-transform: rotate(-90deg);\\n  -ms-transform: rotate(-90deg);\\n  -o-transform: rotate(-90deg);\\n}\\n\\n.vertical-text-full {\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n  position: absolute;\\n  left: -25%;\\n  top: 50%;\\n}\\n\\n.select-type {\\n  padding: 12px 31px;\\n  background: #DDE1E5;\\n  border-radius: 2px 0px 0px 2px;\\n  width: -webkit-fit-content;\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  border-bottom: 2px solid #1E2631;\\n}\\n\\n.select-type p {\\n  color: #1E2631;\\n}\\n\\n.alt {\\n  /* background: color(container, border) !important; */\\n  background: rgba(229, 229, 229, 0.4) !important;\\n}\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Total Sales by Egg Size</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 mb-30 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            \\n            <div class=\\\"row mb-30 ml-0 mr-0 break-now\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                    <canvas baseChart \\n                        [datasets]=\\\"barChartData\\\"\\n                        [labels]=\\\"barChartLabels\\\"\\n                        [options]=\\\"barChartOptions\\\"\\n                        [plugins]=\\\"barChartPlugins\\\"\\n                        [legend]=\\\"barChartLegend\\\"\\n                        [chartType]=\\\"barChartType\\\">\\n                    </canvas>\\n                </div>\\n                <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>All Dates</p>\\n                </div>\\n                <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <th>Date</th>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                    <th *ngIf=\\\"th.isVisible\\\">\\n                                        {{ th.label }}\\n                                    </th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n    \\n                            <tbody>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                    <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                    <td>{{ item.grouped_date | date: 'MM/dd/yyyy' }}</td>\\n                                    <ng-container *ngFor=\\\"let item of item.egg_types; let i = index\\\">\\n                                        <td *ngIf=\\\"ths[i].isVisible\\\">{{ item.total | number }}</td>\\n                                    </ng-container>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                    <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                        <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                        }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                    <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                    </tr>\\n                                </ng-container>\\n                                </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"<div class=\\\"col-6\\\">\\n    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\">\\n      <i class=\\\"icon-download\\\"></i>\\n      <span class=\\\"ml-15\\\">Download as PDF</span>\\n    </button>\\n  </div>\\n  <div class=\\\"col-6\\\">\\n    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\">\\n      <i class=\\\"icon-download\\\"></i>\\n      <span class=\\\"ml-15\\\">Download as CSV</span>\\n    </button>\\n  </div>\"","export default \".order-summary {\\n  background-color: #EAEDF0;\\n}\\n\\nhr.h-2 {\\n  background-color: #72787F;\\n}\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"attachmentForm\\\" (ngSubmit)=\\\"openModal()\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Attachment Type</label>\\n                <mat-select class=\\\"btn btn-drop-down btn-block text-left\\\" formControlName=\\\"type\\\" (selectionChange)=\\\"changeType($event)\\\" placeholder=\\\"Choose attachment type\\\">\\n                    <mat-option *ngFor=\\\"let paymentattachment of paymentattachment_options\\\" [value]=\\\"paymentattachment.value\\\">{{ paymentattachment.label }}</mat-option>\\n                </mat-select>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"attachmentForm.controls.type.value == 1\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Enter Official Receipt no. <span class=\\\"required\\\">*</span></label>\\n                <input type=\\\"text\\\" formControlName=\\\"attachment_no\\\" class=\\\"form-control mb-10\\\"/>\\n                <ng-container *ngIf=\\\"attachmentForm.controls.attachment_no.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"attachmentForm.controls.attachment_no.hasError('required')\\\">Official receipt no. is required</p>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">{{ type_label }} <span class=\\\"required\\\">*</span></label>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12 mb-10\\\" [ngClass]=\\\"{ 'd-none' : !isPhotoLoaded }\\\">\\n                        <image-cropper \\n                            class=\\\"img-responsive\\\"\\n                            [imageChangedEvent]=\\\"photo\\\"\\n                            [maintainAspectRatio]=\\\"false\\\"\\n                            format=\\\"png,jpg,jpeg,ico\\\"\\n                            (imageCropped)=\\\"imagePhotoCropped($event)\\\"\\n                            (imageLoaded)=\\\"imageLoaded()\\\"\\n                            [autoCrop]= \\\"true\\\"\\n                        ></image-cropper>\\n                    </div>\\n                    <div class=\\\"col-12 mb-10\\\" *ngIf=\\\"temp_photo\\\">\\n                        <img class=\\\"img-responsive\\\" [src]=\\\"temp_photo\\\"/>\\n                    </div>\\n                    <div class=\\\"col-auto\\\">\\n                        <input id=\\\"payment-upload\\\" class=\\\"d-none\\\" type=\\\"file\\\" (change)=\\\"photoChange($event)\\\" accept=\\\"image/jpeg, image/png\\\"/>\\n                        <label for=\\\"payment-upload\\\" mat-flat-button class=\\\"btn btn-secondary btn-block\\\">\\n                            {{ isPhotoLoaded || temp_photo ? 'Choose another file' : 'Choose a file' }}\\n                        </label>\\n                    </div>\\n                    <div class=\\\"col-auto flex-align-center\\\" *ngIf=\\\"!isPhotoLoaded && !temp_photo\\\">\\n                        <p class=\\\"m-0 font-italic\\\">No file chosen</p>\\n                    </div>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"photoUploadWrongFile\\\">Attachment is not valid</p>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"uploadPhotoMaxLimitReached\\\">Attachment must not exceed 1MB</p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-6 text-right\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\" [disabled]=\\\"isLoading\\\">Cancel</button>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"{'btn-primary' : action != 'delete', 'btn-danger' : action == 'delete' }\\\" [disabled]=\\\"(!attachmentForm.valid && action != 'delete') || isLoading\\\">{{ modal_primary_button }}</button>\\n        </div>\\n    </div>\\n</form>\"","export default \"\"","export default \"\"","export default \"\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"row mb-30\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"data-table p-relative table-listing h-300\\\" style=\\\"overflow: auto;\\\">\\n            <table>\\n                <tbody>\\n                    <ng-container *ngIf=\\\"isLoaded\\\">\\n                        <tr *ngFor=\\\"let item of items.egg_inventory; let i = index\\\">\\n                            <td class=\\\"w-30-per alt\\\">{{ item.type }}</td>\\n                            <td class=\\\"w-70-per\\\">\\n                                <ng-container>{{ item.egg_count | number }}</ng-container>\\n                            </td>\\n                        </tr>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"!isLoaded\\\">\\n                        <tr>\\n                            <td class=\\\"w-30-per alt\\\">\\n                                <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius': '5px',\\n                                    'margin-bottom': '0px',\\n                                    'height': '20px',\\n                                    'width': '50%'\\n                                }\\\"></ngx-skeleton-loader>\\n                            </td>\\n                            <td class=\\\"w-70-per\\\">\\n                                <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius': '5px',\\n                                    'margin-bottom': '0px',\\n                                    'height': '20px',\\n                                    'width': '50%'\\n                                }\\\"></ngx-skeleton-loader>\\n                            </td>\\n                        </tr>\\n                    </ng-container>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-auto ml-auto\\\">\\n        <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"modal_primary_button_class\\\" (click)=\\\"closeModal()\\\">{{ modal_primary_button }}</button>\\n    </div>\\n</div>\"","var map = {\n\t\"./af\": \"K/tc\",\n\t\"./af.js\": \"K/tc\",\n\t\"./ar\": \"jnO4\",\n\t\"./ar-dz\": \"o1bE\",\n\t\"./ar-dz.js\": \"o1bE\",\n\t\"./ar-kw\": \"Qj4J\",\n\t\"./ar-kw.js\": \"Qj4J\",\n\t\"./ar-ly\": \"HP3h\",\n\t\"./ar-ly.js\": \"HP3h\",\n\t\"./ar-ma\": \"CoRJ\",\n\t\"./ar-ma.js\": \"CoRJ\",\n\t\"./ar-sa\": \"gjCT\",\n\t\"./ar-sa.js\": \"gjCT\",\n\t\"./ar-tn\": \"bYM6\",\n\t\"./ar-tn.js\": \"bYM6\",\n\t\"./ar.js\": \"jnO4\",\n\t\"./az\": \"SFxW\",\n\t\"./az.js\": \"SFxW\",\n\t\"./be\": \"H8ED\",\n\t\"./be.js\": \"H8ED\",\n\t\"./bg\": \"hKrs\",\n\t\"./bg.js\": \"hKrs\",\n\t\"./bm\": \"p/rL\",\n\t\"./bm.js\": \"p/rL\",\n\t\"./bn\": \"kEOa\",\n\t\"./bn.js\": \"kEOa\",\n\t\"./bo\": \"0mo+\",\n\t\"./bo.js\": \"0mo+\",\n\t\"./br\": \"aIdf\",\n\t\"./br.js\": \"aIdf\",\n\t\"./bs\": \"JVSJ\",\n\t\"./bs.js\": \"JVSJ\",\n\t\"./ca\": \"1xZ4\",\n\t\"./ca.js\": \"1xZ4\",\n\t\"./cs\": \"PA2r\",\n\t\"./cs.js\": \"PA2r\",\n\t\"./cv\": \"A+xa\",\n\t\"./cv.js\": \"A+xa\",\n\t\"./cy\": \"l5ep\",\n\t\"./cy.js\": \"l5ep\",\n\t\"./da\": \"DxQv\",\n\t\"./da.js\": \"DxQv\",\n\t\"./de\": \"tGlX\",\n\t\"./de-at\": \"s+uk\",\n\t\"./de-at.js\": \"s+uk\",\n\t\"./de-ch\": \"u3GI\",\n\t\"./de-ch.js\": \"u3GI\",\n\t\"./de.js\": \"tGlX\",\n\t\"./dv\": \"WYrj\",\n\t\"./dv.js\": \"WYrj\",\n\t\"./el\": \"jUeY\",\n\t\"./el.js\": \"jUeY\",\n\t\"./en-SG\": \"zavE\",\n\t\"./en-SG.js\": \"zavE\",\n\t\"./en-au\": \"Dmvi\",\n\t\"./en-au.js\": \"Dmvi\",\n\t\"./en-ca\": \"OIYi\",\n\t\"./en-ca.js\": \"OIYi\",\n\t\"./en-gb\": \"Oaa7\",\n\t\"./en-gb.js\": \"Oaa7\",\n\t\"./en-ie\": \"4dOw\",\n\t\"./en-ie.js\": \"4dOw\",\n\t\"./en-il\": \"czMo\",\n\t\"./en-il.js\": \"czMo\",\n\t\"./en-nz\": \"b1Dy\",\n\t\"./en-nz.js\": \"b1Dy\",\n\t\"./eo\": \"Zduo\",\n\t\"./eo.js\": \"Zduo\",\n\t\"./es\": \"iYuL\",\n\t\"./es-do\": \"CjzT\",\n\t\"./es-do.js\": \"CjzT\",\n\t\"./es-us\": \"Vclq\",\n\t\"./es-us.js\": \"Vclq\",\n\t\"./es.js\": \"iYuL\",\n\t\"./et\": \"7BjC\",\n\t\"./et.js\": \"7BjC\",\n\t\"./eu\": \"D/JM\",\n\t\"./eu.js\": \"D/JM\",\n\t\"./fa\": \"jfSC\",\n\t\"./fa.js\": \"jfSC\",\n\t\"./fi\": \"gekB\",\n\t\"./fi.js\": \"gekB\",\n\t\"./fo\": \"ByF4\",\n\t\"./fo.js\": \"ByF4\",\n\t\"./fr\": \"nyYc\",\n\t\"./fr-ca\": \"2fjn\",\n\t\"./fr-ca.js\": \"2fjn\",\n\t\"./fr-ch\": \"Dkky\",\n\t\"./fr-ch.js\": \"Dkky\",\n\t\"./fr.js\": \"nyYc\",\n\t\"./fy\": \"cRix\",\n\t\"./fy.js\": \"cRix\",\n\t\"./ga\": \"USCx\",\n\t\"./ga.js\": \"USCx\",\n\t\"./gd\": \"9rRi\",\n\t\"./gd.js\": \"9rRi\",\n\t\"./gl\": \"iEDd\",\n\t\"./gl.js\": \"iEDd\",\n\t\"./gom-latn\": \"DKr+\",\n\t\"./gom-latn.js\": \"DKr+\",\n\t\"./gu\": \"4MV3\",\n\t\"./gu.js\": \"4MV3\",\n\t\"./he\": \"x6pH\",\n\t\"./he.js\": \"x6pH\",\n\t\"./hi\": \"3E1r\",\n\t\"./hi.js\": \"3E1r\",\n\t\"./hr\": \"S6ln\",\n\t\"./hr.js\": \"S6ln\",\n\t\"./hu\": \"WxRl\",\n\t\"./hu.js\": \"WxRl\",\n\t\"./hy-am\": \"1rYy\",\n\t\"./hy-am.js\": \"1rYy\",\n\t\"./id\": \"UDhR\",\n\t\"./id.js\": \"UDhR\",\n\t\"./is\": \"BVg3\",\n\t\"./is.js\": \"BVg3\",\n\t\"./it\": \"bpih\",\n\t\"./it-ch\": \"bxKX\",\n\t\"./it-ch.js\": \"bxKX\",\n\t\"./it.js\": \"bpih\",\n\t\"./ja\": \"B55N\",\n\t\"./ja.js\": \"B55N\",\n\t\"./jv\": \"tUCv\",\n\t\"./jv.js\": \"tUCv\",\n\t\"./ka\": \"IBtZ\",\n\t\"./ka.js\": \"IBtZ\",\n\t\"./kk\": \"bXm7\",\n\t\"./kk.js\": \"bXm7\",\n\t\"./km\": \"6B0Y\",\n\t\"./km.js\": \"6B0Y\",\n\t\"./kn\": \"PpIw\",\n\t\"./kn.js\": \"PpIw\",\n\t\"./ko\": \"Ivi+\",\n\t\"./ko.js\": \"Ivi+\",\n\t\"./ku\": \"JCF/\",\n\t\"./ku.js\": \"JCF/\",\n\t\"./ky\": \"lgnt\",\n\t\"./ky.js\": \"lgnt\",\n\t\"./lb\": \"RAwQ\",\n\t\"./lb.js\": \"RAwQ\",\n\t\"./lo\": \"sp3z\",\n\t\"./lo.js\": \"sp3z\",\n\t\"./lt\": \"JvlW\",\n\t\"./lt.js\": \"JvlW\",\n\t\"./lv\": \"uXwI\",\n\t\"./lv.js\": \"uXwI\",\n\t\"./me\": \"KTz0\",\n\t\"./me.js\": \"KTz0\",\n\t\"./mi\": \"aIsn\",\n\t\"./mi.js\": \"aIsn\",\n\t\"./mk\": \"aQkU\",\n\t\"./mk.js\": \"aQkU\",\n\t\"./ml\": \"AvvY\",\n\t\"./ml.js\": \"AvvY\",\n\t\"./mn\": \"lYtQ\",\n\t\"./mn.js\": \"lYtQ\",\n\t\"./mr\": \"Ob0Z\",\n\t\"./mr.js\": \"Ob0Z\",\n\t\"./ms\": \"6+QB\",\n\t\"./ms-my\": \"ZAMP\",\n\t\"./ms-my.js\": \"ZAMP\",\n\t\"./ms.js\": \"6+QB\",\n\t\"./mt\": \"G0Uy\",\n\t\"./mt.js\": \"G0Uy\",\n\t\"./my\": \"honF\",\n\t\"./my.js\": \"honF\",\n\t\"./nb\": \"bOMt\",\n\t\"./nb.js\": \"bOMt\",\n\t\"./ne\": \"OjkT\",\n\t\"./ne.js\": \"OjkT\",\n\t\"./nl\": \"+s0g\",\n\t\"./nl-be\": \"2ykv\",\n\t\"./nl-be.js\": \"2ykv\",\n\t\"./nl.js\": \"+s0g\",\n\t\"./nn\": \"uEye\",\n\t\"./nn.js\": \"uEye\",\n\t\"./pa-in\": \"8/+R\",\n\t\"./pa-in.js\": \"8/+R\",\n\t\"./pl\": \"jVdC\",\n\t\"./pl.js\": \"jVdC\",\n\t\"./pt\": \"8mBD\",\n\t\"./pt-br\": \"0tRk\",\n\t\"./pt-br.js\": \"0tRk\",\n\t\"./pt.js\": \"8mBD\",\n\t\"./ro\": \"lyxo\",\n\t\"./ro.js\": \"lyxo\",\n\t\"./ru\": \"lXzo\",\n\t\"./ru.js\": \"lXzo\",\n\t\"./sd\": \"Z4QM\",\n\t\"./sd.js\": \"Z4QM\",\n\t\"./se\": \"//9w\",\n\t\"./se.js\": \"//9w\",\n\t\"./si\": \"7aV9\",\n\t\"./si.js\": \"7aV9\",\n\t\"./sk\": \"e+ae\",\n\t\"./sk.js\": \"e+ae\",\n\t\"./sl\": \"gVVK\",\n\t\"./sl.js\": \"gVVK\",\n\t\"./sq\": \"yPMs\",\n\t\"./sq.js\": \"yPMs\",\n\t\"./sr\": \"zx6S\",\n\t\"./sr-cyrl\": \"E+lV\",\n\t\"./sr-cyrl.js\": \"E+lV\",\n\t\"./sr.js\": \"zx6S\",\n\t\"./ss\": \"Ur1D\",\n\t\"./ss.js\": \"Ur1D\",\n\t\"./sv\": \"X709\",\n\t\"./sv.js\": \"X709\",\n\t\"./sw\": \"dNwA\",\n\t\"./sw.js\": \"dNwA\",\n\t\"./ta\": \"PeUW\",\n\t\"./ta.js\": \"PeUW\",\n\t\"./te\": \"XLvN\",\n\t\"./te.js\": \"XLvN\",\n\t\"./tet\": \"V2x9\",\n\t\"./tet.js\": \"V2x9\",\n\t\"./tg\": \"Oxv6\",\n\t\"./tg.js\": \"Oxv6\",\n\t\"./th\": \"EOgW\",\n\t\"./th.js\": \"EOgW\",\n\t\"./tl-ph\": \"Dzi0\",\n\t\"./tl-ph.js\": \"Dzi0\",\n\t\"./tlh\": \"z3Vd\",\n\t\"./tlh.js\": \"z3Vd\",\n\t\"./tr\": \"DoHr\",\n\t\"./tr.js\": \"DoHr\",\n\t\"./tzl\": \"z1FC\",\n\t\"./tzl.js\": \"z1FC\",\n\t\"./tzm\": \"wQk9\",\n\t\"./tzm-latn\": \"tT3J\",\n\t\"./tzm-latn.js\": \"tT3J\",\n\t\"./tzm.js\": \"wQk9\",\n\t\"./ug-cn\": \"YRex\",\n\t\"./ug-cn.js\": \"YRex\",\n\t\"./uk\": \"raLr\",\n\t\"./uk.js\": \"raLr\",\n\t\"./ur\": \"UpQW\",\n\t\"./ur.js\": \"UpQW\",\n\t\"./uz\": \"Loxo\",\n\t\"./uz-latn\": \"AQ68\",\n\t\"./uz-latn.js\": \"AQ68\",\n\t\"./uz.js\": \"Loxo\",\n\t\"./vi\": \"KSF8\",\n\t\"./vi.js\": \"KSF8\",\n\t\"./x-pseudo\": \"/X5v\",\n\t\"./x-pseudo.js\": \"/X5v\",\n\t\"./yo\": \"fzPg\",\n\t\"./yo.js\": \"fzPg\",\n\t\"./zh-cn\": \"XDpg\",\n\t\"./zh-cn.js\": \"XDpg\",\n\t\"./zh-hk\": \"SatO\",\n\t\"./zh-hk.js\": \"SatO\",\n\t\"./zh-tw\": \"kOpN\",\n\t\"./zh-tw.js\": \"kOpN\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"RnhZ\";","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">Fresh Eggs Inventory/Stocks</h1>\\n      <p class=\\\"sub-heading mb-8\\\">Grand total quantity of eggs: <strong>{{ totalItems | number }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n            'border-radius' : '5px',\\n            'margin-bottom' : '10px',\\n            'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n        <i class=\\\"icon-download\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n        <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n      </button>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n        <i class=\\\"icon-download\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n        <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Dates - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Dates' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 offset-xl-2 col-lg-4 offset-lg-2 col-md-8 col-sm-9 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td>{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                <td>{{ item.beginning_stocks | number }}</td>\\n                <td>{{ item.total_harvested | number }}</td>\\n                <td>{{ item.waste_sales | number }}</td>\\n                <td>{{ item.total_remaining_stocks | number }}</td>\\n                <td>\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/inventory-stocks/fresh-eggs/view', item.date]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n              <a (click)=\\\"gotoPage(prev_page)\\\">\\n                  Previous\\n              </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n              <a (click)=\\\"gotoPage(next_page)\\\">\\n                  Next\\n              </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"medicineUnitForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <ng-container *ngIf=\\\"action == 'delete'\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"action != 'delete'\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">Enter Medicine Unit <span class=\\\"required\\\">*</span></label>\\n                    <input type=\\\"text\\\" formControlName=\\\"unit\\\" class=\\\"form-control mb-10\\\"/>\\n                    <ng-container *ngIf=\\\"medicineUnitForm.controls.unit.touched\\\">\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineUnitForm.controls.unit.hasError('required')\\\">Medicine unit is required</p>\\n                    </ng-container>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-6 text-right\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\" [disabled]=\\\"isLoading\\\">Cancel</button>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"{'btn-primary' : action != 'delete', 'btn-danger' : action == 'delete' }\\\" [disabled]=\\\"(!medicineUnitForm.valid && action != 'delete') || isLoading\\\">{{ modal_primary_button }}</button>\\n        </div>\\n    </div>\\n</form>\\n\"","export default \"\"","export default \".btn-background {\\n  background-color: #fff;\\n}\\n\\n.btn-medicine {\\n  color: #000000;\\n}\\n\\n.btn-medicine:hover {\\n  background-color: #c0c0c0;\\n}\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack('go_back', 'customer_update')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to customer profile</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-12\\\">\\n            <h1 class=\\\"heading\\\">Edit customer details</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-9 col-lg-7 col-md-7 col-sm-12 col-12\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"userForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading\\\">Basic Info.</h1>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">First Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"first_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.first_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.first_name.hasError('required')\\\">First name is\\n                                            required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.first_name.hasError('maxlength')\\\">First name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Last Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"last_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.last_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.last_name.hasError('required')\\\">Last name is\\n                                            required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.last_name.hasError('maxlength')\\\">Last name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Customer Profile <span class=\\\"required\\\">*</span></label>\\n                                    <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"customer_type_id\\\" placeholder=\\\"Select customer profile\\\">\\n                                        <mat-option *ngFor=\\\"let customer_type of customer_type_options\\\" [value]=\\\"customer_type.id\\\">{{ customer_type.type }}</mat-option>\\n                                    </mat-select>\\n                                    <ng-container *ngIf=\\\"userForm.controls.customer_type_id.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.customer_type_id.hasError('required')\\\">Customer profile is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Mobile Phone <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">+63</span>\\n                                        </div>\\n                                        <input type=\\\"tel\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"number\\\" placeholder=\\\"xxx xxx xxxx\\\" maxlength=\\\"10\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"userForm.controls.number.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.number.hasError('required')\\\">Mobile\\n                                            phone is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('pattern')\\\">\\n                                            Mobile phone is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('maxlength')\\\">\\n                                            Mobile phone must not exceed 10 digits</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('minlength')\\\">\\n                                            Mobile phone must be atleast 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Email <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"email\\\" maxlength=\\\"50\\\" minlength=\\\"6\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.email.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('required')\\\">\\n                                            Email is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('pattern')\\\">\\n                                            Email is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('maxlength')\\\">Email must not exceed 50 characters</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('minlength')\\\">Email must not contain at least 6 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Address <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"location\\\" maxlength=\\\"60\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.location.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.location.hasError('required')\\\">Address is\\n                                            required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.location.hasError('maxlength')\\\">Address must not exceed 60 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Password</label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"password\\\"/>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                            \\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 text-right\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"generatePassword()\\\">Generate</button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading mb-30\\\">Profile Photo</h1>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-2 col-lg-3 col-md-3 col-sm-3 col-3\\\">\\n                                <img *ngIf=\\\"!isProfileImageLoaded && !profilePhoto\\\" class=\\\"avatar img-responsive\\\" src=\\\"../../../../../assets/images/profile.svg\\\">\\n                                <img *ngIf=\\\"!isProfileImageLoaded && profilePhoto\\\" class=\\\"avatar img-responsive\\\" [src]=\\\"profilePhoto\\\">\\n                                <image-cropper \\n                                    class=\\\"avatar img-responsive {{isProfileImageLoaded ? '' : 'd-none' }}\\\"\\n                                    [imageChangedEvent]=\\\"profilePhoto\\\"\\n                                    [maintainAspectRatio]=\\\"true\\\"\\n                                    [aspectRatio]=\\\"5 / 5\\\"\\n                                    [resizeToWidth]=\\\"100\\\"\\n                                    format=\\\"png,jpg,jpeg,ico\\\"\\n                                    (imageCropped)=\\\"imageProfilePhotoCropped($event)\\\"\\n                                    (imageLoaded)=\\\"imageProfileLoaded()\\\"\\n                                    [autoCrop]= \\\"true\\\"\\n                                ></image-cropper>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-9 col-md-9 col-sm-9 col-9\\\">\\n                                <p>Choose a file to upload:</p>\\n                                <div class=\\\"form-group row\\\">\\n                                    <input id=\\\"file-upload\\\" class=\\\"d-none\\\" type=\\\"file\\\" (change)=\\\"fileChange($event)\\\" accept=\\\"image/jpeg, image/png\\\"/>\\n                                    <div class=\\\"col-xl-6 col-lg-6 col-md-12\\\">\\n                                        <label for=\\\"file-upload\\\" class=\\\"btn btn-primary btn-block\\\">\\n                                            Choose a file\\n                                        </label>\\n                                    </div>\\n                                    <div class=\\\"col-xl-6 col-lg-6 col-md-12 flex-align-center\\\" *ngIf=\\\"!isProfileImageLoaded && !profilePhoto\\\">\\n                                        <p class=\\\"m-0 font-italic\\\">No file chosen</p>\\n                                    </div>\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"profileUploadWrongFile\\\">Image is not valid</p>\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"uploadMaxLimitReached\\\">Image must not exceed 1MB</p>\\n                                    <div class=\\\"col-xl-8 col-lg-12 col-md-12\\\">\\n                                        <p class=\\\"note fs-12\\\">Maximum image file size is 1MB. Try resizing it to atleast 500x500 px in resolution.</p>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-6 ml-xl-auto ml-lg-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\"\\n                                (click)=\\\"goBack('form_cancel', 'customer_update')\\\">\\n                                    Cancel\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\"\\n                                    (click)=\\\"openModal(userForm.value, 'user_update')\\\" [disabled]=\\\"!userForm.valid\\\">\\n                                    Save Changes\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-5 col-md-5 col-sm-12 col-12\\\">\\n            <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n                <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Delete User?</h1>\\n                <p class=\\\"fs-14 action-note\\\">Deleting a user removes all the data on this dashboard.</p>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-danger mt-30 btn-block\\\" (click)=\\\"openModal(userForm.value, 'user_delete')\\\">\\n                    <span class=\\\"fs-14\\\">Yes, I understand - delete user</span>\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\"","export default \"\"","export default \"p {\\n  font-size: 16px;\\n  color: #72787F;\\n  text-transform: none;\\n}\\n\\n.heading {\\n  font-size: 24px;\\n  font-weight: bold;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.sub-heading {\\n  color: #72787F;\\n}\\n\\n.sub-heading.italic {\\n  font-style: italic;\\n}\\n\\n.sub-heading strong {\\n  color: #1E2631;\\n}\\n\\n.mini-heading {\\n  font-size: 20px;\\n  font-weight: 500;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.card-heading {\\n  font-size: 13px;\\n  font-weight: normal;\\n  text-transform: uppercase;\\n  color: #72787F;\\n}\\n\\n.sidebar {\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li {\\n  font-size: 16px;\\n}\\n\\n.sidebar ul li a.main-nav {\\n  color: #72787F;\\n}\\n\\n.sidebar ul li a.main-nav.sub {\\n  font-size: 14px;\\n}\\n\\n.sidebar ul li a.main-nav:hover {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li.active a {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\nmat-checkbox label {\\n  font-size: 16px !important;\\n}\\n\\n.vertical-text {\\n  transform: rotate(-90deg);\\n  -webkit-transform: rotate(-90deg);\\n  -moz-transform: rotate(-90deg);\\n  -ms-transform: rotate(-90deg);\\n  -o-transform: rotate(-90deg);\\n}\\n\\n.vertical-text-full {\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n  position: absolute;\\n  left: -25%;\\n  top: 50%;\\n}\\n\\nhr {\\n  margin: 0;\\n  border-bottom: 1px solid #DDE1E5;\\n}\\n\\n.c-fields .c-field label {\\n  color: #666666;\\n}\\n\\n.c-fields .c-field label span {\\n  color: #DB2B2B;\\n}\\n\\n.c-fields .c-field .form-control {\\n  min-height: 50px;\\n}\\n\\n.prof-img {\\n  display: -webkit-box;\\n  display: flex;\\n}\\n\\n.note {\\n  max-width: 240px;\\n  color: #72787F;\\n}\\n\\n.input-group-prepend .input-group-text {\\n  border-radius: 5px 0 0 5px;\\n  background-color: #D9DCDE;\\n  border: 1px solid #C1C2C3;\\n}\\n\\n.input-group-prepend input {\\n  border-radius: 0 5px 5px 0;\\n}\\n\\ninput[type=file] {\\n  display: none;\\n}\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-20\\\">\\n      <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n          <h1 class=\\\"heading\\\">View Customer's Profile</h1>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-12\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n              <i class=\\\"icon-back\\\"></i>\\n              <span class=\\\"ml-15\\\">Go back to list</span>\\n          </button>\\n      </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n      <div class=\\\"container-card view-record p-30\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-2 offset-xl-0 col-lg-3 offset-lg-0 col-md-6 offset-md-3 col-sm-6 offset-sm-3 col-6 offset-3\\\">\\n            <img *ngIf=\\\"!isLoaded || !user_profile.profile_picture\\\" src=\\\"../../../../../assets/images/profile.svg\\\" class=\\\"avatar img-responsive\\\">\\n            <img *ngIf=\\\"isLoaded && user_profile.profile_picture\\\" [src]=\\\"user_profile.profile_picture\\\" class=\\\"avatar img-responsive\\\">\\n          </div>\\n          <div class=\\\"col-xl-10 col-lg-9 col-md-12 col-sm-12 col-12 pl-0 mt-11\\\">\\n            <div class=\\\"row ml-0 mr-0\\\">\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-5 fs-12\\\">First Name</p>\\n                <h1 class=\\\"mini-heading fw-500\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.profile_first_name }}</h1>\\n                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                        'border-radius': '5px',\\n                        'margin-bottom': '0px',\\n                        'height': '20px',\\n                        'width': '50%'\\n                    }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-5 fs-12\\\">Last Name</p>\\n                <h1 class=\\\"mini-heading fw-500\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.profile_last_name }}</h1>\\n                                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                          'border-radius': '5px',\\n                                                          'margin-bottom': '0px',\\n                                                          'height': '20px',\\n                                                          'width': '50%'\\n                                                      }\\\"></ngx-skeleton-loader>\\n              </div>\\n            </div>\\n            <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">ID no.</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.customer_id }}</h1>\\n                                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                          'border-radius': '5px',\\n                                                          'margin-bottom': '0px',\\n                                                          'height': '20px',\\n                                                          'width': '50%'\\n                                                      }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Customer Profile</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.customer_type ? user_profile.customer_type.type : '' }}</h1>\\n                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                        'border-radius': '5px',\\n                                                        'margin-bottom': '0px',\\n                                                        'height': '20px',\\n                                                        'width': '50%'\\n                                                    }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Date Added</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.created_at | date : 'MM/dd/yyyy' }}</h1>\\n                                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                          'border-radius': '5px',\\n                                                          'margin-bottom': '0px',\\n                                                          'height': '20px',\\n                                                          'width': '50%'\\n                                                      }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Email</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.email }}</h1>\\n                                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                          'border-radius': '5px',\\n                                                          'margin-bottom': '0px',\\n                                                          'height': '20px',\\n                                                          'width': '50%'\\n                                                      }\\\"></ngx-skeleton-loader>\\n\\n              </div>\\n            </div>\\n            <div class=\\\"row mt-19 ml-0 mr-0\\\">\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Mobile Number</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">+63{{ user_profile.contact_number }}</h1>\\n                                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                          'border-radius': '5px',\\n                                                          'margin-bottom': '0px',\\n                                                          'height': '20px',\\n                                                          'width': '50%'\\n                                                      }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Address</p>\\n                <h1 class=\\\"fs-16\\\" *ngIf=\\\"isLoaded\\\">{{ user_profile.profile_location }}</h1>\\n                                  <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                          'border-radius': '5px',\\n                                                          'margin-bottom': '0px',\\n                                                          'height': '20px',\\n                                                          'width': '50%'\\n                                                      }\\\"></ngx-skeleton-loader>\\n              </div>\\n              <div class=\\\"col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6 pr-0\\\">\\n                <p class=\\\"mb-8 fs-12\\\">Password</p>\\n                <div class=\\\"row\\\">\\n                  <input type=\\\"{{ show_password ? 'text' : 'password' }}\\\" value=\\\"{{ user_profile.real_password }}\\\"\\n                    class=\\\"mb-10 ml-15 field-pasword\\\" readonly placeholder=\\\"\\\" />\\n                  <button type=\\\"button\\\" class=\\\"btn btn-clear p-absolute t-2 r-0 mt-15\\\" (click)=\\\"showPassword()\\\">\\n                    <i [ngClass]=\\\"{ 'icon-eye-close' : !show_password, 'icon-eye-open' : show_password }\\\"></i>\\n                  </button>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"data-table p-relative table-listing mt-33\\\" style=\\\"overflow: auto;\\\" *ngIf=\\\"collectibles\\\">\\n              <table>\\n                <thead>\\n                  <tr>\\n                    <th>\\n                      No. of Collectibles\\n                    </th>\\n                    <th>\\n                      Collectibles Amount\\n                    </th>\\n                    <th>\\n                      Fully paid orders\\n                    </th>\\n                    <th>\\n                      Total Revenue\\n                    </th>\\n                  </tr>\\n                </thead>\\n                <tbody>\\n                  <tr>\\n                    <td>{{ collectibles.collectible_no | number }}</td>\\n                    <td>₱ {{ collectibles.collectible_amount | number : '1.2-2' }}</td>\\n                    <td>₱ {{ collectibles.fully_paid_amount | number : '1.2-2' }}</td>\\n                    <td>₱ {{ collectibles.total_revenue | number : '1.2-2' }}</td>\\n                  </tr>\\n                </tbody>\\n              </table>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-12\\\">\\n      <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n        <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Actions</h1>\\n        <p class=\\\"fs-14 action-note\\\">Here are the actions you can apply for this order details.</p>\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary mt-30 btn-block\\\" mat-flat-button [routerLink]=\\\"['/customers/update', user_profile.id]\\\">\\n          <div class=\\\"cus-layer ml-auto mr-auto\\\">\\n            <i class=\\\"icon-edit\\\"></i>\\n            <span class=\\\"ml-8 fs-14\\\">Edit Profile</span>\\n          </div>\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-6 col-lg-6 col-md-8 col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">List of Orders</h1>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Range - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Range' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-select class=\\\"btn btn-drop-down btn-sm btn-block\\\" [(ngModel)]=\\\"order_status\\\" (selectionChange)=\\\"changeOrderStatus($event)\\\" placeholder=\\\"Order Status\\\">\\n                <mat-option *ngFor=\\\"let item of order_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-select class=\\\"btn btn-drop-down btn-sm btn-block\\\" [(ngModel)]=\\\"mode_of_payment\\\" (selectionChange)=\\\"changeModeOfPayment($event)\\\" placeholder=\\\"Mode of Payment\\\">\\n                <mat-option *ngFor=\\\"let item of mode_of_payment_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <mat-select class=\\\"btn btn-drop-down btn-sm btn-block\\\" [(ngModel)]=\\\"payment_status\\\" (selectionChange)=\\\"changePaymentStatus($event)\\\" placeholder=\\\"Payment Status\\\">\\n                <mat-option *ngFor=\\\"let item of payment_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n              </mat-select>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n            Clear Filters\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group\\\">\\n            <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n              <mat-select-trigger>Column Visibility</mat-select-trigger>\\n              <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n              </ng-container>\\n            </mat-select>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.transaction_id }}</td>\\n                <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.created_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.status }}</td>\\n                <td *ngIf=\\\"ths[3].isVisible\\\">\\n                  <ng-container *ngFor=\\\"let egg of item.order_items; let i = index\\\">\\n                    {{ egg.egg_type.type }}{{ i < item.order_items.length -1 ? ', ':'' }}\\n                  </ng-container>\\n                </td>\\n                <td *ngIf=\\\"ths[4].isVisible\\\">{{ item.total_pieces | number }}</td>\\n                <td *ngIf=\\\"ths[5].isVisible\\\">{{ item.total_price | number : '1.2-2' }}</td>\\n                <td *ngIf=\\\"ths[6].isVisible\\\">{{ item.payment_type }}</td>\\n                <td *ngIf=\\\"ths[7].isVisible\\\">\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/transactions/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n            <a (click)=\\\"gotoPage(prev_page)\\\">\\n              Previous\\n            </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link\\\" *ngIf=\\\"next_page\\\">\\n            <a (click)=\\\"gotoPage(next_page)\\\">\\n              Next\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-20\\\">\\n        <div class=\\\"col-xl-9 col-lg-8 col-md-7 col-sm-6 col-12\\\">\\n            <h1 class=\\\"heading\\\">Generated Forms</h1>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-12\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card view-record p-30\\\">\\n        <div id=\\\"printable-section\\\">\\n            <div id=\\\"print-payment-section\\\" class=\\\"mb-30 break-now\\\">\\n                <div class=\\\"border\\\">\\n                    <div class=\\\"row mt-15 ml-0 mr-0\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Payment Date:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fs-12\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Order No.:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fs-12\\\">{{ item ? item.transaction_id : '' }}</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                            <h5 class=\\\"mb-30\\\">Payment Form</h5>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row mb-10 ml-0 mr-0\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Recipient:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-2 col-lg-2 col-md-2 col-sm-2 col-2 text-center\\\">\\n                            <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                            <p class=\\\"fs-10\\\">(Family Name)</p>\\n                        </div>\\n                        <div class=\\\"col-xl-2 col-lg-2 col-md-2 col-sm-2 col-2 text-center\\\">\\n                            <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }}</p>\\n                            <p class=\\\"fs-10\\\">(Given Name)</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Business Address:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_location : '' }}</p>\\n                        </div>\\n                    </div>\\n                    <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                        <div class=\\\"data-table p-relative table-listing mb-30\\\" style=\\\"overflow: auto;\\\">\\n                          <table>\\n                            <thead>\\n                              <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                  <th class=\\\"fs-12\\\" *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                  </th>\\n                                </ng-container>\\n                              </tr>\\n                            </thead>\\n                            <tbody>\\n                              <ng-container *ngIf=\\\"isLoaded && order_items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of order_items; let i = index\\\">\\n                                    <td class=\\\"fs-12\\\" *ngIf=\\\"ths[0].isVisible\\\">{{ item.egg_type.type_shortcode }}</td>\\n        \\n                                    <ng-container *ngFor=\\\"let egg of item.order_item_details; let i = index\\\">\\n                                        <td class=\\\"fs-12\\\" *ngIf=\\\"ths[1+1].isVisible\\\">{{ egg.qty | number }}</td>\\n                                    </ng-container>\\n                                    <td class=\\\"fs-12\\\" *ngIf=\\\"ths[4].isVisible\\\">{{ item.total_pieces | number }}</td>\\n                                    <td *ngIf=\\\"ths[5].isVisible\\\" class=\\\"text-right fs-12\\\">₱ {{ item.price | number : '1.2-2' }}</td>\\n                                    <td *ngIf=\\\"ths[6].isVisible\\\" class=\\\"text-right fs-12\\\">₱ {{ item.total_price | number : '1.2-2' }}</td>\\n                                </tr>\\n                              </ng-container>\\n                              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                      'border-radius' : '5px',\\n                                      'margin-bottom' : '0px',\\n                                      'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                  </td>\\n                                </tr>\\n                              </ng-container>\\n                              <ng-container *ngIf=\\\"isLoaded && order_items.length == 0\\\">\\n                                <tr>\\n                                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                              </ng-container>\\n                            </tbody>\\n                          </table>\\n                        </div>\\n                    </ng-container>\\n                    <div class=\\\"row ml-0 mr-0\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Paid By:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-2 col-lg-2 col-md-2 col-sm-2 col-2 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }} {{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-10\\\">Customer/Buyer/Client</p>\\n                        </div>\\n        \\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Received By:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-2 col-lg-2 col-md-2 col-sm-2 col-2 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-17\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-10\\\">Authorized Representative</p>\\n                        </div>\\n        \\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\\\">\\n                                    <p class=\\\"fw-500 mb-10 fs-12\\\">Sub Total:</p>\\n                                </div>\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 text-right\\\">\\n                                    <p class=\\\"mb-10 fs-12\\\">₱ {{ item.sub_total_price | number : '1.2-2' }}</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\\\">\\n                                    <p class=\\\"fw-500 mb-10 fs-12\\\">Discount:</p>\\n                                </div>\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 text-right\\\">\\n                                    <p class=\\\"mb-10 fs-12\\\">₱ {{ item.discount | number : '1.2-2' }}</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\\\">\\n                                    <p class=\\\"fw-500 mb-10 fs-12\\\">Grand Total:</p>\\n                                </div>\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 text-right\\\">\\n                                    <p class=\\\"mb-10 fs-12\\\">₱ {{ item.total_price | number : '1.2-2' }}</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div id=\\\"print-credit-section\\\" class=\\\"mb-30 break-now\\\" *ngIf=\\\"item && item.mode_of_payment == 2\\\">\\n                <div class=\\\"border\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                            <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                            <h5 class=\\\"mb-30\\\">Credit Form</h5>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row mb-10 ml-0 mr-0\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fw-500 mb-0 fs-12\\\">Pangalan:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }} {{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Petsa:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fs-12\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0 border-bottom border-top\\\">\\n                        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\n                            <p class=\\\"mb-15 mt-15 fs-12\\\">Ako ay humihingi ng pahintulot na makahiram ng halagang ₱ <span class=\\\"border-bottom fw-500\\\">{{ item ? (item.payment.balance | number : '1.2-2') : '' }}</span>, at nangangako na babayaran sa araw na <span class=\\\"border-bottom fw-500\\\">{{ item ? (item.payment.due_date | date : 'MMM dd, yyyy') : '' }}</span></p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Buyer:</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }} {{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10\\\">Signature over printed name</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Prepared By:</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10\\\">Signature over Printed Name</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Approved By:</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 h-17\\\"></p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10\\\">Signature over Printed Name</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Date Paid:</p>\\n                                </div>\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500\\\">Prepared By:</p>\\n                                </div> -->\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }} {{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10 mb-0\\\">Signature over Printed Name</p>\\n                                    <p class=\\\"fs-10\\\">(Buyer Paid)</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500\\\">Approved By:</p>\\n                                </div> -->\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10 mb-0\\\">Signature over Printed Name</p>\\n                                    <p class=\\\"fs-10\\\">(Received Payment)</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div id=\\\"print-credit-section\\\" class=\\\"mb-30 break-now\\\" *ngIf=\\\"item && item.mode_of_payment == 3\\\">\\n                <div class=\\\"border\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                            <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                            <h5 class=\\\"mb-30\\\">Balance Form</h5>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row mb-10 ml-0 mr-0\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fw-500 mb-0 fs-12\\\">Pangalan:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }} {{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fw-500 fs-12\\\">Petsa:</p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                            <p class=\\\"fs-12\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0 border-bottom border-top\\\">\\n                        <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\n                            <p class=\\\"mb-15 mt-15 fs-12\\\">Ako ay humihingi ng pahintulot na makapag balance ng halagang <span class=\\\"border-bottom fw-500\\\">₱ {{ item ? (item.payment.balance | number : '1.2-2') : '' }}</span> presyo ng <span class=\\\"border-bottom fw-500\\\">₱ {{ item ? (item.total_price | number : '1.2-2') : 0 }}</span>, at nangangako na babayaran sa araw na <span class=\\\"border-bottom fw-500\\\">{{ item ? (item.payment.due_date | date : 'MMM dd, yyyy') : '' }}</span></p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Buyer:</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }} {{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10\\\">Signature over printed name</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Prepared By:</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10\\\">Signature over Printed Name</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Approved By:</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 h-17\\\"></p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10\\\">Signature over Printed Name</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 mt-40\\\">\\n                                    <p class=\\\"fw-500 fs-12\\\">Date Paid:</p>\\n                                </div>\\n                                <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500\\\">Prepared By:</p>\\n                                </div> -->\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ item ? item.customer_details.profile_first_name : '' }} {{ item ? item.customer_details.profile_last_name : '' }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10 mb-0\\\">Signature over Printed Name</p>\\n                                    <p class=\\\"fs-10\\\">(Buyer Paid)</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                            <div class=\\\"row\\\">\\n                                <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                                    <p class=\\\"fw-500\\\">Approved By:</p>\\n                                </div> -->\\n                                <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                                    <p class=\\\"mb-0 fs-12\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                                    <hr class=\\\"m-0\\\">\\n                                    <p class=\\\"fs-10 mb-0\\\">Signature over Printed Name</p>\\n                                    <p class=\\\"fs-10\\\">(Received Payment)</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto\\\">\\n                <button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">Download Forms</button>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"orderForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Mode of Payment <span class=\\\"required\\\">*</span></label>\\n                <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" formControlName=\\\"mode_of_payment\\\" placeholder=\\\"Mode of Payment\\\" (selectionChange)=\\\"changePayment($event)\\\" [disabled]=\\\"total_price < 100000\\\">\\n                    <mat-option *ngFor=\\\"let item of mode_of_payment_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n                </mat-select>\\n                <ng-container *ngIf=\\\"orderForm.controls.mode_of_payment.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.mode_of_payment.hasError('required')\\\">\\n                        Mode of payment is required</p>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n    <ng-container *ngIf=\\\"mode_of_payment == 2\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">Credit Amount</label>\\n                    <p class=\\\"text-danger\\\">₱ {{ orderForm.controls.balance.value | number : '1.2-2' }}</p>\\n                    <!-- <input type=\\\"number\\\" min=\\\"1\\\" placeholder=\\\"0\\\" formControlName=\\\"balance\\\" class=\\\"form-control mb-10\\\" disabled> -->\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group p-relative\\\">\\n                    <label class=\\\"text-secondary\\\">Date of Credit Payment <span class=\\\"required\\\">*</span></label>\\n                    <input matInput [min]=\\\"min_date\\\" [max]=\\\"max_date\\\" [matDatepicker]=\\\"due_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"due_date\\\" class=\\\"form-control date-input mb-10\\\" readonly (click)=\\\"due_date_picker.open()\\\">\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"due_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                    <mat-datepicker #due_date_picker></mat-datepicker>\\n                    <ng-container *ngIf=\\\"orderForm.controls.due_date.touched\\\">\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.due_date.hasError('required')\\\">Date of credit payment is required</p>\\n                        <!-- <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.due_date.hasError('min')\\\">Date of credit payment is must not be greater than the date today</p>\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.due_date.hasError('max')\\\">Date of credit payment is must not exceed more than 1 week from now</p> -->\\n                    </ng-container>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"mode_of_payment == 3\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">Total Price</label>\\n                    <p>₱ {{ orderForm.controls.total_price.value | number: '1.2-2' }}</p>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">Initial Payment <span class=\\\"required\\\">*</span></label>\\n                    <input type=\\\"number\\\" min=\\\"1\\\" [max]=\\\"grand_total\\\" placeholder=\\\"0\\\" formControlName=\\\"payment\\\" class=\\\"form-control mb-10\\\" (input)=\\\"calculateRemaining($event)\\\">\\n                    <ng-container *ngIf=\\\"orderForm.controls.payment.touched\\\">\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.payment.hasError('required')\\\" >Initial payment is required</p>\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.payment.hasError('min')\\\">Initial payment must be atleast 50% of total amount</p>\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.payment.hasError('max')\\\">Initial payment must not exceed the total price</p>\\n                      </ng-container>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">Remaining Balance</label>\\n                    <p class=\\\"text-danger\\\">₱ {{ orderForm.controls.balance.value | number: '1.2-2' }}</p>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group p-relative\\\">\\n                    <label class=\\\"text-secondary\\\">Date of Balance Payment <span class=\\\"required\\\">*</span></label>\\n                    <input matInput [min]=\\\"min_date\\\" [max]=\\\"max_date\\\" [matDatepicker]=\\\"due_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"due_date\\\" class=\\\"form-control date-input mb-10\\\" readonly (click)=\\\"due_date_picker.open()\\\">\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"due_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                    <mat-datepicker #due_date_picker></mat-datepicker>\\n                    <ng-container *ngIf=\\\"orderForm.controls.due_date.touched\\\">\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.due_date.hasError('required')\\\">Date of balance payment is required</p>\\n                        <!-- <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.due_date.hasError('min')\\\">Date of balance payment is must not be greater than the date today</p>\\n                        <p class=\\\"text-danger\\\" *ngIf=\\\"orderForm.controls.due_date.hasError('max')\\\">Date of balance payment is must not exceed more than 1 week from now</p> -->\\n                    </ng-container>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-container>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-6 text-right\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\">Cancel</button>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"modal_primary_button_class\\\" [disabled]=\\\"!orderForm.valid || !mode_of_payment\\\">{{ modal_primary_button }}</button>\\n        </div>\\n    </div>\\n</form>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h5 class=\\\"mb-30\\\">Daily House Harvest Report</h5>\\n            </div>\\n        </div>\\n        <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        \\n        <div class=\\\"row mb-0 ml-0 mr-0 mt-10\\\" *ngIf=\\\"item\\\">\\n            <div class=\\\"col-2 stats\\\">\\n                <p>House/Building no.</p>\\n                <h1>{{ item.house_name ? item.house_name.house_name : '' }}</h1>\\n            </div>\\n            <div class=\\\"col-2 stats\\\">\\n                <p>Beginning population</p>\\n                <h1>{{ item.beginning_population ? (item.beginning_population | number) : 0 }}</h1>\\n            </div>\\n            <div class=\\\"col stats\\\">\\n                <p>Beginning age</p>\\n                <h1>{{ item.beginning_age ? item.beginning_age : '0' }}</h1>\\n            </div>\\n        </div>\\n\\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible && th.canToggle\\\" class=\\\"p-10 fs-12\\\">\\n                                    {{ th.label }}\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\" [ngClass]=\\\"{'break-now' : (i + 1) % 11 == 0}\\\">\\n                                    <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.prepared_by_date | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                                    <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.age }}</td>\\n                                    <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.mortality | number }}</td>\\n                                    <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.mortality_rate | number : '1.2-2' }} %</td>\\n                                    <td *ngIf=\\\"ths[4].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.cull | number }}</td>\\n                                    <td *ngIf=\\\"ths[5].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.bird_count | number }}</td>\\n                                    <td *ngIf=\\\"ths[6].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.real_egg_count | number }} pcs</td>\\n                                    <td *ngIf=\\\"ths[7].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.production_rate | number : '1.2-2' }} %</td>\\n                                    <td *ngIf=\\\"ths[8].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.feeds.bags | number }}</td>\\n                                    <td *ngIf=\\\"ths[9].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.feeds.string }}</td>\\n                                    <td *ngIf=\\\"ths[10].isVisible\\\" class=\\\"p-10 fs-10\\\">\\n                                        <ng-container *ngFor=\\\"let medicine of item.medicine_name; let i = index\\\">\\n                                            {{ medicine.medicine }}{{ i < item.medicine_name.length - 1 ? ', ': '' }}\\n                                        </ng-container>\\n                                    </td>\\n                                    <td *ngIf=\\\"ths[11].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.sortingRecordstatus ? item.sortingRecordstatus : item.recordStatus }}</td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                        <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                        }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        \\n        <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 h-22\\\"></p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"<router-outlet></router-outlet>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack('go_back', 'feed_update')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-12\\\">\\n            <h1 class=\\\"heading\\\">Edit feed details</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-9 col-lg-7 col-md-7 col-sm-12 col-12\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"feedForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Feed Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"feeds\\\"/>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.feeds.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.feeds.hasError('required')\\\">Feed name is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\"></div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Net weight of bags <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"kg_per_bag\\\" (input)=\\\"convertWeight($event)\\\" placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">kg</span>\\n                                        </div>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.kg_per_bag.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.kg_per_bag.hasError('required')\\\">Net weight is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.kg_per_bag.hasError('min')\\\">Net weight must not be less than 0</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.kg_per_bag.hasError('max')\\\">Net weight must not exceed 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">No. of Orders <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"pieces\\\" placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">pcs</span>\\n                                        </div>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.pieces.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.pieces.hasError('required')\\\">Number of orders is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.pieces.hasError('min')\\\">Number of orders must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Converted net weight</label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"converted\\\" disabled placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">g</span>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Delivery Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [max]=\\\"max_date\\\" [matDatepicker]=\\\"delivery_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"delivery_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"delivery_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #delivery_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.delivery_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.delivery_date.hasError('required')\\\">Delivery date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Unit Price <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">Php</span>\\n                                        </div>\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"unit_price\\\" placeholder=\\\"0.00\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.unit_price.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.unit_price.hasError('required')\\\">Price is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.unit_price.hasError('min')\\\">Price must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Expiration Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [min]=\\\"min_date\\\" [matDatepicker]=\\\"expiration_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"expiration_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"expiration_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #expiration_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.expiration_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.expiration_date.hasError('required')\\\">Expiration date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Remarks</label>\\n                                    <textarea class=\\\"form-control mb-10\\\" rows=\\\"3\\\" maxlength=\\\"250\\\" formControlName=\\\"remarks\\\"></textarea>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.remarks.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.remarks.hasError('maxlength')\\\">Remarks should not exceed 250 characters</p>\\n                                    </ng-container>\\n                                    <p class=\\\"text-right text-secondary\\\">{{ feedForm.controls.remarks.value.length }}/250</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"goBack('form_cancel', 'feed_update')\\\">\\n                                    Cancel\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(feedForm.value, 'feed_update')\\\" [disabled]=\\\"!feedForm.valid\\\">\\n                                    Save Changes\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-5 col-md-5 col-sm-12 col-12\\\">\\n            <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n                <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Delete Item?</h1>\\n                <p class=\\\"fs-14 action-note\\\">Deleting this item removed all the data on this dashboard.</p>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-danger mt-30 btn-block\\\" (click)=\\\"openModal(feedForm.value, 'feed_delete')\\\">\\n                    <span class=\\\"fs-14\\\">Yes, I understand - delete item</span></button>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack('go_back', 'medicine_update')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-12\\\">\\n            <h1 class=\\\"heading\\\">Edit medicine details</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-9 col-lg-7 col-md-7 col-sm-12 col-12\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"medicineForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Medicine Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"medicine\\\"/>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.medicine.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.medicine.hasError('required')\\\">Medicine name is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group row\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <label class=\\\"text-secondary\\\">Unit <span class=\\\"required\\\">*</span></label>\\n                                    </div>\\n                                    <div class=\\\"col-10\\\">\\n                                        <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"unit_id\\\" placeholder=\\\"Select a unit of measurement\\\">\\n                                            <mat-option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{ unit.unit }}</mat-option>\\n                                        </mat-select>\\n                                    </div>\\n                                    <div class=\\\"col-2 pl-0\\\">\\n                                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\">\\n                                            <i class=\\\"icon-add\\\"></i>\\n                                        </button>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.unit_id.touched\\\">\\n                                        <div class=\\\"col-12\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.unit_id.hasError('required')\\\">Unit is required</p>\\n                                        </div>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Net weight <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"net_weight\\\"/>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.net_weight.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.net_weight.hasError('required')\\\">Net weight is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.net_weight.hasError('min')\\\">Net weight must not be less than 0</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.net_weight.hasError('max')\\\">Net weight must not exceed 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">No. of Orders <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"pieces\\\" placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">pcs</span>\\n                                        </div>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.pieces.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.pieces.hasError('required')\\\">Number of orders is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.pieces.hasError('min')\\\">Number of orders must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Delivery Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [max]=\\\"max_date\\\" [matDatepicker]=\\\"delivery_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"delivery_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"delivery_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #delivery_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.delivery_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.delivery_date.hasError('required')\\\">Delivery date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Unit Price <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">Php</span>\\n                                        </div>\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"unit_price\\\" placeholder=\\\"0.00\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.unit_price.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.unit_price.hasError('required')\\\">Price is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.unit_price.hasError('min')\\\">Price must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Expiration Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [min]=\\\"min_date\\\" [matDatepicker]=\\\"expiration_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"expiration_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"expiration_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #expiration_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.expiration_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.expiration_date.hasError('required')\\\">Expiration date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Remarks</label>\\n                                    <textarea class=\\\"form-control mb-10\\\" rows=\\\"3\\\" maxlength=\\\"250\\\" formControlName=\\\"remarks\\\"></textarea>\\n                                    <ng-container *ngIf=\\\"medicineForm.controls.remarks.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"medicineForm.controls.remarks.hasError('maxlength')\\\">Remarks should not exceed 250 characters</p>\\n                                    </ng-container>\\n                                    <p class=\\\"text-right text-secondary\\\">{{ medicineForm.controls.remarks.value.length }}/250</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"goBack('form_cancel', 'medicine_update')\\\">\\n                                    Cancel\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(medicineForm.value, 'medicine_update')\\\" [disabled]=\\\"!medicineForm.valid\\\">\\n                                    Save Changes\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-5 col-md-5 col-sm-12 col-12\\\">\\n            <ng-container *ngIf=\\\"item.isDeleteable\\\">\\n                <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n                    <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Delete Item?</h1>\\n                    <p class=\\\"fs-14 action-note\\\">Deleting this item removed all the data on this dashboard.</p>\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-danger mt-30 btn-block\\\" (click)=\\\"openModal(medicineForm.value, 'medicine_delete')\\\">\\n                        <span class=\\\"fs-14\\\">Yes, I understand - delete item</span>\\n                    </button>\\n                </div>\\n            </ng-container>\\n        </div>\\n    </div>\\n</section>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h5 class=\\\"mb-30\\\">Daily House Harvest Report</h5>\\n            </div>\\n        </div>\\n        <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        \\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible && th.canToggle\\\" class=\\\"p-10 fs-12\\\">\\n                                    {{ th.label }}\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\" [ngClass]=\\\"{'break-now' : (i + 1) % 11 == 0}\\\">\\n                                    <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.prepared_by_date | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                                    <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.house_name.house_name }}</td>\\n                                    <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.age }}</td>\\n                                    <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.mortality | number }}</td>\\n                                    <td *ngIf=\\\"ths[4].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.mortality_rate | number : '1.2-2' }} %</td>\\n                                    <td *ngIf=\\\"ths[5].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.cull | number }}</td>\\n                                    <td *ngIf=\\\"ths[6].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.bird_count | number }}</td>\\n                                    <td *ngIf=\\\"ths[7].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.real_egg_count | number }} pcs</td>\\n                                    <td *ngIf=\\\"ths[8].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.production_rate | number : '1.2-2' }} %</td>\\n                                    <td *ngIf=\\\"ths[9].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.feeds.bags | number }}</td>\\n                                    <td *ngIf=\\\"ths[10].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.feeds.string }}</td>\\n                                    <td *ngIf=\\\"ths[11].isVisible\\\" class=\\\"p-10 fs-10\\\">\\n                                        <ng-container *ngFor=\\\"let medicine of item.medicine_name; let i = index\\\">\\n                                            {{ medicine.medicine }}{{ i < item.medicine_name.length - 1 ? ', ': '' }}\\n                                        </ng-container>\\n                                    </td>\\n                                    <td *ngIf=\\\"ths[12].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.sortingRecordstatus ? item.sortingRecordstatus : item.recordStatus }}</td>\\n                                    <td *ngIf=\\\"ths[13].isVisible\\\" class=\\\"p-10 fs-10\\\">{{ item.flockman }}</td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                        <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                        }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        \\n        <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 h-22\\\"></p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Production Per House</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 mb-30 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fw-500 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fw-500 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30 ml-0 mr-0 break-now\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                    <canvas baseChart \\n                        [datasets]=\\\"barChartData\\\"\\n                        [labels]=\\\"barChartLabels\\\"\\n                        [options]=\\\"barChartOptions\\\"\\n                        [plugins]=\\\"barChartPlugins\\\"\\n                        [legend]=\\\"barChartLegend\\\"\\n                        [chartType]=\\\"barChartType\\\">\\n                    </canvas>\\n                </div>\\n                <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>All Dates</p>\\n                </div>\\n                <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p class=\\\"fw-500\\\">{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <th class=\\\"p-10 fs-12\\\">\\n                                        Date\\n                                        <i *ngIf=\\\"order.order_by_column == 'received_by_date'\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'received_by_date' }\\\"></i>\\n                                    </th>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                    <th *ngIf=\\\"th.isVisible\\\" class=\\\"p-10 fs-12\\\">\\n                                        {{ th.label }}\\n                                    </th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                    <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                        <td class=\\\"p-10 fs-12\\\">{{ item.grouped_date | date: 'MM/dd/yyyy' }}</td>\\n                                        <ng-container *ngFor=\\\"let item of item.house; let i = index\\\">\\n                                            <td *ngIf=\\\"ths[i].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item && item.daily_sorting_report ? (item.daily_sorting_report.sum | number) : 0 }}</td>\\n                                        </ng-container>\\n                                        </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                    <tr>\\n                                        <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                            <ngx-skeleton-loader [theme]=\\\"{\\n                                            'border-radius' : '5px',\\n                                            'margin-bottom' : '0px',\\n                                            'height' : '20px'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                    <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \".card-radius {\\n  border-radius: 10px;\\n  box-shadow: 9px 10px 20px rgba(54, 60, 69, 0.1);\\n}\\n\\n.card-line {\\n  color: #EAEDF0;\\n}\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack('go_back', 'staff_update')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to staff profile</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-12\\\">\\n            <h1 class=\\\"heading\\\">Edit staff details</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-9 col-lg-7 col-md-7 col-sm-12 col-12\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"userForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading\\\">Basic Info.</h1>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Select a role <span class=\\\"required\\\">*</span></label>\\n                                    <ng-container *ngIf=\\\"user_logged_in.id == user_info.id\\\">\\n                                        <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"role\\\" placeholder=\\\"Select staff role\\\" (selectionChange)=\\\"changeRole($event)\\\" disabled>\\n                                            <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.value\\\">{{ role.label }}</mat-option>\\n                                        </mat-select>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"user_logged_in.id !== user_info.id\\\">\\n                                        <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"role\\\"\\n                                            placeholder=\\\"Select staff role\\\" (selectionChange)=\\\"changeRole($event)\\\">\\n                                            <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.value\\\">{{ role.label }}</mat-option>\\n                                        </mat-select>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"userForm.controls.role.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.role.hasError('required')\\\">Staff role is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">First Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"first_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.first_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.first_name.hasError('required')\\\">First name is\\n                                            required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.first_name.hasError('maxlength')\\\">First name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Last Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"last_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.last_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.last_name.hasError('required')\\\">\\n                                            Last name is required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.last_name.hasError('maxlength')\\\">Last name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Username <span\\n                                            class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"username\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.username.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.username.hasError('required')\\\">Username is required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.username.hasError('maxlength')\\\">Username must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\" *ngIf=\\\"userForm.controls.role.value == 4 || userForm.controls.role.value == 5\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Email <span\\n                                            class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"email\\\" formControlName=\\\"email\\\" maxlength=\\\"50\\\" minlength=\\\"6\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.email.touched\\\">\\n                                        <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.email.hasError('required')\\\">Email is required</p>\\n                                            <p class=\\\"text-danger\\\"\\n                                            *ngIf=\\\"userForm.controls.email.hasError('pattern')\\\">Email is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('maxlength')\\\">Email must not exceed 50 characters</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('minlength')\\\">Email must not contain at least 6 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Mobile Phone <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">+63</span>\\n                                        </div>\\n                                        <input type=\\\"tel\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"number\\\" placeholder=\\\"xxx xxx xxxx\\\" maxlength=\\\"10\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"userForm.controls.number.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('required')\\\">\\n                                            Mobile phone is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('pattern')\\\">\\n                                            Mobile phone is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('maxlength')\\\">\\n                                            Mobile phone must not exceed 10 digits</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('minlength')\\\">\\n                                            Mobile phone must be atleast 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Address <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"location\\\" maxlength=\\\"60\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.location.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.location.hasError('required')\\\">\\n                                            Address is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.location.hasError('maxlength')\\\">Address must not exceed 60 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Password</label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"password\\\"/>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                            \\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 text-right\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"generatePassword()\\\">Generate</button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading mb-30\\\">Profile Photo</h1>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-2 col-lg-3 col-md-3 col-sm-3 col-3\\\">\\n                                <img *ngIf=\\\"!isProfileImageLoaded && !profilePhoto\\\" class=\\\"avatar img-responsive\\\" src=\\\"../../../../../assets/images/profile.svg\\\">\\n                                <img *ngIf=\\\"!isProfileImageLoaded && profilePhoto\\\" class=\\\"avatar img-responsive\\\" [src]=\\\"profilePhoto\\\">\\n                                <image-cropper \\n                                    class=\\\"avatar img-responsive {{isProfileImageLoaded ? '' : 'd-none' }}\\\"\\n                                    [imageChangedEvent]=\\\"profilePhoto\\\"\\n                                    [maintainAspectRatio]=\\\"true\\\"\\n                                    [aspectRatio]=\\\"5 / 5\\\"\\n                                    [resizeToWidth]=\\\"100\\\"\\n                                    format=\\\"png,jpg,jpeg,ico\\\"\\n                                    (imageCropped)=\\\"imageProfilePhotoCropped($event)\\\"\\n                                    (imageLoaded)=\\\"imageProfileLoaded()\\\"\\n                                    [autoCrop]= \\\"true\\\"\\n                                ></image-cropper>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-9 col-md-9 col-sm-9 col-9\\\">\\n                                <p>Choose a file to upload:</p>\\n                                <div class=\\\"form-group row\\\">\\n                                    <input id=\\\"file-upload\\\" class=\\\"d-none\\\" type=\\\"file\\\" (change)=\\\"fileChange($event)\\\" accept=\\\"image/jpeg, image/png\\\"/>\\n                                    <div class=\\\"col-xl-6 col-lg-6 col-md-12\\\">\\n                                        <label for=\\\"file-upload\\\" class=\\\"btn btn-primary btn-block\\\">\\n                                            Choose a file\\n                                        </label>\\n                                    </div>\\n                                    <div class=\\\"col-xl-6 col-lg-6 col-md-12 flex-align-center\\\" *ngIf=\\\"!isProfileImageLoaded && !profilePhoto\\\">\\n                                        <p class=\\\"m-0 font-italic\\\">No file chosen</p>\\n                                    </div>\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"profileUploadWrongFile\\\">Image is not valid</p>\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"uploadMaxLimitReached\\\">Image must not exceed 1MB</p>\\n  \\n                                    <div class=\\\"col-xl-8 col-lg-12 col-md-12\\\">\\n                                        <p class=\\\"note fs-12 text-justify\\\">Maximum image file size is 1MB. Try resizing it to atleast 500x500 px in\\n                                            resolution.</p>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-6 ml-xl-auto ml-lg-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\"\\n                                    (click)=\\\"goBack('form_cancel', 'staff_update')\\\">\\n                                    Cancel\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\"\\n                                    (click)=\\\"openModal(userForm.value, 'user_update')\\\" [disabled]=\\\"!userForm.valid\\\">\\n                                    Save Changes\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n<!--         <div class=\\\"col-xl-3 col-lg-5 col-md-5 col-sm-12 col-12\\\">\\n            <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n                <ng-container *ngIf=\\\"user_logged_in.id == user_info.id\\\">\\n                    <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Note</h1>\\n                    <p class=\\\"fs-14 action-note\\\">Deleting your own account is prohibited.</p>\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary mt-30 btn-block\\\" disabled>\\n                        <span class=\\\"fs-14\\\">Yes, I understand - delete user</span>\\n                    </button>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"user_logged_in.id != user_info.id\\\">\\n                    <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Delete User?</h1>\\n                    <p class=\\\"fs-14 action-note\\\">Deleting a user removes all the data on this dashboard.</p>\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-danger mt-30 btn-block\\\" (click)=\\\"openModal(userForm.value, 'user_delete')\\\">\\n                        <span class=\\\"fs-14\\\">Yes, I understand - delete user</span>\\n                    </button>\\n                </ng-container>\\n            </div>\\n        </div> -->\\n    </div>\\n</section>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Overall Sales</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30 ml-0 mr-0 mt-10\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                    <p>Fully Paid Orders</p>\\n                    <h3>₱ {{ item ? (item.fully_paid_orders | number : '1.2-2') : 0 }}</h3>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                    <p>Pending Orders</p>\\n                    <h3>{{ item ? (item.pending_orders | number) : 0 }}</h3>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                    <p>Collectibles</p>\\n                    <h3>{{ item ? (item.collectibles | number) : 0 }}</h3>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p>Collectible Amount</p>\\n                    <h3>₱ {{ item ? (item.collectibles_amount | number : '1.2-2') : 0 }}</h3>\\n                </div>\\n            </div>\\n            <!-- <div class=\\\"row mb-30 ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-10\\\">Overall Harvested Eggs</p>\\n                    <h1 class=\\\"heading\\\">{{ overall_harvested_eggs | number }}</h1>\\n                </div>\\n            </div> -->\\n            <div class=\\\"row mb-30 ml-0 mr-0 break-now\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                    <canvas baseChart \\n                        [datasets]=\\\"lineChartData\\\"\\n                        [labels]=\\\"lineChartLabels\\\"\\n                        [options]=\\\"lineChartOptions\\\"\\n                        [plugins]=\\\"lineChartPlugins\\\"\\n                        [legend]=\\\"lineChartLegend\\\"\\n                        [chartType]=\\\"lineChartType\\\">\\n                    </canvas>\\n                </div>\\n                <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>All Dates</p>\\n                </div>\\n                <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                    <th *ngIf=\\\"th.isVisible\\\" class=\\\"p-10 fs-12\\\">\\n                                        {{ th.label }}\\n                                    </th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                    <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                        <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.date | date: 'MM/dd/yyyy' }}</td>\\n                                        <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-12\\\">₱ {{ item.total | number : '1.2-2' }}</td>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                    <tr>\\n                                        <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                            <ngx-skeleton-loader [theme]=\\\"{\\n                                            'border-radius' : '5px',\\n                                            'margin-bottom' : '0px',\\n                                            'height' : '20px'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                    <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <h5 class=\\\"mb-30\\\">Fresh Eggs Inventory/Stocks</h5>\\n            </div>\\n        </div>\\n        <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-0 fs-14 fw-500\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        \\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table>\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible && th.canToggle\\\" class=\\\"p-10 fs-12\\\">\\n                                    {{ th.label }}\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                            <tr *ngFor=\\\"let item of items; let i = index\\\" [ngClass]=\\\"{'break-now' : (i + 1) % 11 == 0}\\\">\\n                                <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                                <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.beginning_stocks | number }}</td>\\n                                <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.total_harvested | number }}</td>\\n                                <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.waste_sales | number }}</td>\\n                                <td *ngIf=\\\"ths[4].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item.total_remaining_stocks | number }}</td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!isLoaded\\\">\\n                            <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius' : '5px',\\n                                    'margin-bottom' : '0px',\\n                                    'height' : '20px'\\n                                }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                            <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row ml-0 mr-0 mt-20\\\">\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                        <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                        <p class=\\\"mb-0 h-22\\\"></p>\\n                        <hr class=\\\"m-0\\\">\\n                        <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-auto offset-xl-2\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack('go_back', 'feed_create')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <h1 class=\\\"heading\\\">Add new feed</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"feedForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Feed Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"feeds\\\"/>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.feeds.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.feeds.hasError('required')\\\">Feed name is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\"></div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Net weight of bags <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"kg_per_bag\\\" (input)=\\\"convertWeight($event)\\\" placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">kg</span>\\n                                        </div>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.kg_per_bag.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.kg_per_bag.hasError('required')\\\">Net weight is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.kg_per_bag.hasError('min')\\\">Net weight must not be less than 0</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.kg_per_bag.hasError('max')\\\">Net weight must not exceed 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">No. of Orders <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"pieces\\\" placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">pcs</span>\\n                                        </div>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.pieces.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.pieces.hasError('required')\\\">Number of orders is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.pieces.hasError('min')\\\">Number of orders must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Converted net weight</label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"converted\\\" disabled placeholder=\\\"0\\\"/>\\n                                        <div class=\\\"input-group-append\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">g</span>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Delivery Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [max]=\\\"max_date\\\" [matDatepicker]=\\\"delivery_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"delivery_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"delivery_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #delivery_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.delivery_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.delivery_date.hasError('required')\\\">Delivery date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Unit Price <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">Php</span>\\n                                        </div>\\n                                        <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"unit_price\\\" placeholder=\\\"0.00\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.unit_price.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.unit_price.hasError('required')\\\">Price is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.unit_price.hasError('min')\\\">Price must not be less than 0</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Expiration Date <span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [min]=\\\"min_date\\\" [matDatepicker]=\\\"expiration_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"expiration_date\\\" class=\\\"form-control mb-10\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"expiration_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #expiration_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.expiration_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.expiration_date.hasError('required')\\\">Expiration date is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Remarks</label>\\n                                    <textarea class=\\\"form-control mb-10\\\" rows=\\\"3\\\" maxlength=\\\"250\\\" formControlName=\\\"remarks\\\"></textarea>\\n                                    <ng-container *ngIf=\\\"feedForm.controls.remarks.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"feedForm.controls.remarks.hasError('maxlength')\\\">Remarks should not exceed 250 characters</p>\\n                                    </ng-container>\\n                                    <p class=\\\"text-right text-secondary\\\">{{ feedForm.controls.remarks.value.length }}/250</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"goBack('form_cancel', 'feed_create')\\\">\\n                                    Cancel\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(feedForm.value, 'feed_save')\\\" [disabled]=\\\"!feedForm.valid\\\">\\n                                    <i class=\\\"icon-add\\\"></i>\\n                                    <span class=\\\"ml-15\\\">Add Item</span>\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \".date-view {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  flex-wrap: wrap;\\n}\\n.date-view p {\\n  margin-bottom: 0;\\n}\\n.date-view .date {\\n  border-right: 1px solid #C1C2C3;\\n}\\n.date-view .view-num {\\n  background: #D1D7DE;\\n  border-radius: 5px;\\n  padding: 7px 11px;\\n}\\n.date-view .last {\\n  font-style: italic;\\n  color: #8D8F93;\\n}\\n.custom-card {\\n  background: #FFFFFF;\\n  border-radius: 5px;\\n  padding-top: 22px;\\n  padding-left: 17px;\\n  padding-bottom: 30px;\\n  margin: 14px 15px;\\n  max-height: 115px;\\n}\\n.masonry-item {\\n  width: 100%;\\n  /* margin-left: -15px;\\n  margin-right: -15px; */\\n}\\n.masonry-item .body-card {\\n  width: calc(50% - 15px);\\n  margin-bottom: 30px;\\n}\\n.body-card {\\n  padding: 24px;\\n  border: none;\\n}\\n.meds-title [class*=col-] {\\n  border-bottom: 2px solid #e5eeff;\\n}\\n.meds-title [class*=col-] .mini-heading {\\n  color: #72787F;\\n}\\n.meds-cont [class*=col-] {\\n  border-bottom: 1px solid #e5eeff;\\n  /* &:last-child {\\n      border-bottom: none;\\n  } */\\n}\\n.scrollable {\\n  overflow-y: scroll;\\n}\"","export default \"p {\\n  font-size: 16px;\\n  color: #72787F;\\n  text-transform: none;\\n}\\n\\n.heading {\\n  font-size: 24px;\\n  font-weight: bold;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.sub-heading {\\n  color: #72787F;\\n}\\n\\n.sub-heading.italic {\\n  font-style: italic;\\n}\\n\\n.sub-heading strong {\\n  color: #1E2631;\\n}\\n\\n.mini-heading {\\n  font-size: 20px;\\n  font-weight: 500;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.card-heading {\\n  font-size: 13px;\\n  font-weight: normal;\\n  text-transform: uppercase;\\n  color: #72787F;\\n}\\n\\n.sidebar {\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li {\\n  font-size: 16px;\\n}\\n\\n.sidebar ul li a.main-nav {\\n  color: #72787F;\\n}\\n\\n.sidebar ul li a.main-nav.sub {\\n  font-size: 14px;\\n}\\n\\n.sidebar ul li a.main-nav:hover {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li.active a {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\nmat-checkbox label {\\n  font-size: 16px !important;\\n}\\n\\n.vertical-text {\\n  transform: rotate(-90deg);\\n  -webkit-transform: rotate(-90deg);\\n  -moz-transform: rotate(-90deg);\\n  -ms-transform: rotate(-90deg);\\n  -o-transform: rotate(-90deg);\\n}\\n\\n.vertical-text-full {\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n  position: absolute;\\n  left: -25%;\\n  top: 50%;\\n}\\n\\n.body-card h1 {\\n  font-weight: normal;\\n}\\n\\n.body-card .action-note {\\n  line-height: 21px;\\n}\\n\\n.body-card .btn-secondary {\\n  width: 100%;\\n  padding-top: 9px;\\n  padding-bottom: 5px;\\n}\\n\\n.body-card .btn-secondary .cus-layer {\\n  height: 100%;\\n}\\n\\n.body-card .row .row {\\n  width: 100% !important;\\n}\\n\\n.body-card .row .row p {\\n  color: #72787F;\\n}\\n\\n.field-pasword {\\n  border: transparent;\\n  outline: none;\\n  border: 0;\\n}\"","export default \"<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Medicine Consumption</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 mb-30 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30 ml-0 mr-0 break-now\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                    <canvas baseChart \\n                        [datasets]=\\\"barChartData\\\"\\n                        [labels]=\\\"barChartLabels\\\"\\n                        [options]=\\\"barChartOptions\\\"\\n                        [plugins]=\\\"barChartPlugins\\\"\\n                        [legend]=\\\"barChartLegend\\\"\\n                        [chartType]=\\\"barChartType\\\">\\n                    </canvas>\\n                </div>\\n                <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>All Dates</p>\\n                </div>\\n                <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <th class=\\\"p-10 fs-12\\\">\\n                                        Date\\n                                        <i *ngIf=\\\"order.order_by_column == 'received_by_date'\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'received_by_date' }\\\"></i>\\n                                    </th>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                    <th *ngIf=\\\"th.isVisible\\\" class=\\\"p-10 fs-12\\\">\\n                                        {{ th.label }}\\n                                    </th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                    <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                        <td>{{ item.date | date: 'LL/dd/yyyy'}}</td>\\n                                        <ng-container *ngFor=\\\"let house of item.house; let x = index\\\">\\n                                            <td *ngIf=\\\"ths[x].isVisible\\\">\\n                                                {{ house.medicine_volume }}\\n                                            </td>\\n                                        </ng-container>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                    <tr>\\n                                        <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                            <ngx-skeleton-loader [theme]=\\\"{\\n                                            'border-radius' : '5px',\\n                                            'margin-bottom' : '0px',\\n                                            'height' : '20px'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                    <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n\"","export default \"\"","export default \".btn-back {\\n  color: #444444;\\n  border: 2px solid #444444;\\n  background-color: #fafafa;\\n}\\n\\n.btn-back:hover {\\n  color: #1E2631;\\n}\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Inflow/Outflow</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30 mb-25\\\">\\n        <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                        <p>Total Eggs Inflow</p>\\n                        <h3>{{ item ? (item.total_egg_inflow | number) : 0 }}</h3>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                        <p>Total Eggs Outflow</p>\\n                        <h3>{{ item ? (item.total_egg_outflow | number) : 0 }}</h3>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <div class=\\\"inner-group in-line\\\">\\n                                <label class=\\\"mr-15\\\">Show:</label>\\n\\n                                <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                                <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose sales dates' }}\\n                                    <i class=\\\"icon-arrow-drop-down ml-5 p-initial\\\"></i>\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\" *ngIf=\\\"from && to\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <!-- <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                <p>Fully Paid Orders</p>\\n                <h3>₱ {{ item ? (item.fully_paid_orders | number : '1.2-2') : 0 }}</h3>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                <p>Pending Orders</p>\\n                <h3>{{ item ? (item.pending_orders | number) : 0 }}</h3>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                <p>Collectibles</p>\\n                <h3>{{ item ? (item.collectibles | number) : 0 }}</h3>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p>Collectible Amount</p>\\n                <h3>₱ {{ item ? (item.collectibles_amount | number : '1.2-2') : 0 }}</h3>\\n            </div>\\n        </div> -->\\n        \\n        <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                <canvas baseChart \\n                    [datasets]=\\\"barChartData\\\"\\n                    [labels]=\\\"barChartLabels\\\"\\n                    [options]=\\\"barChartOptions\\\"\\n                    [plugins]=\\\"barChartPlugins\\\"\\n                    [legend]=\\\"barChartLegend\\\"\\n                    [chartType]=\\\"barChartType\\\">\\n                </canvas>\\n            </div>\\n            <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>All Dates</p>\\n            </div>\\n            <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row mb-25\\\">\\n          <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"inner-group in-line\\\">\\n                <label class=\\\"mr-15\\\">Show</label>\\n                <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                    <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                </mat-select>\\n                <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                    <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                </mat-select>\\n                <label>of {{ totalItems | number }} entries</label>\\n              </div>\\n            </div>\\n          </div>\\n          <!-- <div class=\\\"col-xl-3 offset-xl-2 col-lg-4 offset-lg-2 col-md-8 col-sm-9 col-8\\\">\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"inner-group search\\\">\\n                <i class=\\\"icon-search\\\"></i>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n                  (keydown.enter)=\\\"searchItem()\\\" />\\n              </div>\\n            </div>\\n          </div> -->\\n          <!-- <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n            <div class=\\\"form-group\\\">\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n                <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n              </button>\\n            </div>\\n          </div> -->\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n          <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n            <table>\\n              <thead>\\n                <tr>\\n                  <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                    <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                      {{ th.label }}\\n                      <ng-container *ngIf=\\\"th.canSort\\\">\\n                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                      </ng-container>\\n                    </th>\\n                  </ng-container>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                  <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                    <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"w-25-per\\\">{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                    <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"w-25-per\\\">{{ item.egg_in | number }}</td>\\n                    <td *ngIf=\\\"ths[2].isVisible\\\" class=\\\"w-25-per\\\">{{ item.egg_out | number }}</td>\\n                    <td *ngIf=\\\"ths[3].isVisible\\\" class=\\\"w-25-per\\\">\\n                      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/inventory-stocks/fresh-eggs/view', item.date]\\\">\\n                        <i class=\\\"icon-datatables-view\\\"></i>\\n                        View\\n                      </button>\\n                    </td>\\n                  </tr>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"!isLoaded\\\">\\n                  <tr>\\n                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                      <ngx-skeleton-loader [theme]=\\\"{\\n                        'border-radius' : '5px',\\n                        'margin-bottom' : '0px',\\n                        'height' : '20px'\\n                      }\\\"></ngx-skeleton-loader>\\n                    </td>\\n                  </tr>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                  <tr>\\n                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                  </tr>\\n                </ng-container>\\n              </tbody>\\n              <tfoot>\\n                <tr>\\n                  <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                    <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                      {{ th.label }}\\n                      <ng-container *ngIf=\\\"th.canSort\\\">\\n                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                      </ng-container>\\n                    </th>\\n                  </ng-container>\\n                </tr>\\n              </tfoot>\\n            </table>\\n          </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-12 text-center\\\">\\n              <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n            </div>\\n          </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n          <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"inner-group in-line\\\">\\n                <label class=\\\"mr-15\\\">Show</label>\\n                <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                    <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                </mat-select>\\n                <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                    <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                </mat-select>\\n                <label>of {{ totalItems | number }} entries</label>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n            <ul class=\\\"paginate pull-right\\\">\\n              <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                  <a (click)=\\\"gotoPage(prev_page)\\\">\\n                      Previous\\n                  </a>\\n              </li>\\n              <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n              </ng-container>\\n              <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                  <a (click)=\\\"gotoPage(next_page)\\\">\\n                      Next\\n                  </a>\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n      </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n            <h1 class=\\\"heading\\\">Medicine Management</h1>\\n            <p class=\\\"sub-heading mb-8\\\">Types of medicines: <strong>{{ totalItems }}</strong></p>\\n            <ng-container *ngIf=\\\"showtimeago\\\">\\n                <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '10px',\\n                    'height' : '20px'\\n                }\\\"></ngx-skeleton-loader>\\n            </ng-container>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n            <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/feeds-medicine-management/medicine/create\\\">\\n                <i class=\\\"icon-add\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new medicine</span>\\n            </button>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <h6 class=\\\"card-heading\\\">Filters</h6>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [matDatepicker]=\\\"delivery_date_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseDeliveryDate($event)\\\">\\n                            <mat-datepicker #delivery_date_picker></mat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"delivery_date_picker.open()\\\">{{ delivery_date ? 'Delivery Date - ' + (delivery_date | date: 'MM/dd/yyyy') : 'Delivery Date' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [matDatepicker]=\\\"expiration_date_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseExpirationDate($event)\\\">\\n                            <mat-datepicker #expiration_date_picker></mat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"expiration_date_picker.open()\\\">{{ expiration_date ? 'Expiration Date - ' + (expiration_date | date: 'MM/dd/yyyy') : 'Expiration Date' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">Clear Filters</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row mb-25\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-3 offset-xl-2 col-lg-4 offset-lg-2 col-md-8 col-sm-9 col-8\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group search\\\">\\n                        <i class=\\\"icon-search\\\"></i>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search medicine name\\\" [(ngModel)]=\\\"search\\\" (keydown.enter)=\\\"searchItem()\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n                        <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n                        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                            <tr *ngFor=\\\"let item of items; let i = index\\\" [routerLink]=\\\"!item.isExpired ? ['/feeds-medicine-management/medicine/update', item.id] : return\\\">\\n                                <td class=\\\"w-10-per\\\">{{ item.medicine }} <span class=\\\"text-danger font-italic\\\" *ngIf=\\\"item.isExpired\\\">(Expired)</span></td>\\n                                <td>{{ item.medicine_unit.unit }}</td>\\n                                <td>{{ item.net_weight | number : '1.2-2' }}</td>\\n                                <td>{{ item.pieces | number }}</td>\\n                                <td>{{ item.consumed | number : '1.2-2' }}</td>\\n                                <td>{{ item.remaining | number : '1.2-2' }}</td>\\n                                <td>{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                                <td>{{ item.delivery_date | date: 'MM/dd/yyyy' }}</td>\\n                                <td>{{ item.unit_price | number : '1.2-2' }}</td>\\n                                <td [ngClass]=\\\"{ 'text-danger' : item.isExpired }\\\">{{ item.expiration_date | date: 'MM/dd/yyyy' }}</td>\\n                                <td class=\\\"w-20-per\\\">{{ item.remarks }}</td>\\n                                <td>\\n                                    <button type=\\\"button\\\" *ngIf=\\\"!item.isExpired\\\" mat-flat-button class=\\\"btn btn-clear\\\" [routerLink]=\\\"['/feeds-medicine-management/medicine/update', item.id]\\\">\\n                                        <i class=\\\"icon-datatables-edit\\\"></i>\\n                                        Edit\\n                                    </button>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!isLoaded\\\">\\n                            <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                            <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                    <tfoot>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n              </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                        <a (click)=\\\"gotoPage(prev_page)\\\">Previous</a>\\n                    </li>\\n                    <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                        <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                    </ng-container>\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                        <a (click)=\\\"gotoPage(next_page)\\\">Next</a>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"discountForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\" *ngIf=\\\"item && item.mode_of_payment == 1\\\">\\n                <label class=\\\"text-secondary\\\">Total Price</label>\\n                <p>₱ {{ item ? (item.total_price | number : '1.2-2') : 0 }}</p>\\n            </div>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"item && item.mode_of_payment == 2\\\">\\n                <label class=\\\"text-secondary\\\">Credited Price</label>\\n                <p>₱ {{ item ? (item.payment.balance | number : '1.2-2') : 0 }}</p>\\n            </div>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"item && item.mode_of_payment == 3\\\">\\n                <label class=\\\"text-secondary\\\">Initial amount to pay</label>\\n                <p>₱ {{ item ? (item.payment.payment | number : '1.2-2') : 0 }}</p>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Discount Amount <span class=\\\"required\\\">*</span></label>\\n                <input type=\\\"number\\\" formControlName=\\\"discount\\\" class=\\\"form-control mb-10\\\" (input)=\\\"calculateFinalPrice($event)\\\"/>\\n                <ng-container *ngIf=\\\"discountForm.controls.discount.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"discountForm.controls.discount.hasError('required')\\\">Discount is required</p>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"discountForm.controls.discount.hasError('min')\\\">Discount must be more than zero</p>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"discountForm.controls.discount.hasError('max')\\\">Discount must not exceed the total price</p>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Discounted Price</label>\\n                <p>₱ {{ discountForm.controls.total_price.value | number : '1.2-2' }}</p>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-block btn-clear\\\" (click)=\\\"closeModal()\\\">Cancel</button>\\n        </div>\\n        <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-primary btn-block\\\" [disabled]=\\\"!discountForm.valid\\\">Save</button>\\n        </div>\\n    </div>\\n</form>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-10\\\">\\n            <h1 class=\\\"heading\\\">View House/Building Details</h1>\\n        </div>\\n        <div class=\\\"col-2\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-30\\\">\\n        <div class=\\\"col-9\\\">\\n            <div class=\\\"container-card view-record p-30\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">House/Building</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.house }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Daily Report Progress</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.daily_report_progress }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Month</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.current_age_of_chicken ? (house_data.current_age_of_chicken.created_at | date : 'MMMM') : '' }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Year</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.current_age_of_chicken ? (house_data.current_age_of_chicken.created_at | date : 'yyyy') : '' }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Beginning Population of Chickens</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.beginning_population }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Age of Chickens</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ house_data.age_chicken.age }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-4 col-md-5 col-sm-6 col-12\\\">\\n<!--             <div class=\\\"body-card pt-18 pl-24 pr-24 pb-43\\\">\\n                <h1 class=\\\"mini-heading fs-16 fw-500 mb-10\\\">Actions</h1>\\n                <p class=\\\"fs-14 action-note\\\">Here are the actions you can apply for this order details.</p>\\n                <button type=\\\"button\\\" class=\\\"btn btn-secondary mt-30 btn-block\\\" (click)=\\\"updateMed()\\\" mat-flat-button>\\n                    <div class=\\\"cus-layer ml-auto mr-auto\\\">\\n                        <i class=\\\"icon-edit\\\"></i>\\n                        <span class=\\\"ml-8 fs-14\\\">Edit Details</span>\\n                    </div>\\n                </button>\\n            </div>\\n            <br> -->\\n            <div class=\\\"body-card pt-18 pl-24 pr-24 pb-38\\\">\\n                <h1 class=\\\"mini-heading fs-16 fw-500 mb-20\\\">Download Report</h1>\\n                <p class=\\\"fs-14 action-note\\\">You can download this report as:</p>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block mb-12\\\" (click)=\\\"openPdf()\\\" [disabled]=\\\"!isLoaded\\\">\\n                    <span class=\\\"ml-15\\\">Download as PDF</span>\\n                </button>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n                    <span class=\\\"ml-15\\\">Download as CSV</span>\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n            <h1 class=\\\"heading\\\">Feeds and Medicine Consumption Daily Report</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <h6 class=\\\"card-heading\\\">Filters</h6>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n<!--                             <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"role_id\\\"\\n                                (selectionChange)=\\\"changeRole($event)\\\" placeholder=\\\"Staff Role\\\">\\n                                <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.value\\\">{{ role.label }}</mat-option>\\n                            </mat-select> -->\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n<!--                             <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\"\\n                                (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\"\\n                                (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Added - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Added' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button> -->\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"form-group\\\">\\n<!--                     <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n                        Clear Filters\\n                    </button> -->\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row mb-25\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n<!--                 <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\"\\n                            (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\"\\n                            *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div> -->\\n            </div>\\n            <div class=\\\"col-xl-3 offset-xl-2 col-lg-4 offset-lg-2 col-md-8 col-sm-9 col-8\\\">\\n                <div class=\\\"form-group\\\">\\n<!--                     <div class=\\\"inner-group search\\\">\\n                        <i class=\\\"icon-search\\\"></i>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n                            (keydown.enter)=\\\"searchItem()\\\" />\\n                    </div> -->\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n                <div class=\\\"form-group\\\">\\n<!--                     <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\"\\n                        [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n                        <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n                        <span\\n                            class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n                    </button> -->\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\"\\n                            (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\"\\n                            [(ngModel)]=\\\"visible_columns\\\">\\n                            <mat-select-trigger>Column Visibility</mat-select-trigger>\\n                            <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                                <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                            </ng-container>\\n                        </mat-select>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\"\\n                                    (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\"\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"isLoaded && feeds_and_medicine.length > 0\\\">\\n                            <ng-container *ngFor=\\\"let feeds_medicine of feeds_and_medicine; let i = index\\\">\\n                                <tr [ngClass]=\\\"dateToday > feeds_medicine.created_at ? 'rowActive' : '' \\\">\\n                                    <td *ngIf=\\\"ths[0].isVisible\\\">{{ feeds_medicine.created_at | date: 'd' }}</td>\\n                                    <td *ngIf=\\\"ths[1].isVisible\\\">\\n                                        {{ feeds_medicine.age_week > 1 ? feeds_medicine.age_week+' weeks' : feeds_medicine.age_week+' week' }},\\n                                        {{ feeds_medicine.age_day > 1 ? feeds_medicine.age_day+' days' : feeds_medicine.age_day+' day' }}</td>\\n                                    <td *ngIf=\\\"ths[2].isVisible\\\">{{ feeds_medicine.mortality }}</td>\\n                                    <td *ngIf=\\\"ths[3].isVisible\\\">{{ feeds_medicine.mortality_rate | percent:'1.1-2' }}</td>\\n                                    <td *ngIf=\\\"ths[4].isVisible\\\">{{ feeds_medicine.cull }}</td>\\n                                    <td *ngIf=\\\"ths[5].isVisible\\\">{{ feeds_medicine.end_bird_population }}</td>\\n                                    <td *ngIf=\\\"ths[6].isVisible\\\">{{ feeds_medicine.real_egg_count }}</td>\\n                                    <td *ngIf=\\\"ths[7].isVisible\\\">{{ feeds_medicine.production_rate | number:'2.1-2' }}%</td>\\n                                    <td [ngClass]=\\\"feeds_medicine.created_at > dateToday ? 'activeRow' : '' \\\" (click)=\\\"openModal(feeds_medicine, 'feed')\\\" *ngIf=\\\"ths[8].isVisible\\\">\\n                                        {{ feeds_medicine.feed_info ? feeds_medicine.feed_info.feed : '' }} ({{ feeds_medicine.feed_consumption }} g)</td>\\n                                    <td *ngIf=\\\"ths[9].isVisible\\\">{{ feeds_medicine.feeds ? feeds_medicine.feeds.string : '' }}</td>\\n                                    <td *ngIf=\\\"ths[10].isVisible\\\">{{ feeds_medicine.feed_info ? feeds_medicine.feed_info.feed : '' }} ({{ feeds_medicine.rec_feed_consumption }} g)</td>\\n                                    <td *ngIf=\\\"ths[11].isVisible\\\">{{ feeds_medicine.req_feeds ? feeds_medicine.req_feeds.string : '' }}</td>\\n                                    <td *ngIf=\\\"ths[12].isVisible\\\" [ngClass]=\\\"feeds_medicine.created_at > dateToday ? 'activeRow' : '' \\\" (click)=\\\"openModal(feeds_medicine, 'medicine')\\\">\\n                                        <ng-container *ngFor=\\\"let med of feeds_medicine.medicine_name; let m = index\\\">\\n                                            {{ med.medicine }} ({{ med.medicine_value }} {{ med.medicine_unit.unit }}){{ m < feeds_medicine.medicine_name.length - 1 ? ',' : '' }}<br *ngIf=\\\"m < feeds_medicine.medicine_name.length - 1\\\">\\n                                        </ng-container>\\n                                    </td>\\n                                    \\n                                </tr>\\n                            </ng-container>\\n                        </ng-container>\\n<!--                         <ng-container *ngIf=\\\"!isLoaded\\\">\\n                            <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                            </tr>\\n                        </ng-container> -->\\n                        <ng-container *ngIf=\\\"isLoaded && feeds_and_medicine.length == 0\\\">\\n                            <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                    <tfoot>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\"\\n                                    (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\"\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 col-lg-4 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n<!--                 <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\"\\n                            (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\"\\n                            *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div> -->\\n            </div>\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                        <a (click)=\\\"gotoPage(prev_page)\\\">\\n                            Previous\\n                        </a>\\n                    </li>\\n                    <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                        <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">\\n                            {{ i+1 }}</li>\\n                    </ng-container>\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                        <a (click)=\\\"gotoPage(next_page)\\\">\\n                            Next\\n                        </a>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Fresh Eggs Inventory/Stocks</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-10 ml-0 mr-0 mt-10\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                    <p>Beginning stocks</p>\\n                    <h3>{{ item.beginning_stocks | number }}</h3>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                    <p>Harvested Eggs for this day</p>\\n                    <h3>{{ item.total_harvested | number }}</h3>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                    <p>No. of Waste/Sales</p>\\n                    <h3>{{ item.waste_sales | number }}</h3>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p>Total Remaining for this day</p>\\n                    <h3>{{ item.total_remaining_stocks | number }}</h3>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                    <th *ngIf=\\\"th.isVisible && th.canToggle\\\" class=\\\"p-10 fs-12\\\">\\n                                        {{ th.label }}\\n                                    </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                    <td class=\\\"p-10 fs-12\\\">{{ item.egg_type.type }}</td>\\n                                    <td class=\\\"p-10 fs-12\\\">\\n                                        <mat-chip-list>\\n                                        <mat-chip *ngIf=\\\"item.remaining > 0\\\" color=\\\"primary\\\">Available</mat-chip>\\n                                        <mat-chip *ngIf=\\\"item.remaining == 0\\\" color=\\\"danger\\\">Out of Stock</mat-chip>\\n                                        </mat-chip-list>\\n                                    </td>\\n                                    <td class=\\\"p-10 fs-12\\\">{{ item.beginning ? (item.beginning | number) : 0  }}</td>\\n                                    <td class=\\\"p-10 fs-12\\\">{{ item.harvested ? (item.harvested | number) : 0  }}</td>\\n                                    <td class=\\\"p-10 fs-12\\\">{{ item.sales ? (item.sales | number) : 0  }}</td>\\n                                    <td class=\\\"p-10 fs-12\\\">{{ item.remaining ? (item.remaining | number) : 0  }}</td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                        </tbody>\\n                    </table>\\n                </div>\\n            </ng-container>\\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n            <h1 class=\\\"heading\\\">Feeds Management</h1>\\n            <p class=\\\"sub-heading mb-8\\\">Types of feeds: <strong>{{ totalItems }}</strong></p>\\n            <ng-container *ngIf=\\\"showtimeago\\\">\\n                <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '10px',\\n                    'height' : '20px'\\n                }\\\"></ngx-skeleton-loader>\\n            </ng-container>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n            <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/feeds-medicine-management/feeds/create\\\">\\n                <i class=\\\"icon-add\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new feed</span>\\n            </button>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <h6 class=\\\"card-heading\\\">Filters</h6>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [matDatepicker]=\\\"delivery_date_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseDeliveryDate($event)\\\">\\n                            <mat-datepicker #delivery_date_picker></mat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"delivery_date_picker.open()\\\">{{ delivery_date ? 'Delivery Date - ' + (delivery_date | date: 'MM/dd/yyyy') : 'Delivery Date' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [matDatepicker]=\\\"expiration_date_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseExpirationDate($event)\\\">\\n                            <mat-datepicker #expiration_date_picker></mat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"expiration_date_picker.open()\\\">{{ expiration_date ? 'Expiration Date - ' + (expiration_date | date: 'MM/dd/yyyy') : 'Expiration Date' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">Clear Filters</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row mb-25\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-3 offset-xl-2 col-lg-4 offset-lg-2 col-md-8 col-sm-9 col-8\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group search\\\">\\n                        <i class=\\\"icon-search\\\"></i>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search feed name\\\" [(ngModel)]=\\\"search\\\" (keydown.enter)=\\\"searchItem()\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n                        <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n                        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                            <tr *ngFor=\\\"let item of items; let i = index\\\" [routerLink]=\\\"!item.isExpired ? ['/feeds-medicine-management/feeds/update', item.id] : return\\\">\\n                                <td class=\\\"w-10-per\\\">{{ item.feed }} <span class=\\\"text-danger font-italic\\\" *ngIf=\\\"item.isExpired\\\">(Expired)</span></td>\\n                                <td>{{ item.kg_per_bag | number : '1.2-2' }} kg</td>\\n                                <td>{{ item.converted | number : '1.2-2' }} g</td>\\n                                <td>{{ item.pieces | number }}</td>\\n                                <td>{{ item.consumed | number : '1.2-2' }} g</td>\\n                                <td>{{ item.remaining | number : '1.2-2' }} g</td>\\n                                <td>{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                                <td>{{ item.delivery_date | date: 'MM/dd/yyyy' }}</td>\\n                                <td>{{ item.unit_price | number : '1.2-2' }}</td>\\n                                <td [ngClass]=\\\"{ 'text-danger' : item.isExpired }\\\">{{ item.expiration_date | date: 'MM/dd/yyyy' }}</td>\\n                                <td class=\\\"w-20-per\\\">{{ item.remarks }}</td>\\n                                <td>\\n                                    <button type=\\\"button\\\" *ngIf=\\\"!item.isExpired\\\" mat-flat-button class=\\\"btn btn-clear\\\" [routerLink]=\\\"['/feeds-medicine-management/feeds/update', item.id]\\\">\\n                                        <i class=\\\"icon-datatables-edit\\\"></i>\\n                                        Edit\\n                                    </button>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!isLoaded\\\">\\n                            <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                            <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                    <tfoot>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n              </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                        <a (click)=\\\"gotoPage(prev_page)\\\">Previous</a>\\n                    </li>\\n                    <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                        <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                    </ng-container>\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                        <a (click)=\\\"gotoPage(next_page)\\\">Next</a>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-auto offset-xl-2\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack('go_back', 'customer_create')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <h1 class=\\\"heading\\\">Add new customer</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-8 offset-xl-2\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <form [formGroup]=\\\"userForm\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading\\\">Basic Info.</h1>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">First Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"first_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.first_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.first_name.hasError('required')\\\">First name is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.first_name.hasError('maxlength')\\\">First name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Last Name <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"last_name\\\" maxlength=\\\"50\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.last_name.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.last_name.hasError('required')\\\">Last name is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.last_name.hasError('maxlength')\\\">Last name must not exceed 50 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Customer Profile <span class=\\\"required\\\">*</span></label>\\n                                    <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" formControlName=\\\"customer_type_id\\\" placeholder=\\\"Select customer profile\\\">\\n                                        <mat-option *ngFor=\\\"let customer_type of customer_type_options\\\" [value]=\\\"customer_type.id\\\">{{ customer_type.type }}</mat-option>\\n                                    </mat-select>\\n                                    <ng-container *ngIf=\\\"userForm.controls.customer_type_id.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.customer_type_id.hasError('required')\\\">Customer profile is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Mobile Phone <span class=\\\"required\\\">*</span></label>\\n                                    <div class=\\\"input-group\\\">\\n                                        <div class=\\\"input-group-prepend\\\">\\n                                            <span class=\\\"input-group-text mb-10\\\">+63</span>\\n                                        </div>\\n                                        <input type=\\\"tel\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"number\\\" placeholder=\\\"xxx xxx xxxx\\\" maxlength=\\\"10\\\"/>\\n                                    </div>\\n                                    <ng-container *ngIf=\\\"userForm.controls.number.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('required')\\\">Mobile phone is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('pattern')\\\">\\n                                            Mobile phone is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('maxlength')\\\">\\n                                            Mobile phone must not exceed 10 digits</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.number.hasError('minlength')\\\">\\n                                            Mobile phone must be atleast 10 digits</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Email <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"email\\\" maxlength=\\\"50\\\" minlength=\\\"6\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.email.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('required')\\\">Email is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('pattern')\\\">Email is invalid</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('maxlength')\\\">Email must not exceed 50 characters</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.email.hasError('minlength')\\\">Email must not contain at least 6 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label class=\\\"text-secondary\\\">Address <span class=\\\"required\\\">*</span></label>\\n                                    <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"location\\\" maxlength=\\\"60\\\"/>\\n                                    <ng-container *ngIf=\\\"userForm.controls.location.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.location.hasError('required')\\\">Address is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"userForm.controls.location.hasError('maxlength')\\\">Address must not exceed 60 characters</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"p-30\\\">\\n                        <h1 class=\\\"heading mb-30\\\">Profile Photo</h1>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-2 col-lg-2 col-md-2 col-sm-3 col-3\\\">\\n                                <img *ngIf=\\\"!isProfileImageLoaded\\\" class=\\\"avatar img-responsive\\\" src=\\\"../../../../../assets/images/profile.svg\\\">\\n                                <image-cropper \\n                                    class=\\\"avatar img-responsive {{isProfileImageLoaded ? '' : 'd-none' }}\\\"\\n                                    [imageChangedEvent]=\\\"profilePhoto\\\"\\n                                    [maintainAspectRatio]=\\\"true\\\"\\n                                    [aspectRatio]=\\\"5 / 5\\\"\\n                                    [resizeToWidth]=\\\"100\\\"\\n                                    format=\\\"png,jpg,jpeg,ico\\\"\\n                                    (imageCropped)=\\\"imageProfilePhotoCropped($event)\\\"\\n                                    (imageLoaded)=\\\"imageProfileLoaded()\\\"\\n                                    [autoCrop]= \\\"true\\\"\\n                                ></image-cropper>\\n                            </div>\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-10 col-sm-9 col-9\\\">\\n                                <p>Choose a file to upload:</p>\\n                                <div class=\\\"form-group row\\\">\\n                                    <input id=\\\"file-upload\\\" class=\\\"d-none\\\" type=\\\"file\\\" (change)=\\\"fileChange($event)\\\" accept=\\\"image/jpeg, image/png\\\"/>\\n                                    <div class=\\\"col-6\\\">\\n                                        <label for=\\\"file-upload\\\" class=\\\"btn btn-primary btn-block\\\">\\n                                            Choose a file\\n                                        </label>\\n                                    </div>\\n                                    <div class=\\\"col-6 flex-align-center\\\" *ngIf=\\\"!isProfileImageLoaded\\\">\\n                                        <p class=\\\"m-0 font-italic\\\">No file chosen</p>\\n                                    </div>\\n                                </div>\\n                                <p class=\\\"text-danger\\\" *ngIf=\\\"profileUploadWrongFile\\\">Image is not valid</p>\\n                                <p class=\\\"text-danger\\\" *ngIf=\\\"uploadMaxLimitReached\\\">Image must not exceed 1MB</p>\\n                            </div>\\n                            <div class=\\\"col-xl-4 col-lg-4 col-md-12\\\">\\n                                <p class=\\\"note fs-12\\\">Maximum image file size is 1MB. Try resizing it to atleast 500x500 px in resolution.</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\">\\n                    <div class=\\\"p-30\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"goBack('go_back', 'customer_create')\\\">\\n                                    Back\\n                                </button>\\n                            </div>\\n                            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                                <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(userForm.value, 'user_add')\\\" [disabled]=\\\"!userForm.valid\\\">\\n                                    <i class=\\\"icon-add\\\"></i>\\n                                    <span class=\\\"ml-15\\\">Add new customer</span>\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"priceForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Egg Size: <strong>{{ modal_message }}</strong></label>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Current price (per piece)</label>\\n                <div class=\\\"input-group\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text mb-10\\\">Php</span>\\n                    </div>\\n                    <input type=\\\"number\\\" formControlName=\\\"current_price\\\" class=\\\"form-control mb-10\\\" disabled/>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">New price (per piece) <span class=\\\"required\\\">*</span></label>\\n                <div class=\\\"input-group\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text mb-10\\\">Php</span>\\n                    </div>\\n                    <input type=\\\"number\\\" formControlName=\\\"price\\\" class=\\\"form-control mb-10\\\"/>\\n                </div>\\n                <ng-container *ngIf=\\\"priceForm.controls.price.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"priceForm.controls.price.hasError('required')\\\">This new price field should be valid and not empty</p>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"priceForm.controls.price.hasError('min')\\\">New price must not be less than 0</p>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-6 text-right\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\" [disabled]=\\\"isLoading\\\">Cancel</button>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"{'btn-primary' : action != 'delete', 'btn-danger' : action == 'delete' }\\\" [disabled]=\\\"(!priceForm.valid && action != 'delete') || isLoading\\\">{{ modal_primary_button }}</button>\\n        </div>\\n    </div>\\n</form>\\n\"","export default \"\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n        <h1 class=\\\"heading\\\">Daily Reports</h1>\\n        <ng-container *ngIf=\\\"showtimeago\\\">\\n          <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n          <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n              'border-radius' : '5px',\\n              'margin-bottom' : '10px',\\n              'height' : '20px'\\n          }\\\"></ngx-skeleton-loader>\\n        </ng-container>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n          <i class=\\\"icon-download\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n          <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n        </button>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n          <i class=\\\"icon-download\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n          <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n        </button>\\n      </div>\\n    </div>\\n  \\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <h6 class=\\\"card-heading\\\">Filters</h6>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date' }}\\n                  <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                </button>\\n              </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"type\\\" (selectionChange)=\\\"changeReportStatus($event)\\\" placeholder=\\\"Report Status\\\">\\n                  <mat-option *ngFor=\\\"let item of report_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n                </mat-select>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"container-card p-30\\\">\\n      <div class=\\\"row mb-25\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"inner-group\\\">\\n                  <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n                    <mat-select-trigger>Column Visibility</mat-select-trigger>\\n                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                      <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                    </ng-container>\\n                  </mat-select>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group search\\\">\\n              <i class=\\\"icon-search\\\"></i>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n                (keydown.enter)=\\\"searchItem()\\\" />\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n            <div class=\\\"form-group\\\">\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n                <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n              </button>\\n            </div>\\n        </div>\\n      </div>\\n      <div class=\\\"row mb-25\\\" *ngIf=\\\"item\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto stats\\\">\\n            <p>House/Building no.</p>\\n            <h1>{{ item.house_name ? item.house_name.house_name : '' }}</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto stats\\\">\\n            <p>Beginning population</p>\\n            <h1>{{ item.beginning_population ? (item.beginning_population | number) : 0 }}</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto stats\\\">\\n            <p>Beginning age</p>\\n            <h1>{{ item.beginning_age ? item.beginning_age : '0' }}</h1>\\n        </div>\\n      </div>\\n      <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items; let i = index\\\" [routerLink]=\\\"[ '/daily-reports/view', item.id]\\\">\\n                  <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.prepared_by_date | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                  <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.age }}</td>\\n                  <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.mortality | number }}</td>\\n                  <td *ngIf=\\\"ths[3].isVisible\\\">{{ item.mortality_rate | number : '1.2-2' }} %</td>\\n                  <td *ngIf=\\\"ths[4].isVisible\\\">{{ item.cull | number }}</td>\\n                  <td *ngIf=\\\"ths[5].isVisible\\\">{{ item.bird_count | number }}</td>\\n                  <td *ngIf=\\\"ths[6].isVisible\\\">{{ item.real_egg_count | number }} pcs</td>\\n                  <td *ngIf=\\\"ths[7].isVisible\\\">{{ item.production_rate | number : '1.2-2' }} %</td>\\n                  <td *ngIf=\\\"ths[8].isVisible\\\">{{ item.feeds.bags | number }}</td>\\n                  <td *ngIf=\\\"ths[9].isVisible\\\">{{ item.feeds.string }}</td>\\n                  <td *ngIf=\\\"ths[10].isVisible\\\">\\n                      <ng-container *ngFor=\\\"let medicine of item.medicine_name; let i = index\\\">\\n                          {{ medicine.medicine }}{{ i < item.medicine_name.length - 1 ? ', ': '' }}\\n                      </ng-container>\\n                  </td>\\n                  <td *ngIf=\\\"ths[11].isVisible\\\">{{ item.sortingRecordstatus ? item.sortingRecordstatus : item.recordStatus }}</td>\\n                  <td *ngIf=\\\"ths[12].isVisible\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/daily-reports/view', item.id]\\\">\\n                      <i class=\\\"icon-datatables-view\\\"></i>\\n                      View Report\\n                    </button>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n      <div class=\\\"row mt-35\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n          <ul class=\\\"paginate pull-right\\\">\\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                <a (click)=\\\"gotoPage(prev_page)\\\">\\n                    Previous\\n                </a>\\n            </li>\\n            <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n              <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n            </ng-container>\\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                <a (click)=\\\"gotoPage(next_page)\\\">\\n                    Next\\n                </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n    </div>\\n  </section>  \"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n            <h1 class=\\\"heading\\\">Activity Log</h1>\\n            <ng-container *ngIf=\\\"showtimeago\\\">\\n                <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated\\n                    {{ activity.updated_at | timeago }}</p>\\n                <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n          'border-radius' : '5px',\\n          'margin-bottom' : '10px',\\n          'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n            </ng-container>\\n        </div>\\n<!--         <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n            <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\">\\n                <i class=\\\"icon-add\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new house/building</span>\\n            </button>\\n        </div> -->\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row mb-25\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-4 offset-xl-3 col-lg-4 offset-lg-5 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group search\\\">\\n                        <i class=\\\"icon-search\\\"></i>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\"\\n                            [(ngModel)]=\\\"search\\\" (keydown.enter)=\\\"searchItem()\\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <table [ngStyle]=\\\"{'width.px': 400 * visible_columns.length}\\\">\\n                    <thead>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\"\\n                                    (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\"\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                            <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                <td class=\\\"w-25-per\\\">{{ item.name }}</td>\\n                                <td class=\\\"w-50-per\\\" [innerHTML]=\\\"item.action\\\"></td>\\n                                <td class=\\\"w-25-per\\\">{{ item.created_at }}</td>\\n    <!--                             <td>\\n                                    <button mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'edit')\\\">\\n                                        <i class=\\\"icon-datatables-edit\\\"></i>\\n                                        Edit\\n                                    </button>\\n                                    <button mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'delete')\\\">\\n                                        <i class=\\\"icon-datatables-delete\\\"></i>\\n                                        Delete\\n                                    </button>\\n                                </td> -->\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"!isLoaded\\\">\\n                            <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                            </tr>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                            <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                            </tr>\\n                        </ng-container>\\n                    </tbody>\\n                    <tfoot>\\n                        <tr>\\n                            <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\"\\n                                    (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\"\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i\\n                                            [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                            </ng-container>\\n                        </tr>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"inner-group in-line\\\">\\n                        <label class=\\\"mr-15\\\">Show</label>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\"\\n                            (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                            <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                        </mat-select>\\n                        <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\"\\n                            *ngIf=\\\"totalItems < 10\\\" disabled>\\n                            <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                        </mat-select>\\n                        <label>of {{ totalItems | number }} entries</label>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                        <a (click)=\\\"gotoPage(prev_page)\\\">\\n                            Previous\\n                        </a>\\n                    </li>\\n                    <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                        <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\"\\n                            [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                    </ng-container>\\n                    <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                        <a (click)=\\\"gotoPage(next_page)\\\">\\n                            Next\\n                        </a>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Feeds Consumption</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 mb-30 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30 ml-0 mr-0 break-now\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                    <canvas baseChart \\n                        [datasets]=\\\"lineChartData\\\"\\n                        [labels]=\\\"lineChartLabels\\\"\\n                        [options]=\\\"lineChartOptions\\\"\\n                        [plugins]=\\\"lineChartPlugins\\\"\\n                        [legend]=\\\"lineChartLegend\\\"\\n                        [chartType]=\\\"lineChartType\\\">\\n                    </canvas>\\n                </div>\\n                <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>All Dates</p>\\n                </div>\\n                <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <th class=\\\"p-10 fs-12\\\">Age (Weeeks)</th>\\n                                    <th class=\\\"p-10 fs-12\\\">Recommended (g)</th>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                    <th *ngIf=\\\"th.isVisible\\\" class=\\\"p-10 fs-12\\\">\\n                                        {{ th.label }}\\n                                    </th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                    <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                        <td class=\\\"p-10 fs-12\\\">{{ item.age_week | number }}</td>\\n                                        <td class=\\\"p-10 fs-12\\\">{{ item.rec_feed_consumption | number }} g</td>\\n                                        <ng-container *ngFor=\\\"let item of item.house; let i = index\\\">\\n                                            <td *ngIf=\\\"ths[i].isVisible\\\" class=\\\"p-10 fs-12\\\">{{ item && item.daily_harvest_report ? (item.daily_harvest_report.sum | number) : 0 }}</td>\\n                                        </ng-container>\\n                                        </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                    <tr>\\n                                        <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                            <ngx-skeleton-loader [theme]=\\\"{\\n                                            'border-radius' : '5px',\\n                                            'margin-bottom' : '0px',\\n                                            'height' : '20px'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                    <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                    </tr>\\n                                </ng-container>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">{{ mode_of_payment_label }}</h1>\\n      <p class=\\\"sub-heading\\\">Total number of transactions: <strong>{{ totalItems | number }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n            'border-radius' : '5px',\\n            'margin-bottom' : '10px',\\n            'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n      <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" routerLink=\\\"/transactions/create\\\">\\n        <i class=\\\"icon-add\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new transaction</span>\\n      </button>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date Ordered - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date Ordered' }}\\n                  <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                </button>\\n              </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"payment_status\\\" (selectionChange)=\\\"changePaymentStatus($event)\\\" placeholder=\\\"Payment Status\\\">\\n                  <mat-option *ngFor=\\\"let item of payment_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n                </mat-select>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n            Clear Filters\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n        <div class=\\\"form-group mb-0\\\">\\n          <div class=\\\"inner-group\\\">\\n            <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\">\\n              <mat-select-trigger>Column Visibility</mat-select-trigger>\\n              <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n              </ng-container>\\n            </mat-select>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.transaction_id }}</td>\\n                <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.created_at | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.customer_name }}</td>\\n                <td *ngIf=\\\"ths[3].isVisible\\\">\\n                  <mat-chip-list>\\n                    <mat-chip *ngIf=\\\"item.order_status == 1\\\" color=\\\"primary\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 2\\\" color=\\\"secondary\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 3\\\" color=\\\"warning\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 4\\\" color=\\\"success\\\">{{ item.status }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.order_status == 7 || item.order_status == 8\\\" color=\\\"danger\\\">{{ item.status }}</mat-chip>\\n                  </mat-chip-list>\\n                </td>\\n                <td *ngIf=\\\"ths[4].isVisible\\\">{{ item.payment ? (item.payment.due_date | date: 'MM/dd/yyyy') : '' }}</td>\\n                <td *ngIf=\\\"ths[5].isVisible\\\">\\n                  <ng-container *ngFor=\\\"let egg of item.order_items; let i = index\\\">\\n                    {{ egg.egg_type.type }} {{ i < item.order_items.length -1 ? ', ':'' }}\\n                  </ng-container>\\n                </td>\\n                <td *ngIf=\\\"ths[6].isVisible\\\">{{ item.total_pieces | number }}</td>\\n                <td *ngIf=\\\"ths[7].isVisible\\\">₱ {{ item.total_price | number : '1.2-2' }}</td>\\n                <td *ngIf=\\\"ths[8].isVisible\\\">{{ item.payment_type }}</td>\\n                <td *ngIf=\\\"ths[9].isVisible\\\">\\n                  <mat-chip-list>\\n                    <mat-chip *ngIf=\\\"item.payment_status == 0\\\" color=\\\"secondary\\\">{{ item.payment_status_label }}</mat-chip>\\n                    <mat-chip *ngIf=\\\"item.payment_status == 1\\\" color=\\\"success\\\">{{ item.payment_status_label }}</mat-chip>\\n                  </mat-chip-list>\\n                </td>\\n                <td *ngIf=\\\"ths[10].isVisible\\\">\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear\\\" [routerLink]=\\\"[ '/transactions/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n            <a (click)=\\\"gotoPage(prev_page)\\\">\\n              Previous\\n            </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n            <a (click)=\\\"gotoPage(next_page)\\\">\\n              Next\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"\"","export default \"h3 {\\n  font-size: 1.4vw;\\n  margin-top: 0;\\n  font-weight: 500;\\n}\\n\\n.col2 {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 60%;\\n  height: 100%;\\n}\\n\\n.col1 {\\n  overflow: hidden;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  width: 40%;\\n  height: 100%;\\n  background: #fff;\\n}\\n\\n.img1 {\\n  padding: 0;\\n  height: 100%;\\n  width: 100%;\\n  margin: 0;\\n}\\n\\nspan.eye {\\n  margin-top: -3px;\\n  position: relative;\\n  float: right;\\n  -webkit-transform: translateY(-100%);\\n          transform: translateY(-100%);\\n  cursor: pointer;\\n  display: block;\\n}\\n\\n.ball1 {\\n  top: -5%;\\n  right: -5%;\\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.04);\\n}\\n\\n.ball2 {\\n  bottom: -130px;\\n  left: -130px;\\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.04);\\n}\\n\\n.custom-row {\\n  width: 100%;\\n  margin: 0;\\n}\\n\\n.forgot-pass p {\\n  color: #05172e;\\n  font-size: 16px;\\n  line-height: 1.428571429;\\n}\\n\\n.btn-forgot {\\n  color: #0097cf;\\n}\"","export default \"\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<form [formGroup]=\\\"generalForm\\\" (ngSubmit)=\\\"submit()\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"action == 'order_decline'\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">Reason <span class=\\\"required\\\">*</span></label>\\n                <textarea maxlength=\\\"250\\\" class=\\\"form-control mb-10\\\" formControlName=\\\"message\\\" row=\\\"3\\\"></textarea>\\n                <label class=\\\"text-secondary float-right mr-0 mb-15\\\">{{ generalForm.controls.message.value.length }}/250</label>\\n                <ng-container *ngIf=\\\"generalForm.controls.message.touched\\\">\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"generalForm.controls.message.hasError('required')\\\">Reason is required</p>\\n                    <p class=\\\"text-danger\\\" *ngIf=\\\"generalForm.controls.message.hasError('maxlength')\\\">Reason is must not exceed 250 characters</p>\\n                </ng-container>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"modal_secondary_button_class\\\" (click)=\\\"closeModal()\\\">{{ modal_secondary_button }}</button>\\n        </div>\\n        <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block\\\" [ngClass]=\\\"modal_primary_button_class\\\" [disabled]=\\\"!generalForm.valid\\\">{{ modal_primary_button }}</button>\\n        </div>\\n    </div>\\n</form>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Consumption Report</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12\\\">\\n                <p class=\\\"mb-10\\\">Feeds Consumption</p>\\n                <ng-container *ngIf=\\\"showtimeago\\\">\\n                    <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                    <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                        'border-radius' : '5px',\\n                        'margin-bottom' : '10px',\\n                        'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                </ng-container>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <div class=\\\"inner-group in-line\\\">\\n                                <label class=\\\"mr-15\\\">Show:</label>\\n                                <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"All house/building\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                                    <mat-select-trigger>All house/building</mat-select-trigger>\\n                                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                                        <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                                    </ng-container>\\n                                </mat-select>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\" *ngIf=\\\"from && to\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"row mb-30\\\">\\n            <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-10\\\">Overall Harvested Eggs</p>\\n                <h1 class=\\\"heading\\\">{{ overall_harvested_eggs | number }}</h1>\\n            </div> -->\\n        </div>\\n        <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                <canvas baseChart \\n                    [datasets]=\\\"lineChartData\\\"\\n                    [labels]=\\\"lineChartLabels\\\"\\n                    [options]=\\\"lineChartOptions\\\"\\n                    [plugins]=\\\"lineChartPlugins\\\"\\n                    [legend]=\\\"lineChartLegend\\\"\\n                    [chartType]=\\\"lineChartType\\\">\\n                </canvas>\\n            </div>\\n            <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>All Dates</p>\\n            </div>\\n            <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table [ngStyle]=\\\"{'width.px': 210 * visible_columns.length}\\\">\\n                        <thead>\\n                            <tr>\\n                                <th class=\\\"sort\\\" (click)=\\\"orderList(true, 'age_week', order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    Age (Weeeks)\\n                                    <i *ngIf=\\\"order.order_by_column == 'age_week'\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'age_week' }\\\"></i>\\n                                </th>\\n                                <th class=\\\"sort\\\">\\n                                    Recommended (g)\\n                                </th>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                <td>{{ item.age_week | number }}</td>\\n                                <td>{{ item.rec_feed_consumption | number }} g</td>\\n                                <ng-container *ngFor=\\\"let item of item.house; let i = index\\\">\\n                                    <td *ngIf=\\\"ths[i].isVisible\\\">{{ item && item.daily_harvest_report ? (item.daily_harvest_report.sum | number) : 0 }} g</td>\\n                                </ng-container>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius' : '5px',\\n                                    'margin-bottom' : '0px',\\n                                    'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                            </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12 ml-auto\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                    <a (click)=\\\"gotoPage(prev_page)\\\">\\n                        Previous\\n                    </a>\\n                </li>\\n                <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                    <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                </ng-container>\\n                \\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                    <a (click)=\\\"gotoPage(next_page)\\\">\\n                        Next\\n                    </a>\\n                </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-15\\\">\\n        <div class=\\\"col-xl-auto offset-xl-1\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"goBack('go_back', 'transaction_preview')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto offset-xl-1\\\">\\n            <h1 class=\\\"heading\\\">Add new transaction</h1>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-4 offset-4\\\">\\n            <img src=\\\"./../../../../../assets/images/others/order-step-2.svg\\\" class=\\\"img-responsive\\\"/>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-30\\\">\\n        <div class=\\\"col-xl-10 offset-xl-1\\\">\\n            <div class=\\\"container-card view-record\\\">\\n                <div class=\\\"p-30\\\">\\n                    <h1 class=\\\"heading\\\">Order Summary</h1>\\n                </div>\\n                <div class=\\\"p-30\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-6 col-lg-6 col-md-12\\\">\\n                            <div class=\\\"form-group mb-35\\\">\\n                                <label class=\\\"text-secondary\\\">Customer Name</label>\\n                                <p class=\\\"fs-20\\\">{{ my_order.customer.customer_name }}</p>\\n                            </div>\\n                            <div class=\\\"form-group mb-35\\\">\\n                                <label class=\\\"text-secondary\\\">Mobile Number</label>\\n                                <p class=\\\"fs-20\\\">+63{{ my_order.customer.number }}</p>\\n                            </div>\\n                            <div class=\\\"form-group mb-35\\\">\\n                                <label class=\\\"text-secondary\\\">Address</label>\\n                                <p class=\\\"fs-20\\\">{{ my_order.customer.location }}</p>\\n                            </div>\\n                            <div class=\\\"form-group mb-35\\\">\\n                                <label class=\\\"text-secondary\\\">Mode of Payment</label>\\n                                <p class=\\\"fs-20\\\">{{ mode_of_payment_label }}</p>\\n                            </div>\\n                            <div class=\\\"form-group mb-35\\\" *ngIf=\\\"my_order.customer.request\\\">\\n                                <label class=\\\"text-secondary\\\">Other special requests or message</label>\\n                                <p class=\\\"fs-20\\\">{{ my_order.customer.request }}</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-xl-6 col-lg-6 col-md-12 order-summary\\\">\\n                            <div class=\\\"p-30\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-auto\\\">\\n                                        <p>Items</p>\\n                                    </div>\\n                                    <div class=\\\"col-auto ml-auto\\\">\\n                                        <p>Amount</p>\\n                                    </div>\\n                                </div>\\n                                <hr class=\\\"h-2\\\">\\n                                <ng-container *ngFor=\\\"let item of my_order.cart; let i = index\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-12\\\">\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\">Fresh Egg</p>\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\"><span class=\\\"text-secondary\\\">Size: </span>{{ item.label }}</p>\\n                                            <p class=\\\"fs-14 m-0 lh-19\\\">\\n                                                <span class=\\\"text-secondary\\\">Qty: </span>\\n                                                <ng-container *ngFor=\\\"let details of item.items; let i = index\\\">\\n                                                    <span *ngIf=\\\"details.qty > 0\\\">{{ details.qty | number }} {{ details.type | lowercase }}{{ details.qty > 1 ? 's' : '' }}<ng-container *ngIf=\\\"item.items.length - 1 > i\\\">, </ng-container><br *ngIf=\\\"details.qty >= 99999 && item.items.length - 1 > i\\\"></span>\\n                                                </ng-container>\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\">₱ {{ item.price | number : '1.2-2' }} x {{ item.total_qty }}</p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\">₱ {{ item.total_price | number : '1.2-2' }}</p>\\n                                        </div>\\n                                        <div class=\\\"col-12\\\">\\n                                            <p class=\\\"fs-12 m-0 text-secondary font-italic lh-19\\\">(Price per egg size x total no. of eggs)</p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"my_order.payment.mode_of_payment == 1\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 fw-500\\\">\\n                                                Order Total ({{ total_pieces | number }} items)\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 text-danger fw-500\\\">\\n                                                ₱ {{ my_order.payment.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"my_order.payment.mode_of_payment == 2\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Order Total ({{ total_pieces | number }} items)\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                ₱ {{ my_order.payment.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 fw-500\\\">\\n                                                Credit Amount\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 text-danger fw-500\\\">\\n                                                ₱ {{ my_order.payment.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Date to pay credited amount\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0 text-danger\\\">\\n                                                {{ my_order.payment.due_date | date: 'MM/dd/yyyy' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"my_order.payment.mode_of_payment == 3\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Order Total ({{ total_pieces | number }} items)\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                ₱ {{ my_order.payment.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Initial Payment\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                ₱ {{ my_order.payment.payment | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 fw-500\\\">\\n                                                Remaining Balance\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 text-danger fw-500\\\">\\n                                                ₱ {{ my_order.payment.balance | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Date to pay balanced amount\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                {{ my_order.payment.due_date | date: 'MM/dd/yyyy' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                </ng-container>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <hr>\\n                <div class=\\\"p-30\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-12\\\">\\n                            <p><span class=\\\"text-secondary\\\">By clicking the \\\"Submit Order\\\" button, you confirm that you read, understand, and accept our </span>Terms and Conditions <span class=\\\"text-secondary\\\">and </span>Privacy Policy<span class=\\\"text-secondary\\\"></span></p>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 ml-xl-auto ml-lg-auto ml-md-auto\\\">\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\"\\n                                (click)=\\\"goBack('form_cancel', 'transaction_create')\\\">\\n                                Cancel\\n                            </button>\\n                        </div>\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6\\\">\\n                            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\">\\n                                <i class=\\\"icon-lock\\\"></i>\\n                                <span class=\\\"ml-15\\\">Submit Order</span>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Harvested Production By Egg Sizes</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-20 mt-10 ml-0 mr-0\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-5 fs-14\\\">Overall Harvested Eggs</p>\\n                    <h1 class=\\\"heading fs-34\\\">{{ overall_harvested_eggs | number }}</h1>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30 ml-0 mr-0 break-now\\\" *ngIf=\\\"isLoaded && items.length > 0 && visible_columns.length > 0\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                    <canvas baseChart \\n                        [datasets]=\\\"barChartData\\\"\\n                        [labels]=\\\"barChartLabels\\\"\\n                        [options]=\\\"barChartOptions\\\"\\n                        [plugins]=\\\"barChartPlugins\\\"\\n                        [legend]=\\\"barChartLegend\\\"\\n                        [chartType]=\\\"barChartType\\\"\\n                    >\\n                    </canvas>\\n                </div>\\n                <!-- <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>Egg Sizes</p>\\n                </div> -->\\n                <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p>All Dates</p>\\n                </div>\\n                <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <p *ngIf=\\\"(from | date: 'yyyy-MM-dd') != (to | date: 'yyyy-MM-dd')\\\">{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                    <p *ngIf=\\\"(from | date: 'yyyy-MM-dd') == (to | date: 'yyyy-MM-dd')\\\">{{ from | date : 'MMMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n            <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                        <table>\\n                            <thead>\\n                                <tr>\\n                                    <th class=\\\"p-10 fs-12\\\">Date</th>\\n                                    <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                        <th *ngIf=\\\"th.isVisible\\\" class=\\\"p-10 fs-12\\\">{{ th.label }}</th>\\n                                    </ng-container>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                    <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                        <td class=\\\"p-10 fs-12\\\">{{ item.grouped_date | date: 'MM/dd/yyyy' }}</td>\\n                                        <ng-container *ngFor=\\\"let item of item.daily_sorting_inventory; let i = index\\\">\\n                                            <td class=\\\"p-10 fs-12\\\" *ngIf=\\\"ths[i].isVisible\\\">{{ item.sum | number }}</td>\\n                                        </ng-container>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                    <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                        <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                        }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                    </tr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                    <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                    </tr>\\n                                </ng-container>\\n                                </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                    <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                    </div>\\n                </div>\\n            </ng-container>\\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"\\n<div class=\\\"container-card view-record p-30\\\">\\n    <div id=\\\"printable-section\\\">\\n        <div class=\\\"border\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h3 class=\\\"mt-10\\\">Gapan Fresh Eggs, Inc.</h3>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                    <h5 class=\\\"mb-30\\\">Daily Report</h5>\\n                </div>\\n            </div>\\n            <div class=\\\"row pb-10 ml-0 mr-0 border-bottom\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Prepared by:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">Date:</p>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                    <p class=\\\"mb-0 fs-14\\\">{{ date_today | date : 'MMM dd, yyyy' }}</p>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"container-card view-record p-30 break-now\\\" *ngIf=\\\"isLoaded\\\">\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                        <h6>Harvest Report</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <!-- <tr>\\n                                    <td class=\\\"w-30-per alt\\\">Report Status</td>\\n                                    <td class=\\\"w-70-per\\\">{{ item.recordStatus }}</td>\\n                                </tr> -->\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Harvested by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.name }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">House/Building no.</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.house ? item.house.house_name : '' }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Report Date</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.prepared_by_date | date: 'MM/dd/yyyy' }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Report Time</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.prepared_by_date | date: 'hh:mm aaa' }}</td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <h6>Basic Details</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Bird Count</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.bird_count | number }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Age</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.age }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Mortality</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.mortality | number }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Cull</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.cull | number }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">End Bird Population</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.bird_count | number }}</td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <h6>Feeds and Medicine Consumption Details</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">No. of Sacks</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.feeds ? (item.feeds.bags | number) : 0 }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Feed Consumption</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.feeds ? item.feeds.string : '' }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Medicine intake</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">\\n                                        <ng-container *ngFor=\\\"let medicine of item.medicine; let i = index\\\">\\n                                            {{ medicine.medicine }} {{ i < item.medicine.length - 1 ? ', ' : '' }}\\n                                        </ng-container>\\n                                    </td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <h6>Counted Egg Details</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Total Egg Count</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.real_egg_count | number }}</td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <h6>Report Signatory</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Prepared by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.prepared_by_name }} ({{ item.prepared_by_role }})</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Signature</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">\\n                                        <img [src]=\\\"item.prepared_by_path\\\" class=\\\"img-responsive\\\">\\n                                    </td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\" *ngIf=\\\"item.checked_by\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Checked by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.checked_by_name }} ({{ item.checked_by_role }})</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Signature</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">\\n                                        <img [src]=\\\"item.checked_by_path\\\" class=\\\"img-responsive\\\">\\n                                    </td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\" *ngIf=\\\"item.received_by\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Received by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ item.received_by_name }} ({{ item.received_by_role }})</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Signature</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">\\n                                        <img [src]=\\\"item.received_by_path\\\" class=\\\"img-responsive\\\">\\n                                    </td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"container-card view-record p-30\\\" *ngIf=\\\"isLoaded\\\">\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12 text-center\\\">\\n                        <h6>Sorting Report</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <!-- <tr>\\n                                    <td class=\\\"w-30-per alt\\\">Report Status</td>\\n                                    <td class=\\\"w-70-per\\\">{{ item.recordStatus }}</td>\\n                                </tr> -->\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Sorted by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ sorting_item.prepared_by_name }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">House/Building no.</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ sorting_item.house ? sorting_item.house.house_name : '' }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Report Date</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ sorting_item.prepared_by_date | date: 'MM/dd/yyyy' }}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Report Time</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ sorting_item.prepared_by_date | date: 'hh:mm aaa' }}</td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <h6>Sorted Egg Details</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr *ngFor=\\\"let egg of sorting_item.eggs; let i = index\\\">\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">{{ egg.egg_type.type }}</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ egg.egg_count | number }}</td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <h6>Report Signatory</h6>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Prepared by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ sorting_item.prepared_by_name }} ({{ sorting_item.prepared_by_role }})</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Signature</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">\\n                                        <img [src]=\\\"sorting_item.prepared_by_path\\\" class=\\\"img-responsive\\\">\\n                                    </td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mb-30\\\" *ngIf=\\\"sorting_item.checked_by\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Checked by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ sorting_item.checked_by_name }} ({{ sorting_item.checked_by_role }})</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Signature</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">\\n                                        <img [src]=\\\"sorting_item.checked_by_path\\\" class=\\\"img-responsive\\\">\\n                                    </td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\" *ngIf=\\\"sorting_item.received_by\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Received by</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">{{ sorting_item.received_by_name }} ({{ sorting_item.received_by_role }})</td>\\n                                </tr>\\n                                <tr>\\n                                    <td class=\\\"w-30-per alt p-10 fs-10\\\">Signature</td>\\n                                    <td class=\\\"w-70-per p-10 fs-10\\\">\\n                                        <img [src]=\\\"sorting_item.received_by_path\\\" class=\\\"img-responsive\\\">\\n                                    </td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            \\n            <div class=\\\"row ml-0 mr-0 mt-20 border-bottom\\\">\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Prepared By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 fs-14\\\">{{ user_profile.user_profile.first_name }} {{ user_profile.user_profile.last_name }}</p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 ml-auto\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto mt-40\\\">\\n                            <p class=\\\"fw-500 fs-14\\\">Approved By:</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 text-center mt-40\\\">\\n                            <p class=\\\"mb-0 h-22\\\"></p>\\n                            <hr class=\\\"m-0\\\">\\n                            <p class=\\\"fs-12\\\">Signature over Printed Name</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row mt-30\\\">\\n        <div class=\\\"col-xl-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportPdf('pdf')\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15\\\">Download as PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n</div>\"","export default \"<p>stocks-view works!</p>\\n\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n      <h1 class=\\\"heading\\\">House/Building Management</h1>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n          'border-radius' : '5px',\\n          'margin-bottom' : '10px',\\n          'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n      <button mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\">\\n        <i class=\\\"icon-add\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">Add new house/building</span>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 col-lg-5 col-md-auto col-sm-auto col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search a House/Bldg no.\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table>\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td>{{ item.house_name }}</td>\\n                <td>{{ item.capacity | number }}</td>\\n                <td>\\n                  <button mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'edit')\\\">\\n                    <i class=\\\"icon-datatables-edit\\\"></i>\\n                    Edit\\n                  </button>\\n                  <button mat-flat-button class=\\\"btn btn-clear\\\" (click)=\\\"openModal(item, 'delete')\\\" *ngIf=\\\"item.canDelete\\\">\\n                    <i class=\\\"icon-datatables-delete\\\"></i>\\n                    Delete\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n              <a (click)=\\\"gotoPage(prev_page)\\\">\\n                  Previous\\n              </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n              <a (click)=\\\"gotoPage(next_page)\\\">\\n                  Next\\n              </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>  \"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Sales Performance Report</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                <p class=\\\"mb-10\\\">Overall Sales</p>\\n                <ng-container *ngIf=\\\"showtimeago\\\">\\n                    <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n                    <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                        'border-radius' : '5px',\\n                        'margin-bottom' : '10px',\\n                        'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                </ng-container>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <div class=\\\"inner-group in-line\\\">\\n                                <label class=\\\"mr-15\\\">Show:</label>\\n\\n                                <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                                <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd,yyyy') : 'Date Range' }}\\n                                    <i class=\\\"icon-arrow-drop-down ml-5 p-initial\\\"></i>\\n                                </button>\\n                                <!-- <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"All egg type\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                                    <mat-select-trigger>All egg type</mat-select-trigger>\\n                                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                                        <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                                    </ng-container>\\n                                </mat-select> -->\\n\\n                                <!-- <mat-select multiple class=\\\"btn btn-drop-down text-left\\\" placeholder=\\\"All egg type\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_eggs\\\">\\n                                    <mat-select-trigger>All egg type</mat-select-trigger>\\n                                    <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                                </mat-select> -->\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div> -->\\n                    <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\" *ngIf=\\\"from && to\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                    </div> -->\\n                </div>\\n                <div class=\\\"row\\\" *ngIf=\\\"from && to\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                <p>Fully Paid Orders</p>\\n                <div class=\\\"row\\\">\\n                    <h3 class=\\\"pl-15\\\">₱ {{ item.fully_paid_orders ? (item.fully_paid_orders | number : '1.2-2') : '0.00' }}</h3>\\n                    <span class=\\\"pl-10 pt-5\\\">{{ item.increase_rate | number : '1.2-2' }}%</span>\\n                    <ng-container *ngIf=\\\"item.is_increasing\\\">\\n                        <i class=\\\"material-icons pt-5\\\">arrow_drop_up</i>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"!item.is_increasing\\\">\\n                        <i class=\\\"material-icons pt-5\\\">arrow_drop_down</i>\\n                    </ng-container>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                <p>Pending Orders</p>\\n                <h3>{{ item.pending_orders ? (item.pending_orders | number) : 0 }}</h3>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto border-right\\\">\\n                <p>Collectibles</p>\\n                <h3>{{ item.collectibles ? (item.collectibles | number) : 0 }}</h3>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p>Collectible Amount</p>\\n                <h3>₱ {{ item.collectibles_amount ? (item.collectibles_amount | number : '1.2-2') : '0.00' }}</h3>\\n            </div>\\n        </div>\\n        <!-- <div class=\\\"row mb-30\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                <p class=\\\"mb-10\\\">Overall Harvested Eggs</p>\\n                <h1 class=\\\"heading\\\">{{ overall_harvested_eggs | number }}</h1>\\n            </div>\\n        </div> -->\\n        <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                <canvas baseChart \\n                    [datasets]=\\\"lineChartData\\\"\\n                    [labels]=\\\"lineChartLabels\\\"\\n                    [options]=\\\"lineChartOptions\\\"\\n                    [plugins]=\\\"lineChartPlugins\\\"\\n                    [legend]=\\\"lineChartLegend\\\"\\n                    [chartType]=\\\"lineChartType\\\">\\n                </canvas>\\n            </div>\\n            <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>All Dates</p>\\n            </div>\\n            <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <!-- <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p> -->\\n                <p>Date</p>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                    <td *ngIf=\\\"ths[0].isVisible\\\" class=\\\"w-50-per\\\">{{ item.date | date: 'MM/dd/yyyy' }}</td>\\n                                    <td *ngIf=\\\"ths[1].isVisible\\\" class=\\\"w-50-per\\\">₱ {{ item.total | number : '1.2-2' }}</td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                        <ngx-skeleton-loader [theme]=\\\"{\\n                                        'border-radius' : '5px',\\n                                        'margin-bottom' : '0px',\\n                                        'height' : '20px'\\n                                        }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                        </tbody>\\n                        <tfoot>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </tfoot>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12 ml-auto\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                    <a (click)=\\\"gotoPage(prev_page)\\\">\\n                        Previous\\n                    </a>\\n                </li>\\n                <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                    <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                </ng-container>\\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                    <a (click)=\\\"gotoPage(next_page)\\\">\\n                        Next\\n                    </a>\\n                </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-9 col-9\\\">\\n            <h1 class=\\\"heading\\\">Consumption Report</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-3 col-3 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"downloadModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row pl-15 pr-30 pb-30\\\">\\n        <div class=\\\"col-lg-4\\\">\\n            <h5 class=\\\"\\\">Medicine Consumption</h5>\\n<!--             <ng-container *ngIf=\\\"showtimeago\\\">\\n                <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated\\n                    {{ activity.updated_at | timeago }}</p>\\n                <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n                                'border-radius' : '5px',\\n                                'margin-bottom' : '10px',\\n                                'height' : '20px'\\n                            }\\\"></ngx-skeleton-loader>\\n            </ng-container> -->\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-12 col-sm-12 col-12 ml-auto\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                    <div class=\\\"form-group mb-0\\\">\\n                        <div class=\\\"inner-group in-line\\\">\\n                            <label class=\\\"mr-15\\\">Show:</label>\\n\\n                            <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left btn-background\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"All house/building\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                                <mat-select-trigger>All house/building</mat-select-trigger>\\n                                <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                                    <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                                </ng-container>\\n                            </mat-select>\\n\\n                            <!-- <mat-select multiple class=\\\"btn btn-drop-down text-left\\\" placeholder=\\\"All egg type\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_eggs\\\">\\n                                <mat-select-trigger>All egg type</mat-select-trigger>\\n                                <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                            </mat-select> -->\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                    <div class=\\\"form-group mb-0\\\">\\n                        <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                        <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left btn-background\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}\\n                            <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                        </button>\\n                    </div>\\n                </div>\\n                \\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\" *ngIf=\\\"from && to\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                </div>\\n            </div>\\n        </div>\\n        <!-- <div class=\\\"col-lg-8\\\">\\n            <div class=\\\"row\\\">       \\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 pt-10 text-right ml-auto\\\">\\n                    <span class=\\\"\\\">Show:</span>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 ml-auto\\\">\\n                    <mat-select multiple class=\\\"btn btn-drop-down btn-block btn-background\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\"\\n                        placeholder=\\\"All house/building\\\" [(ngModel)]=\\\"visible_columns\\\">\\n                        <mat-select-trigger>All house/building</mat-select-trigger>\\n                        <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                            <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                        </ng-container>\\n                    </mat-select>\\n                </div>\\n                <div class=\\\"col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 ml-auto\\\">\\n                    <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\"\\n                        (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                    <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block btn-background\\\"\\n                        (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose Dates' }}\\n                        <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                    </button>\\n                </div>\\n            </div>\\n        </div> -->\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-3 col-sm-3\\\">\\n            <div class=\\\"container-card p-30\\\">\\n                <h6 class=\\\"mb-20\\\">List of Medicines</h6>\\n                    <div class=\\\"col-lg-12 col-lg-12 col-md-12 col-sm-12\\\">\\n                        <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                            <tr *ngFor=\\\"let med of medicines; let i = index\\\">\\n                                <button class=\\\"btn btn-medicine btn-block mb-20\\\" (click)=\\\"selectMed(med.id)\\\">\\n                                    <td class=\\\"\\\">{{ med.medicine }}</td>\\n                                </button>\\n                            </tr>\\n                        </ng-container>\\n                    </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-9 col-lg-9 col-md-9 col-sm-9\\\">\\n            <div class=\\\"container-card p-30\\\">\\n                <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                    <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                        <canvas baseChart \\n                            [datasets]=\\\"barChartData\\\"\\n                            [labels]=\\\"barChartLabels\\\"\\n                            [options]=\\\"barChartOptions\\\"\\n                            [plugins]=\\\"barChartPlugins\\\"\\n                            [legend]=\\\"barChartLegend\\\"\\n                            [chartType]=\\\"barChartType\\\">\\n                        </canvas>\\n                    </div>\\n                    <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                        <p>All Dates</p>\\n                    </div>\\n                    <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                        <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row p-10\\\">\\n                    <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <thead>\\n                                    <tr>\\n                                        <th class=\\\"sort\\\" (click)=\\\"orderList(true, 'received_by_date', order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                            Date\\n                                            <i *ngIf=\\\"order.order_by_column == 'received_by_date'\\\"\\n                                                [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                            <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'received_by_date' }\\\"></i>\\n                                        </th>\\n                                        <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                            <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\"\\n                                                (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                                {{ th.label }}\\n                                                <ng-container *ngIf=\\\"th.canSort\\\">\\n                                                    <i *ngIf=\\\"order.order_by_column == th.key\\\"\\n                                                        [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                                </ng-container>\\n                                            </th>\\n                                        </ng-container>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                        <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                            <td>{{ item.date | date: 'LL/dd/yyyy'}}</td>\\n                                            <ng-container *ngFor=\\\"let house of item.house; let x = index\\\">\\n                                                <td *ngIf=\\\"ths[x].isVisible\\\">\\n                                                    {{ house.medicine_volume }}\\n                                                </td>\\n                                            </ng-container>\\n                                        </tr>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                        <tr>\\n                                            <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                                <ngx-skeleton-loader [theme]=\\\"{\\n                                                    'border-radius' : '5px',\\n                                                    'margin-bottom' : '0px',\\n                                                    'height' : '20px'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                        <tr>\\n                                            <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                        </tr>\\n                                    </ng-container>\\n                                </tbody>\\n                                <tfoot>\\n                                    <tr>\\n                                        <th class=\\\"sort\\\" (click)=\\\"orderList(true, 'received_by_date', order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                            Date\\n                                            <i *ngIf=\\\"order.order_by_column == 'received_by_date'\\\"\\n                                                [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                            <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'received_by_date' }\\\"></i>\\n                                        </th>\\n                                        <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                            <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\"\\n                                                (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                                {{ th.label }}\\n                                                <ng-container *ngIf=\\\"th.canSort\\\">\\n                                                    <i *ngIf=\\\"order.order_by_column == th.key\\\"\\n                                                        [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                                </ng-container>\\n                                            </th>\\n                                        </ng-container>\\n                                    </tr>\\n                                </tfoot>\\n                            </table>\\n                        </div>\\n                    </ng-container>\\n                    <div class=\\\"row mt-35\\\">\\n                        <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n                            <ul class=\\\"paginate pull-right\\\">\\n                                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                                    <a (click)=\\\"gotoPage(prev_page)\\\">\\n                                        Previous\\n                                    </a>\\n                                </li>\\n                                <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                                    <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}\\n                                    </li>\\n                                </ng-container>\\n                                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                                    <a (click)=\\\"gotoPage(next_page)\\\">\\n                                        Next\\n                                    </a>\\n                                </li>\\n                            </ul>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n    <ng-container *ngIf=\\\"action == 'delete'\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n                </div>\\n            </div>\\n        </div>\\n    </ng-container>\\n        <form [formGroup]=\\\"medicineUpdateForm\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 mb-20\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"text-secondary\\\">Select Medicine. <span class=\\\"required\\\">*</span></label>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12\\\" *ngFor=\\\"let meds of medicines; let x = index\\\">\\n                                <mat-checkbox [value]=\\\"meds.id\\\" [checked]=\\\"med[x].value > 0 ? true : false\\\" (change)=\\\"checkbox($event, x)\\\">{{ meds.medicine }}</mat-checkbox>\\n                                <div class=\\\"input-group\\\">\\n                                    <input class=\\\"form-control mb-10\\\" [value]=\\\"med[x].value\\\"type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" placeholder=\\\"0\\\" (input)=\\\"setMedvalue($event.target.value,x)\\\"/>\\n                                    <div class=\\\"input-group-append\\\">\\n                                        <span class=\\\"input-group-text mb-10\\\">{{ meds.medicine_unit.unit }}</span>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n                <div class=\\\"row\\\">\\n                        <div class=\\\"col-6 text-right\\\">\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\">Cancel</button>\\n                        </div>\\n                        <div class=\\\"col-6\\\">\\n                            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block btn-primary\\\" (click)=\\\"submit()\\\">{{ modal_primary_button }}</button>\\n                        </div>\\n                </div>\\n        </form>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-9\\\">\\n            <h1 class=\\\"heading\\\">Update Payment</h1>\\n        </div>\\n        <div class=\\\"col-3\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack('go_back', 'payment_add')\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to Order Info</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-30\\\">\\n        <div class=\\\"col-8\\\">\\n            <div class=\\\"container-card view-record p-30\\\">\\n                <form [formGroup]=\\\"paymentForm\\\" (ngSubmit)=\\\"openModal()\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-7\\\">\\n                            <div class=\\\"form-group mb-45\\\">\\n                                <label class=\\\"text-secondary\\\">Mode of Payment <span class=\\\"required\\\">*</span></label>\\n                                <mat-select class=\\\"btn btn-drop-down btn-block text-left\\\" formControlName=\\\"mode_of_payment\\\" [disabled]=\\\"!canChangeMode\\\" (selectionChange)=\\\"changePayment($event)\\\">\\n                                    <mat-option *ngFor=\\\"let mode_of_payment of mode_of_payment_options\\\" [value]=\\\"mode_of_payment.value\\\">{{ mode_of_payment.label }}</mat-option>\\n                                </mat-select>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    \\n                    <ng-container *ngIf=\\\"mode_of_payment == 1\\\">\\n                        \\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"mode_of_payment == 2\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-7\\\">\\n                                <div class=\\\"form-group mb-45\\\">\\n                                    <label class=\\\"text-secondary\\\">Credit Amount</label>\\n                                    <p class=\\\"text-danger\\\">₱ {{ paymentForm.controls.balance.value | number : '1.2-2' }}</p>\\n                                    <!-- <input type=\\\"number\\\" min=\\\"1\\\" placeholder=\\\"0\\\" formControlName=\\\"balance\\\" class=\\\"form-control mb-10\\\" disabled> -->\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-7\\\">\\n                                <div class=\\\"form-group mb-45 p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Date to pay credited amount<span class=\\\"required\\\">*</span></label>\\n                                    <input matInput [matDatepicker]=\\\"due_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"due_date\\\" class=\\\"form-control date-input mb-10\\\" (click)=\\\"due_date_picker.open()\\\" [disabled]=\\\"userProfile && userProfile.user_role_id == 5\\\" readonly (dateChange)=\\\"chooseDate($event)\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"due_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #due_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"paymentForm.controls.due_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.due_date.hasError('required')\\\">Date of credit payment is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"mode_of_payment == 3\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-7\\\">\\n                                <div class=\\\"form-group mb-45\\\">\\n                                    <label class=\\\"text-secondary\\\">Total Price</label>\\n                                    <p class=\\\"text-danger\\\">₱ {{ paymentForm.controls.total_price.value | number : '1.2-2' }}</p>\\n                                    <!-- <input type=\\\"number\\\" min=\\\"1\\\" placeholder=\\\"0\\\" formControlName=\\\"balance\\\" class=\\\"form-control mb-10\\\" disabled> -->\\n                                </div>\\n                            </div>\\n                        </div>\\n                        \\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-7\\\">\\n                                <div class=\\\"form-group mb-45\\\">\\n                                    <label class=\\\"text-secondary\\\">Remaining Balance</label>\\n                                    <p class=\\\"text-danger\\\">₱ {{ paymentForm.controls.balance.value | number : '1.2-2' }}</p>\\n                                    <!-- <input type=\\\"number\\\" min=\\\"1\\\" placeholder=\\\"0\\\" formControlName=\\\"balance\\\" class=\\\"form-control mb-10\\\" disabled> -->\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-7\\\">\\n                                <div class=\\\"form-group mb-45 p-relative\\\">\\n                                    <label class=\\\"text-secondary\\\">Date to pay balanced amount</label>\\n                                    <input matInput [matDatepicker]=\\\"due_date_picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"due_date\\\" class=\\\"form-control date-input mb-10\\\" (click)=\\\"due_date_picker.open()\\\" [disabled]=\\\"userProfile && userProfile.user_role_id == 5\\\" readonly (dateChange)=\\\"chooseDate($event)\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"due_date_picker\\\" class=\\\"p-absolute r-0 t-30\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #due_date_picker></mat-datepicker>\\n                                    <ng-container *ngIf=\\\"paymentForm.controls.due_date.touched\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.due_date.hasError('required')\\\">Date of balance payment is required</p>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </ng-container>\\n                    <!-- <div class=\\\"row\\\">\\n                        <div class=\\\"col-7\\\">\\n                            <div class=\\\"form-group mb-45\\\">\\n                                <label class=\\\"text-secondary\\\">Payment Status <span class=\\\"required\\\">*</span></label>\\n                                <mat-select class=\\\"btn btn-drop-down btn-block text-left\\\" formControlName=\\\"payment_status\\\">\\n                                    <mat-option *ngFor=\\\"let payment_status of payment_status_options\\\" [value]=\\\"payment_status.value\\\">{{ payment_status.label }}</mat-option>\\n                                </mat-select>\\n                            </div>\\n                        </div>\\n                    </div> -->\\n\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-7\\\">\\n                            <div class=\\\"form-group mb-45\\\">\\n                                <label class=\\\"text-secondary\\\">Enter Cash Amount <span class=\\\"required\\\">*</span></label>\\n                                <input class=\\\"form-control mb-10\\\" type=\\\"number\\\" min=\\\"0\\\" step=\\\"0.01\\\" formControlName=\\\"payment\\\" (input)=\\\"calculateRemaining($event)\\\" [readonly]=\\\"mode_of_payment==2 && !item.last_payment\\\"/>\\n                                <ng-container *ngIf=\\\"paymentForm.controls.payment.touched\\\">\\n                                    <ng-container *ngIf=\\\"mode_of_payment == 1\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('required')\\\">Cash amount is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('min')\\\">Cash amount must not be lower than the total price</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('max')\\\">Cash amount must not exceed the total price</p>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"mode_of_payment == 2\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('required')\\\">Cash amount is required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('min')\\\">Cash amount must not be lower than the total price</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('max')\\\">Cash amount must not exceed the total price</p>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"mode_of_payment == 3\\\">\\n                                        <ng-container *ngIf=\\\"item.last_payment\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('required')\\\" >Cash amount is required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('min')\\\">Cash amount must be equal to the remaining balance</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('max')\\\">Cash amount must be equal to the remaining balance</p>\\n                                        </ng-container>\\n                                        <ng-container *ngIf=\\\"!item.last_payment\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('required')\\\" >Cash amount is required</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('min')\\\">Cash amount must be atleast 50% of total amount</p>\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.payment.hasError('max')\\\">Cash amount must not exceed the total price</p>\\n                                        </ng-container>\\n                                    </ng-container>\\n                                </ng-container>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-7\\\">\\n                            <div class=\\\"form-group mb-45\\\">\\n                                <label class=\\\"text-secondary\\\">Upload Official Receipt<!--  <span class=\\\"required\\\">*</span> --></label>\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-12 mb-10\\\" [ngClass]=\\\"{ 'd-none' : !isReceiptPhotoLoaded }\\\">\\n                                        <image-cropper \\n                                            class=\\\"img-responsive\\\"\\n                                            [imageChangedEvent]=\\\"receiptPhoto\\\"\\n                                            [maintainAspectRatio]=\\\"false\\\"\\n                                            format=\\\"png,jpg,jpeg,ico\\\"\\n                                            (imageCropped)=\\\"imageReceiptPhotoCropped($event)\\\"\\n                                            (imageLoaded)=\\\"imageReceiptLoaded()\\\"\\n                                            [autoCrop]= \\\"true\\\"\\n                                        ></image-cropper>\\n                                    </div>\\n                                    <div class=\\\"col-auto\\\">\\n                                        <input id=\\\"receipt-upload\\\" class=\\\"d-none\\\" type=\\\"file\\\" (change)=\\\"receiptChange($event)\\\" accept=\\\"image/jpeg, image/png\\\"/>\\n                                        <label for=\\\"receipt-upload\\\" mat-flat-button class=\\\"btn btn-secondary btn-block\\\">\\n                                            {{ isReceiptPhotoLoaded ? 'Choose another file' : 'Choose a file' }}\\n                                        </label>\\n                                    </div>\\n                                    <div class=\\\"col-auto flex-align-center\\\" *ngIf=\\\"!isReceiptPhotoLoaded\\\">\\n                                        <p class=\\\"m-0 font-italic\\\">No file chosen</p>\\n                                    </div>\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"receiptUploadWrongFile\\\">Receipt is not valid</p>\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"uploadReceiptMaxLimitReached\\\">Receipt must not exceed 1MB</p>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-7\\\">\\n                            <div class=\\\"form-group mb-45\\\">\\n                                <label class=\\\"text-secondary\\\">Add Official Receipt no. <span class=\\\"required\\\">*</span></label>\\n                                <input class=\\\"form-control mb-10\\\" type=\\\"text\\\" formControlName=\\\"receipt_no\\\" />\\n                                <ng-container *ngIf=\\\"paymentForm.controls.receipt_no.touched\\\">\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"paymentForm.controls.receipt_no.hasError('required')\\\">Official Receipt no. is required</p>\\n                                </ng-container>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-block\\\" (click)=\\\"goBack('form_cancel', 'payment_add')\\\">\\n                                Cancel\\n                            </button>\\n                        </div>\\n                        <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-12 col-12\\\">\\n                            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" [disabled]=\\\"!paymentForm.valid\\\">\\n                                Save\\n                            </button>\\n                        </div>\\n                        <div class=\\\"col-xl-3 col-lg-4 col-md-4 col-sm-12 col-12\\\">\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary btn-block\\\" [disabled]=\\\"!paymentForm.valid\\\" (click)=\\\"savePrint()\\\">\\n                                Save & Preview\\n                            </button>\\n                        </div>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n        <div class=\\\"col-4\\\">\\n            <div class=\\\"row mb-30\\\">\\n                <div class=\\\"col-12\\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-xl-12 col-lg-12 col-md-12 order-summary\\\">\\n                                <p class=\\\"mini-heading\\\">Cost Summary</p>\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-auto\\\">\\n                                        <p class=\\\"mb-0\\\">Items</p>\\n                                    </div>\\n                                    <div class=\\\"col-auto ml-auto\\\">\\n                                        <p class=\\\"mb-0\\\">Amount</p>\\n                                    </div>\\n                                </div>\\n                                <hr class=\\\"h-2\\\">\\n                                <ng-container *ngFor=\\\"let item of item.order_items; let i = index\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-12\\\">\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\">Fresh Egg</p>\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\"><span class=\\\"text-secondary\\\">Size: </span>{{ item.egg_type.type }}</p>\\n                                            <p class=\\\"fs-14 m-0 lh-19\\\">\\n                                                <span class=\\\"text-secondary\\\">Qty: </span>\\n                                                <ng-container *ngFor=\\\"let details of item.order_item_details; let i = index\\\">\\n                                                    <span *ngIf=\\\"details.qty > 0\\\">{{ details.qty | number }} {{ details.egg_cart_type.type | lowercase }}{{ details.qty > 1 ? 's' : '' }}<ng-container *ngIf=\\\"item.order_item_details.length - 1 > i\\\">, </ng-container><br *ngIf=\\\"details.qty >= 99999 && item.order_item_details.length - 1 > i\\\"></span>\\n                                                </ng-container>\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\">₱ {{ item.order_item_details[0].price | number : '1.2-2' }} x {{ item.total_pieces }}</p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0 lh-22\\\">₱ {{ item.total_price | number : '1.2-2' }}</p>\\n                                        </div>\\n                                        <div class=\\\"col-12\\\">\\n                                            <p class=\\\"fs-12 m-0 text-secondary font-italic lh-19\\\">(Price per egg size x total no. of eggs)</p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"item.discount > 0\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Discounted\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                ₱ {{ item.discount | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"mode_of_payment == 1\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 fw-500\\\">\\n                                                Order Total ({{ item.total_pieces | number }} items)\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 text-danger fw-500\\\">\\n                                                ₱ {{ item.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                            <!-- <p class=\\\"fs-12 m-0\\\" *ngIf=\\\"item.discount > 0\\\">\\n                                                (-₱ {{ item.discount | number : '1.2-2' }})\\n                                            </p> -->\\n                                        </div>\\n                                    </div>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"mode_of_payment == 2\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Order Total ({{ item.total_pieces | number }} items)\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                ₱ {{ item.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 fw-500\\\">\\n                                                Credit Amount\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 text-danger fw-500\\\">\\n                                                ₱ {{ item.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Date to pay credited amount\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0 text-danger\\\">\\n                                                {{ paymentForm.controls.due_date.value ? (paymentForm.controls.due_date.value | date: 'MM/dd/yyyy') : 'Pick due date' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"mode_of_payment == 3\\\">\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Order Total ({{ item.total_pieces | number }} items)\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                ₱ {{ item.total_price | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Initial Payment\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                ₱ {{ item.payment.payment | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 fw-500\\\">\\n                                                Remaining Balance\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-17 m-0 text-danger fw-500\\\">\\n                                                ₱ {{ item.payment.balance | number : '1.2-2' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                    <hr>\\n                                    <div class=\\\"row\\\">\\n                                        <div class=\\\"col-auto\\\">\\n                                            <p class=\\\"fs-15 m-0\\\">\\n                                                Date to pay balanced amount\\n                                            </p>\\n                                        </div>\\n                                        <div class=\\\"col-auto ml-auto\\\">\\n                                            <p class=\\\"fs-15 m-0 text-danger\\\">\\n                                                {{ paymentForm.controls.due_date.value ? (paymentForm.controls.due_date.value | date: 'MM/dd/yyyy') : 'Pick due date' }}\\n                                            </p>\\n                                        </div>\\n                                    </div>\\n                                </ng-container>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary\\\" (click)=\\\"goBack()\\\">\\n              <i class=\\\"material-icons\\\">arrow_back</i>\\n              <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Sacks Inventory/Stocks</h1>\\n            <p class=\\\"sub-heading mb-8\\\">Date: <strong>{{ items.created_at | date: 'MMMM dd, yyyy' }}</strong></p>\\n            <p class=\\\"sub-heading mb-8\\\">Warehouseman: <strong>{{ items.name }}</strong></p>\\n            <ng-container *ngIf=\\\"showtimeago\\\">\\n              <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.created_at\\\">last updated {{ activity.created_at | timeago }}</p>\\n              <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.created_at\\\" [theme]=\\\"{\\n                  'border-radius' : '5px',\\n                  'margin-bottom' : '10px',\\n                  'height' : '20px'\\n              }\\\"></ngx-skeleton-loader>\\n            </ng-container>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" [disabled]=\\\"!isLoaded\\\">\\n            <i class=\\\"icon-download\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n            <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n          </button>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n          <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" [disabled]=\\\"!isLoaded\\\">\\n            <i class=\\\"icon-download\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n            <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n          </button>\\n        </div>\\n    </div>\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>Beginning stocks</p>\\n                <h1 class=\\\"heading\\\">{{ items.last_data ? (items.last_data.last_ending | number) : 0  }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>No. of In/from House</p>\\n                <h1 class=\\\"heading\\\">{{ in_house | number  }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>No. of Out/Sales</p>\\n                <h1 class=\\\"heading\\\">{{ out_sales | number  }}</h1>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-6 col-sm-12 col-12 mb-15\\\">\\n            <div class=\\\"container-card p-20\\\">\\n                <p>Total Remaining for this day</p>\\n                <h1 class=\\\"heading\\\">{{ items.last_ending | number  }}</h1>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n      <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items\\\">\\n                <tr>\\n                  <td>Sacks</td>\\n                  <td>{{ items.last_ending > 0 ? 'Available' : 'Out of Stock' }}</td>\\n                  <td>{{ items.last_data ? (items.last_data.last_ending | number) : 0  }}</td>\\n                  <td *ngFor=\\\"let item of items.sack_bldg_inventory; let i = index\\\">{{ item.count | number }}</td>\\n                  <td>{{ items.total_in | number }}</td>\\n                  <td>{{ items.total_out | number }}</td>\\n                  <td>{{ items.sales | number }}</td>\\n                  <td>{{ items.last_ending | number }}</td>\\n                  <td>{{ items.remarks }}</td>\\n                  <td>{{ items.remarks_out }}</td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && !items\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n    </div>\\n  </section>\"","export default \"\"","export default \"\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n  <div class=\\\"row mb-35\\\">\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n      <h1 class=\\\"heading\\\">Sacks Inventory/Stocks </h1>\\n      <p class=\\\"sub-heading mb-8\\\">Grand total quantity of sacks: <strong>{{ totalItems | number }}</strong></p>\\n      <ng-container *ngIf=\\\"showtimeago\\\">\\n        <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.created_at\\\">last updated {{ activity.created_at | timeago }}</p>\\n        <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.created_at\\\" [theme]=\\\"{\\n            'border-radius' : '5px',\\n            'margin-bottom' : '10px',\\n            'height' : '20px'\\n        }\\\"></ngx-skeleton-loader>\\n      </ng-container>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n        <i class=\\\"icon-download\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n        <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n      </button>\\n    </div>\\n    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n      <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n        <i class=\\\"icon-download\\\"></i>\\n        <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n        <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <h6 class=\\\"card-heading\\\">Filters</h6>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n        <div class=\\\"row\\\">\\n<!--           <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Dates - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Dates' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div> -->\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n        <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"container-card p-30\\\">\\n    <div class=\\\"row mb-25\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-3 offset-xl-2 col-lg-4 offset-lg-2 col-md-8 col-sm-9 col-8\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group search\\\">\\n            <i class=\\\"icon-search\\\"></i>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n              (keydown.enter)=\\\"searchItem()\\\" />\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n        <div class=\\\"form-group\\\">\\n<!--           <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n            <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n            <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n          </button> -->\\n          <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n              <input [max]=\\\"max_date\\\" [satDatepicker]=\\\"created_at_picker\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\"\\n                [(ngModel)]=\\\"created_at\\\">\\n              <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n              <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block\\\"\\n                (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Dates - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Dates' }}\\n                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <ng-container *ngIf=\\\"visible_columns.length > 0\\\">\\n      <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n        <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n          <thead>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n              <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                <td>{{ item.created_at | date: 'MM/dd/yyyy' }}</td>\\n                <td>{{ item.last_data ? (item.last_data.last_ending) : 0 }}</td>\\n                <td>{{ item.total_in | number }}</td>\\n                <td>{{ item.total_out_sales | number }}</td>\\n                <td>{{ item.last_ending | number }}</td>\\n                <td>{{ item.name }}</td>\\n                <td>\\n                  <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/inventory-stocks/sacks/view', item.id]\\\">\\n                    <i class=\\\"icon-datatables-view\\\"></i>\\n                    View\\n                  </button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"!isLoaded\\\">\\n              <tr>\\n                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                  <ngx-skeleton-loader [theme]=\\\"{\\n                    'border-radius' : '5px',\\n                    'margin-bottom' : '0px',\\n                    'height' : '20px'\\n                  }\\\"></ngx-skeleton-loader>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n              <tr>\\n                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n              </tr>\\n            </ng-container>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                  {{ th.label }}\\n                  <ng-container *ngIf=\\\"th.canSort\\\">\\n                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                  </ng-container>\\n                </th>\\n              </ng-container>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 0\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12 text-center\\\">\\n          <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n        </div>\\n      </div>\\n    </ng-container>\\n    <div class=\\\"row mt-35\\\">\\n      <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"inner-group in-line\\\">\\n            <label class=\\\"mr-15\\\">Show</label>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n            </mat-select>\\n            <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n            </mat-select>\\n            <label>of {{ totalItems | number }} entries</label>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n        <ul class=\\\"paginate pull-right\\\">\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n              <a (click)=\\\"gotoPage(prev_page)\\\">\\n                  Previous\\n              </a>\\n          </li>\\n          <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n            <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n          </ng-container>\\n          <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n              <a (click)=\\\"gotoPage(next_page)\\\">\\n                  Next\\n              </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</section>\"","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <h6 class=\\\"mini-heading\\\">{{ modal_title }}</h6>\\n    </div>\\n</div>\\n<ng-container *ngIf=\\\"action == 'delete'\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"text-secondary\\\">{{ modal_message }}</label>\\n            </div>\\n        </div>\\n    </div>\\n</ng-container>\\n<form [formGroup]=\\\"feedUpdateForm\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"fs-16 mb-10\\\">Choose a feed</label>\\n                <mat-select class=\\\"btn btn-drop-down btn-block text-left mb-10\\\" placeholder=\\\"Please choose feed\\\" [value]=\\\"feed.feed_id\\\" (selectionChange)=\\\"chooseFeed($event)\\\">\\n                    <mat-option *ngFor=\\\"let feed of feed_options\\\" [value]=\\\"feed.id\\\">{{ feed.feed }}</mat-option>\\n                </mat-select>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-6 col-lg-6 col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"fs-16 mb-10\\\">Feed Consumption</label>\\n                <input type=\\\"number\\\" class=\\\"form-control mb-10\\\" placeholder=\\\"0\\\" maxlength=\\\"10\\\" (input)=\\\"setFeedValue($event.target.value)\\\" [value]=\\\"feed.feed_consumption\\\"/>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-6 text-right\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear\\\" (click)=\\\"closeModal()\\\">Cancel</button>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <button type=\\\"submit\\\" mat-flat-button class=\\\"btn btn-sm btn-block btn-primary\\\" (click)=\\\"submit()\\\">{{ modal_primary_button }}</button>\\n        </div>\\n    </div>\\n</form>\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n            <h1 class=\\\"heading\\\">Sales Performance Report</h1>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n                <i class=\\\"icon-download\\\"></i>\\n                <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n                <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"container-card p-30\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                <p class=\\\"mb-10\\\">Total Sales by egg sizes</p>\\n                <p class=\\\"sub-heading\\\">Total number of sales based on egg sizes</p>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <div class=\\\"inner-group in-line\\\">\\n                                <label class=\\\"mr-15\\\">Show:</label>\\n                                <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"All egg type\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                                    <mat-select-trigger>By egg type</mat-select-trigger>\\n                                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                                        <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                                    </ng-container>\\n                                </mat-select>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group mb-0\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose sales dates' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                    \\n                    <!-- <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <mat-select multiple class=\\\"btn btn-drop-down btn-block\\\" placeholder=\\\"All egg type\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_eggs\\\">\\n                                <mat-select-trigger>All egg type</mat-select-trigger>\\n                                <mat-option *ngFor=\\\"let egg_type of egg_type_options\\\" [value]=\\\"egg_type.id\\\">{{ egg_type.type }}</mat-option>\\n                            </mat-select>\\n                        </div>\\n                    </div> -->\\n                    <!-- <div class=\\\"col-xl-5 col-lg-5 col-md-5 col-sm-12 col-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <mat-select multiple class=\\\"btn btn-drop-down btn-block text-left\\\" placeholder=\\\"All house/building\\\" (selectionChange)=\\\"eggTypeSelected($event, i)\\\" [(ngModel)]=\\\"selected_house\\\">\\n                                <mat-select-trigger>All house/building</mat-select-trigger>\\n                                <mat-option *ngFor=\\\"let house of house_options\\\" [value]=\\\"house.id\\\">House/building no. {{ house.house_name }}</mat-option>\\n                            </mat-select>\\n                        </div>\\n                    </div> -->\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-auto col-auto ml-auto\\\" *ngIf=\\\"from && to\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear btn-sm\\\" (click)=\\\"clearFilters()\\\">Reset Filter</button>\\n                    </div>\\n                </div>\\n                <!-- <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-8 col-lg-8 col-md-8 col-sm-12 col-12 ml-auto\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                            <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? (from | date: 'MMMM dd, yyyy') + ' - ' + (to | date: 'MMMM dd, yyyy') : 'Choose harvest dates' }}\\n                                <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div> -->\\n            </div>\\n        </div>\\n        <div class=\\\"row mb-30\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-30\\\">\\n                <canvas baseChart \\n                    [datasets]=\\\"barChartData\\\"\\n                    [labels]=\\\"barChartLabels\\\"\\n                    [options]=\\\"barChartOptions\\\"\\n                    [plugins]=\\\"barChartPlugins\\\"\\n                    [legend]=\\\"barChartLegend\\\"\\n                    [chartType]=\\\"barChartType\\\">\\n                </canvas>\\n            </div>\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                <p>Egg Sizes</p>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n            <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n                        <thead>\\n                            <tr>\\n                                <th class=\\\"sort\\\" (click)=\\\"orderList(true, 'received_by_date', order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    Date\\n                                    <i *ngIf=\\\"order.order_by_column == 'received_by_date'\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != 'received_by_date' }\\\"></i>\\n                                </th>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of items; let i = index\\\">\\n                                <td>{{ item.grouped_date | date: 'MM/dd/yyyy' }}</td>\\n                                <ng-container *ngFor=\\\"let item of item.egg_types; let i = index\\\">\\n                                    <td *ngIf=\\\"ths[i].isVisible\\\">{{ item.total | number }}</td>\\n                                </ng-container>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                    <ngx-skeleton-loader [theme]=\\\"{\\n                                    'border-radius' : '5px',\\n                                    'margin-bottom' : '0px',\\n                                    'height' : '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                                <tr>\\n                                <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                            </tbody>\\n                    </table>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 text-center\\\">\\n                <p class=\\\"mb-0\\\">Please choose egg type</p>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row mt-35\\\">\\n            <!-- <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n                <div class=\\\"form-group\\\">\\n                <div class=\\\"inner-group in-line\\\">\\n                    <label class=\\\"mr-15\\\">Show</label>\\n                    <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                        <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n                    </mat-select>\\n                    <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                        <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n                    </mat-select>\\n                    <label>of {{ totalItems | number }} entries</label>\\n                </div>\\n                </div>\\n            </div> -->\\n            <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12 ml-auto\\\" *ngIf=\\\"totalPages > 1\\\">\\n                <ul class=\\\"paginate pull-right\\\">\\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                    <a (click)=\\\"gotoPage(prev_page)\\\">\\n                        Previous\\n                    </a>\\n                </li>\\n                <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n                    <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n                </ng-container>\\n                \\n                <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                    <a (click)=\\\"gotoPage(next_page)\\\">\\n                        Next\\n                    </a>\\n                </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-6\\\">\\n                <div class=\\\"container-card p-30 mt-30\\\">\\n                <p class=\\\"mb-10\\\">Sales with credit and balance</p>\\n                <div class=\\\"row\\\" *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                    <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\n                        <canvas baseChart [datasets]=\\\"barsChartData\\\" [labels]=\\\"barsChartLabels\\\" [options]=\\\"barsChartOptions\\\"\\n                            [plugins]=\\\"barsChartPlugins\\\" [legend]=\\\"barsChartLegend\\\" [chartType]=\\\"barsChartType\\\">\\n                        </canvas>\\n                    </div>\\n                    <div *ngIf=\\\"!from && !to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                        <p>All Dates</p>\\n                    </div>\\n                    <div *ngIf=\\\"from && to\\\" class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 text-center\\\">\\n                        <p>{{ from | date : 'MMMM dd, yyyy' }} - {{ to | date : 'MMMM dd, yyyy' }}</p>\\n                    </div>\\n                    <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                        <div class=\\\"col-12 text-center\\\">\\n                            <p class=\\\"\\\">No Result found</p>\\n                        </div>\\n                    </ng-container>\\n                </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-xl-6\\\">\\n                <div class=\\\"container-card p-30 mt-30\\\">\\n                    <p class=\\\"mb-10\\\">Location with highest orders</p>\\n                    <div class=\\\"row ml-10 mr-10 meds-title\\\">\\n                        <div class=\\\"col-8\\\">\\n                            <span class=\\\"sub-heading fs-16 font-weight-normal\\\">Location</span>\\n                        </div>\\n                        <div class=\\\"col-4\\\">\\n                            <span class=\\\"sub-heading fs-16 font-weight-normal\\\">No. of orders</span>\\n                        </div>\\n                    </div>\\n                    <span class=\\\"card-line\\\">______________________________________________________________</span>\\n                    <div class=\\\"row ml-10 mr-10 meds-cont\\\">\\n                        <ng-container *ngIf=\\\"highest_orders\\\">\\n                            <ng-container *ngFor=\\\"let item of highest_orders; let i = index\\\">\\n                                <div class=\\\"col-8\\\">\\n                                    <p class=\\\"mini-heading fs-14 mt-10 mb-0 font-weight-normal\\\" *ngIf=\\\"isLoaded\\\">{{ item.location_address }}\\n                                    </p>\\n                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                                        'border-radius': '5px',\\n                                                                        'margin-bottom': '0px',\\n                                                                        'height': '20px',\\n                                                                        'width': '50%'\\n                                                                    }\\\"></ngx-skeleton-loader>\\n                                </div>\\n                                <div class=\\\"col-4 text-center\\\">\\n                                    <p class=\\\"mini-heading fs-14 mt-10 mb-0 font-weight-normal\\\" *ngIf=\\\"isLoaded\\\">{{ item.count }}</p>\\n                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                                        'border-radius': '5px',\\n                                                                        'margin-bottom': '0px',\\n                                                                        'height': '20px',\\n                                                                        'width': '50%'\\n                                                                    }\\\"></ngx-skeleton-loader>\\n                                </div>\\n                                <span class=\\\"card-subline\\\">___________________________________________________________</span>\\n                            </ng-container>\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"isLoaded && highest_orders.length == 0\\\">\\n                            <div class=\\\"col-12 text-center\\\">\\n                                <p class=\\\"\\\">No Result found</p>\\n                            </div>\\n                        </ng-container>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n</section>\"","export default \"\"","export default \"p {\\n  font-size: 16px;\\n  color: #72787F;\\n  text-transform: none;\\n}\\n\\n.heading {\\n  font-size: 24px;\\n  font-weight: bold;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.sub-heading {\\n  color: #72787F;\\n}\\n\\n.sub-heading.italic {\\n  font-style: italic;\\n}\\n\\n.sub-heading strong {\\n  color: #1E2631;\\n}\\n\\n.mini-heading {\\n  font-size: 20px;\\n  font-weight: 500;\\n  color: #1E2631;\\n  text-transform: none;\\n}\\n\\n.card-heading {\\n  font-size: 13px;\\n  font-weight: normal;\\n  text-transform: uppercase;\\n  color: #72787F;\\n}\\n\\n.sidebar {\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li {\\n  font-size: 16px;\\n}\\n\\n.sidebar ul li a.main-nav {\\n  color: #72787F;\\n}\\n\\n.sidebar ul li a.main-nav.sub {\\n  font-size: 14px;\\n}\\n\\n.sidebar ul li a.main-nav:hover {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\n.sidebar ul li.active a {\\n  font-weight: 500;\\n  color: #1E2631;\\n}\\n\\nmat-checkbox label {\\n  font-size: 16px !important;\\n}\\n\\n.vertical-text {\\n  transform: rotate(-90deg);\\n  -webkit-transform: rotate(-90deg);\\n  -moz-transform: rotate(-90deg);\\n  -ms-transform: rotate(-90deg);\\n  -o-transform: rotate(-90deg);\\n}\\n\\n.vertical-text-full {\\n  width: -webkit-max-content;\\n  width: -moz-max-content;\\n  width: max-content;\\n  position: absolute;\\n  left: -25%;\\n  top: 50%;\\n}\\n\\n.body-card h1 {\\n  font-weight: normal;\\n}\\n\\n.body-card .action-note {\\n  line-height: 21px;\\n}\\n\\n.body-card .btn-secondary {\\n  width: 100%;\\n  padding-top: 9px;\\n  padding-bottom: 5px;\\n}\\n\\n.body-card .btn-secondary .cus-layer {\\n  height: 100%;\\n}\\n\\n.body-card .row .row {\\n  width: 100% !important;\\n}\\n\\n.body-card .row .row .tag {\\n  background: #EB5A46;\\n  border-radius: 34px;\\n  padding: 4px 20px;\\n  width: -webkit-fit-content;\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  font-size: 14px;\\n  color: #fff;\\n  line-height: 21px;\\n}\\n\\n.body-card .row .row p {\\n  color: #72787F;\\n}\\n\\n.field-pasword {\\n  border: transparent;\\n  outline: none;\\n  border: 0;\\n}\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n        <div class=\\\"col-10\\\">\\n            <h1 class=\\\"heading\\\">View Transaction Details</h1>\\n        </div>\\n        <div class=\\\"col-2\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\n                <i class=\\\"icon-back\\\"></i>\\n                <span class=\\\"ml-15\\\">Go back to list</span>\\n            </button>\\n        </div>\\n    </div>\\n    <!-- <div class=\\\"row mb-30\\\" *ngIf=\\\"item.order_status <= 3\\\">\\n        <div class=\\\"col-8\\\">\\n            <div class=\\\"order-timer\\\">\\n                <div class=\\\"note\\\">\\n                  <img src=\\\"./../../../../../assets/images/others/alert-icon.svg\\\">\\n                  Orders needed to pick up within 10 hours after processing the order.\\n                  <ng-container *ngIf=\\\"!display_timer\\\">\\n                    <br><br>Note: Customer has not yet picked up the order on the specified time.\\n                  </ng-container>\\n                </div>\\n                <div class=\\\"timer\\\" *ngIf=\\\"display_timer\\\">\\n                  <img src=\\\"./../../../../../assets/images/others/timer.svg\\\">\\n                  <countdown divider=\\\":\\\" [text]=\\\"timerLabels\\\" units=\\\"Hours | Minutes | Seconds\\\" [end]=\\\"item.date_to_pickup\\\" showZero=\\\"true\\\" (reached)=\\\"removeTimer($event)\\\"></countdown>\\n                </div>\\n            </div>\\n        </div>\\n    </div> -->\\n    <div class=\\\"row mb-30\\\">\\n        <div class=\\\"col-8\\\">\\n            <div class=\\\"container-card view-record p-30\\\">\\n                <div class=\\\"row mb-10\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <p class=\\\"mini-heading\\\">Order no.\\n                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.transaction_id }}</ng-container>\\n                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                'border-radius': '5px',\\n                                'margin-bottom': '0px',\\n                                'height': '20px',\\n                                'width': '25%'\\n                            }\\\"></ngx-skeleton-loader>\\n                        </p>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                            <table>\\n                                <tbody>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Order Status</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.status }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Mode of Payment</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.payment_type }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Payment Status</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.payment_status_label }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Order Date</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.created_at | date: 'MM/dd/yyyy' }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Order Time</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.created_at | date: 'hh:mm aaa' }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <ng-container *ngIf=\\\"item && item.mode_of_payment == 1\\\">\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Total Bill</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">\\n                                                    <p class=\\\"text-danger fs-24 mb-0\\\">₱ {{ item.total_price | number : '1.2-2' }}</p>\\n                                                </ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"item && item.mode_of_payment == 2\\\">\\n                                        <!-- <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Order Amount</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">₱ {{ item.total_price | number : '1.2-2' }}</ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr> -->\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Credit Amount</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">\\n                                                    <p class=\\\"text-danger fs-24 mb-0\\\">₱ {{ item.payment.balance | number : '1.2-2' }}<span *ngIf=\\\"item.discount > 0\\\" class=\\\"fs-14\\\">(-{{ item.discount | number : '1.2-2' }})</span></p>\\n                                                </ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Date to pay credited amount</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">{{ item.payment.due_date | date : 'MM/dd/yyyy' }}</ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                    </ng-container>\\n                                    <ng-container *ngIf=\\\"item && item.mode_of_payment == 3\\\">\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Order Amount</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">₱ {{ item.total_price | number : '1.2-2' }} <span *ngIf=\\\"item.discount > 0\\\" class=\\\"fs-14\\\">(-{{ item.discount | number : '1.2-2' }})</span></ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Initial Payment</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">₱ {{ item.payment.payment | number : '1.2-2' }} <span *ngIf=\\\"item.discount > 0\\\" class=\\\"fs-14\\\">(-{{ item.discount | number : '1.2-2' }})</span></ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Remaining Balance</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">\\n                                                    <p class=\\\"text-danger fs-24 mb-0\\\">₱ {{ item.payment.balance | number : '1.2-2' }}</p>\\n                                                </ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                        <tr>\\n                                            <td class=\\\"w-30-per alt\\\">Date to pay credited amount</td>\\n                                            <td class=\\\"w-70-per\\\">\\n                                                <ng-container *ngIf=\\\"isLoaded\\\">{{ item.payment.due_date | date : 'MM/dd/yyyy' }}</ng-container>\\n                                                <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                    'border-radius': '5px',\\n                                                    'margin-bottom': '0px',\\n                                                    'height': '20px',\\n                                                    'width': '50%'\\n                                                }\\\"></ngx-skeleton-loader>\\n                                            </td>\\n                                        </tr>\\n                                    </ng-container>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Customer Name</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.customer_details.profile_first_name }} {{ item.customer_details.profile_last_name }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Mobile Number</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.customer_details.contact_number }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Address</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.customer_details.address_address }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td class=\\\"w-30-per alt\\\">Customer other requests/notes</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.note }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                    <tr *ngIf=\\\"item.created_by\\\">\\n                                        <td class=\\\"w-30-per alt\\\">Created By</td>\\n                                        <td class=\\\"w-70-per\\\">\\n                                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.created_by }}</ng-container>\\n                                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                                'border-radius': '5px',\\n                                                'margin-bottom': '0px',\\n                                                'height': '20px',\\n                                                'width': '50%'\\n                                            }\\\"></ngx-skeleton-loader>\\n                                        </td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-4\\\">\\n            <!-- ACTION CONTAINER -->\\n            <div class=\\\"row mb-30\\\" *ngIf=\\\"item.order_status > 2 && item.order_status < 7\\\">\\n                <div class=\\\"col-12\\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <p class=\\\"mini-heading\\\">Actions</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(item, 'update_payment')\\\" [disabled]=\\\"item.payment_status == 1\\\">Update Payment</button>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" [routerLink]=\\\"[ '/transactions/payments', item.id]\\\" [disabled]=\\\"!item.payment.receipt_no\\\">View Payment</button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30\\\" *ngIf=\\\"showAction\\\">\\n                <div class=\\\"col-12\\\" *ngIf=\\\"\\n                (item.mode_of_payment == 1 && (userProfile.user_role_id == 5 || userProfile.user_role_id == 4)) ||\\n                (item.mode_of_payment != 1 && userProfile.user_role_id == 4) ||\\n                (item.order_status == 3) ||\\n                (item.mode_of_payment != 1 && item.balance_credit_approved == 1 && userProfile.user_role_id == 5)\\n                \\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <p class=\\\"mini-heading\\\">Actions</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-30\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(item, primary_button_action)\\\">{{ primary_button }}</button>\\n                            </div>\\n                        </div>\\n                        <ng-container *ngIf=\\\"item.order_status == 1\\\">\\n                            <div class=\\\"row mb-10\\\">\\n                                <div class=\\\"col-12\\\">\\n                                    <h6>Decline Order?</h6>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row mb-10\\\">\\n                                <div class=\\\"col-12\\\">\\n                                    <p>By declining, you need to state the reason for such decision. Reasons must be valid.</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-12\\\">\\n                                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-danger btn-block\\\" (click)=\\\"openModal(item, 'order_decline')\\\">Yes I understand, decline this</button>\\n                                </div>\\n                            </div>\\n                        </ng-container>\\n                        <!-- <ng-container *ngIf=\\\"item.order_status == 3\\\">\\n                            <div class=\\\"row mb-10\\\">\\n                                <div class=\\\"col-12\\\">\\n                                    <h6>Cancel Order?</h6>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row mb-10\\\">\\n                                <div class=\\\"col-12\\\">\\n                                    <p>By cancelling, you need to state the reason for such decision. Reasons must be valid.</p>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-12\\\">\\n                                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-secondary btn-block\\\" (click)=\\\"openModal(item, 'order_cancel')\\\">Yes I understand, cancel this</button>\\n                                </div>\\n                            </div>\\n                        </ng-container> -->\\n                    </div>\\n                </div>\\n                <div class=\\\"col-12\\\" *ngIf=\\\"\\n                item.mode_of_payment != 1 &&\\n                userProfile.user_role_id == 5 &&\\n                item.balance_credit_approved == 0\\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <p class=\\\"mini-heading\\\">Pending Manager's Approval</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Note:</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <p>Only the manager may approve/decline orders with balance or credit</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row mb-30\\\" *ngIf=\\\"item.order_status == 8\\\">\\n                <div class=\\\"col-12\\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <p class=\\\"mini-heading\\\">Order Declined</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <h6>Reason for declining:</h6>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <p>{{ item.order_cancel_decline.message }}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <!-- ACTION CONTAINER -->\\n\\n            <div class=\\\"row mb-30\\\">\\n                <div class=\\\"col-12\\\">\\n                    <div class=\\\"container-card view-record p-30\\\">\\n                        <div class=\\\"row mb-10\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <p class=\\\"mini-heading\\\">Order Status</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-12\\\">\\n                                <div class=\\\"tracking-sect\\\">\\n                                    <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                        'border-radius': '5px',\\n                                        'margin-bottom': '0px',\\n                                        'height': '20px'\\n                                    }\\\"></ngx-skeleton-loader>\\n                                    <div class=\\\"timeline-sect\\\" *ngIf=\\\"isLoaded\\\">\\n                                        <ng-container *ngFor=\\\"let tl of item.tracking_status; let i = index\\\">\\n                                            <div class=\\\"tl-row row\\\">\\n                                                <div class=\\\"col-3 pr-0\\\">\\n                                                    <div class=\\\"timeline tl-date no-padding-left no-padding-right\\\">\\n                                                        {{ tl.created_at | date:'MMM dd, yyyy' }}<br>\\n                                                        {{ tl.created_at | date:'h:mm aaa' }}\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"col-2\\\">\\n                                                    <div class=\\\"timeline\\\">\\n                                                        <div class=\\\"timeline-progress\\\" [ngClass]=\\\"{'finish': tl.status == 2}\\\"></div>\\n                                                        <div class=\\\"timeline-circle\\\" [ngClass]=\\\"[tl.status == 2 ? 'finish':'', tl.status == 1 ? 'pending':'']\\\">\\n                                                            <img class=\\\"tl-check\\\" *ngIf=\\\"tl.status == 2\\\" src=\\\"./../../../../../assets/images/custom-check.png\\\">\\n                                                            <div class=\\\"tl-pending\\\" *ngIf=\\\"tl.status == 1\\\"></div>\\n                                                        </div>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"col-7 pl-0\\\">\\n                                                    <div class=\\\"timeline tl-cont no-padding-left\\\">\\n                                                        <p class=\\\"mb-0 mt-3\\\">{{ tl.statuslabel }}</p>\\n                                                        <p class=\\\"fs-10\\\">{{ tl.name }}</p>\\n                                                        <!-- <p no-margin class=\\\"tl-note\\\" *ngIf=\\\"tl.note\\\">{{ tl.note }}</p> -->\\n                                                    </div>\\n                                                </div>\\n                                            </div>\\n                                        </ng-container>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <div class=\\\"container-card p-30\\\">\\n                <div class=\\\"row mb-30\\\">\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n                        <p class=\\\"mini-heading\\\">Order no.\\n                            <ng-container *ngIf=\\\"isLoaded\\\">{{ item.transaction_id }}</ng-container>\\n                            <ngx-skeleton-loader *ngIf=\\\"!isLoaded\\\" [theme]=\\\"{\\n                                'border-radius': '5px',\\n                                'margin-bottom': '0px',\\n                                'height': '20px',\\n                                'width': '25%'\\n                            }\\\"></ngx-skeleton-loader>\\n                        </p>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(null, 'show_stocks')\\\">View Stocks</button>\\n                    </div>\\n                    <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\" *ngIf=\\\"item && item.order_status != 4 && !item.payment.receipt_no\\\">\\n                        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal(item, 'add_discount')\\\">Add discount</button>\\n                    </div>\\n                </div>\\n                <!-- <div class=\\\"row mt-23 mb-30 ml-0 mr-0\\\">\\n                    <h1 class=\\\"mini-heading mt-auto mb-auto\\\">Order no. {{ item.transaction_id }}</h1>\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary ml-auto h-50 pl-40 pr-40\\\">\\n                        Add discount\\n                    </button>\\n                </div> -->\\n                <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n                    <table>\\n                        <thead>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                    {{ th.label }}\\n                                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                                    <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                    <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                    </ng-container>\\n                                </th>\\n                                </ng-container>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container *ngIf=\\\"isLoaded && order_items.length > 0\\\">\\n                                <tr *ngFor=\\\"let item of order_items\\\">\\n                                    <td>{{ item.egg_type.type }}</td>\\n                                    <td>{{ item.order_item_details[0].price | number : '1.2-2' }}</td>\\n                                    <td>\\n                                        <ng-container *ngFor=\\\"let details of item.order_item_details; let i = index\\\">\\n                                            {{ details.qty }} {{ details.egg_cart_type.type }}{{ i < item.order_item_details.length - 1 ? ', ' : '' }}\\n                                        </ng-container>\\n                                    </td>\\n                                    <td>{{ item.total_pieces | number }} pieces</td>\\n                                    <td>₱ {{ item.total_price | number : '1.2-2' }}</td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"!isLoaded\\\">\\n                                <tr>\\n                                    <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                                        <ngx-skeleton-loader [theme]=\\\"{\\n                                            'border-radius' : '5px',\\n                                            'margin-bottom' : '0px',\\n                                            'height' : '20px'\\n                                        }\\\"></ngx-skeleton-loader>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                            <ng-container *ngIf=\\\"isLoaded && order_items.length == 0\\\">\\n                                <tr>\\n                                    <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                                </tr>\\n                            </ng-container>\\n                        </tbody>\\n                        <tfoot>\\n                            <tr>\\n                                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                                    <th [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                                        {{ th.label }}\\n                                        <ng-container *ngIf=\\\"th.canSort\\\">\\n                                        <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                                        <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                                        </ng-container>\\n                                    </th>\\n                                </ng-container>\\n                            </tr>\\n                        </tfoot>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"\"","export default \"\"","export default \"\"","export default \"<section class=\\\"main-container p-35\\\">\\n    <div class=\\\"row mb-35\\\">\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n        <h1 class=\\\"heading\\\">All Daily Reports</h1>\\n        <ng-container *ngIf=\\\"showtimeago\\\">\\n          <p class=\\\"sub-heading italic\\\" *ngIf=\\\"activity && activity.updated_at\\\">last updated {{ activity.updated_at | timeago }}</p>\\n          <ngx-skeleton-loader *ngIf=\\\"!activity || !activity.updated_at\\\" [theme]=\\\"{\\n              'border-radius' : '5px',\\n              'margin-bottom' : '10px',\\n              'height' : '20px'\\n          }\\\"></ngx-skeleton-loader>\\n        </ng-container>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6 ml-auto\\\">\\n        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"openModal()\\\" [disabled]=\\\"!isLoaded\\\">\\n          <i class=\\\"icon-download\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as PDF</span>\\n          <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">PDF</span>\\n        </button>\\n      </div>\\n      <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-6 col-6\\\">\\n        <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"exportToCsv()\\\" [disabled]=\\\"!isLoaded\\\">\\n          <i class=\\\"icon-download\\\"></i>\\n          <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-none d-sm-none d-none\\\">Download as CSV</span>\\n          <span class=\\\"ml-15 d-xl-none d-lg-none d-md-inline d-sm-inline d-inline\\\">CSV</span>\\n        </button>\\n      </div>\\n    </div>\\n  \\n    <div class=\\\"container-card p-30 mb-25\\\" *ngIf=\\\"show_filter\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n          <h6 class=\\\"card-heading\\\">Filters</h6>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-xl-10 col-lg-9 col-md-9 col-sm-12 col-12\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <input [satDatepicker]=\\\"created_at_picker\\\" [max]=\\\"max_date\\\" class=\\\"w-0 p-0 border-0\\\" (dateChange)=\\\"chooseCreatedAt($event)\\\" [(ngModel)]=\\\"created_at\\\">\\n                <sat-datepicker #created_at_picker [rangeMode]=\\\"true\\\"></sat-datepicker>\\n                <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" (click)=\\\"created_at_picker.open()\\\">{{ from && to ? 'Date - ' + (from | date: 'MM/dd/yyyy') + ' - ' + (to | date: 'MM/dd/yyyy') : 'Date' }}\\n                  <i class=\\\"icon-arrow-drop-down ml-5\\\"></i>\\n                </button>\\n              </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"flockmanId\\\" (selectionChange)=\\\"changeFlockman($event)\\\" *ngIf=\\\"staff_items\\\" placeholder=\\\"Flockman\\\">\\n                  <mat-option *ngFor=\\\"let staff of staff_items\\\" [value]=\\\"staff.id\\\">{{ staff.profile_first_name }} {{ staff.profile_last_name }}</mat-option>\\n                </mat-select>\\n              </div>\\n            </div>\\n            <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <mat-select class=\\\"btn btn-drop-down btn-sm btn-block text-left\\\" [(ngModel)]=\\\"report_status\\\" (selectionChange)=\\\"changeReportStatus($event)\\\" placeholder=\\\"Report Status\\\">\\n                  <mat-option *ngFor=\\\"let item of report_status_options\\\" [value]=\\\"item.value\\\">{{ item.label }}</mat-option>\\n                </mat-select>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-auto col-lg-auto col-md-auto col-sm-12 col-12 ml-auto\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-sm btn-clear btn-block\\\" (click)=\\\"clearFilters()\\\">\\n              Clear Filters\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"container-card p-30\\\">\\n      <div class=\\\"row mb-25\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-4 col-12\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"inner-group\\\">\\n                  <mat-select multiple class=\\\"btn btn-block btn-primary multiple-select\\\" (selectionChange)=\\\"changeColumnVisibility($event)\\\" placeholder=\\\"Column Visibility\\\" [(ngModel)]=\\\"visible_columns\\\" >\\n                    <mat-select-trigger>Column Visibility</mat-select-trigger>\\n                    <ng-container *ngFor=\\\"let item of ths; let i = index\\\">\\n                      <mat-option [value]=\\\"i\\\" [ngClass]=\\\"{ 'd-none' : !item.canToggle }\\\">{{ item.label }}</mat-option>\\n                    </ng-container>\\n                  </mat-select>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-xl-3 col-lg-3 col-md-4 col-sm-5 col-8\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group search\\\">\\n              <i class=\\\"icon-search\\\"></i>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputSearch\\\" placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"\\n                (keydown.enter)=\\\"searchItem()\\\" />\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-2 col-lg-3 col-md-4 col-sm-3 col-4\\\">\\n          <div class=\\\"form-group\\\">\\n            <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-block\\\" [ngClass]=\\\"{'btn-primary' : !show_filter, 'btn-secondary' : show_filter}\\\" (click)=\\\"showFilter()\\\">\\n              <i [ngClass]=\\\"{'icon-filter-inactive' : !show_filter, 'icon-filter-active' : show_filter}\\\"></i>\\n              <span class=\\\"ml-15 d-xl-inline d-lg-inline d-md-inline d-sm-none d-none\\\">{{ show_filter ? 'Hide Filter' : 'Show Filter' }}</span>\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n      <ng-container *ngIf=\\\"visible_columns.length > 1\\\">\\n        <div class=\\\"data-table p-relative table-listing\\\" style=\\\"overflow: auto;\\\">\\n          <table [ngStyle]=\\\"{'width.px': 200 * visible_columns.length}\\\">\\n            <thead>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <ng-container *ngIf=\\\"isLoaded && items.length > 0\\\">\\n                <tr *ngFor=\\\"let item of items; let i = index\\\" [routerLink]=\\\"[ '/daily-reports/view', item.id]\\\">\\n                  <td *ngIf=\\\"ths[0].isVisible\\\">{{ item.prepared_by_date | date: 'MM/dd/yyyy, hh:mm aaa' }}</td>\\n                  <td *ngIf=\\\"ths[1].isVisible\\\">{{ item.house_name.house_name }}</td>\\n                  <td *ngIf=\\\"ths[2].isVisible\\\">{{ item.age }}</td>\\n                  <td *ngIf=\\\"ths[3].isVisible\\\">{{ item.mortality | number }}</td>\\n                  <td *ngIf=\\\"ths[4].isVisible\\\">{{ item.mortality_rate | number : '1.2-2' }} %</td>\\n                  <td *ngIf=\\\"ths[5].isVisible\\\">{{ item.cull | number }}</td>\\n                  <td *ngIf=\\\"ths[6].isVisible\\\">{{ item.bird_count | number }}</td>\\n                  <td *ngIf=\\\"ths[7].isVisible\\\">{{ item.real_egg_count | number }} pcs</td>\\n                  <td *ngIf=\\\"ths[8].isVisible\\\">{{ item.production_rate | number : '1.2-2' }} %</td>\\n                  <td *ngIf=\\\"ths[9].isVisible\\\">{{ item.feeds.bags | number }}</td>\\n                  <td *ngIf=\\\"ths[10].isVisible\\\">{{ item.feeds.string }}</td>\\n                  <td *ngIf=\\\"ths[11].isVisible\\\">\\n                      <ng-container *ngFor=\\\"let medicine of item.medicine_name; let i = index\\\">\\n                          {{ medicine.medicine }}{{ i < item.medicine_name.length - 1 ? ', ': '' }}\\n                      </ng-container>\\n                  </td>\\n                  <td *ngIf=\\\"ths[12].isVisible\\\">{{ item.sortingRecordstatus ? item.sortingRecordstatus : item.recordStatus }}</td>\\n                  <td *ngIf=\\\"ths[13].isVisible\\\">{{ item.flockman }}</td>\\n                  <td *ngIf=\\\"ths[14].isVisible\\\">\\n                    <button type=\\\"button\\\" mat-flat-button class=\\\"btn btn-clear text-blue\\\" [routerLink]=\\\"[ '/daily-reports/view', item.id]\\\">\\n                      <i class=\\\"icon-datatables-view\\\"></i>\\n                      View Report\\n                    </button>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"!isLoaded\\\">\\n                <tr>\\n                  <td class=\\\"text-uppercase\\\" *ngFor=\\\"let x of counter(visible_columns.length); let i = index\\\">\\n                    <ngx-skeleton-loader [theme]=\\\"{\\n                      'border-radius' : '5px',\\n                      'margin-bottom' : '0px',\\n                      'height' : '20px'\\n                    }\\\"></ngx-skeleton-loader>\\n                  </td>\\n                </tr>\\n              </ng-container>\\n              <ng-container *ngIf=\\\"isLoaded && items.length == 0\\\">\\n                <tr>\\n                  <td [attr.colspan]=\\\"visible_columns.length\\\" class=\\\"text-center\\\">No Results found</td>\\n                </tr>\\n              </ng-container>\\n            </tbody>\\n            <tfoot>\\n              <tr>\\n                <ng-container *ngFor=\\\"let th of ths; let i = index\\\">\\n                  <th *ngIf=\\\"th.isVisible\\\" [ngClass]=\\\"{ 'sort' : th.canSort }\\\" (click)=\\\"orderList(th.canSort, th.key, order.order_by == 'desc' ? 'asc' : 'desc')\\\">\\n                    {{ th.label }}\\n                    <ng-container *ngIf=\\\"th.canSort\\\">\\n                      <i *ngIf=\\\"order.order_by_column == th.key\\\" [ngClass]=\\\"{ 'icon-datatables-order-asc' : order.order_by == 'asc', 'icon-datatables-order-desc' : order.order_by == 'desc' }\\\"></i>\\n                      <i [ngClass]=\\\"{ 'icon-datatables-order-default' : order.order_by_column != th.key }\\\"></i>\\n                    </ng-container>\\n                  </th>\\n                </ng-container>\\n              </tr>\\n            </tfoot>\\n          </table>\\n        </div>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"isLoaded && visible_columns.length == 1\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 text-center\\\">\\n            <p class=\\\"mb-0\\\">Please choose column visibility</p>\\n          </div>\\n        </div>\\n      </ng-container>\\n      <div class=\\\"row mt-35\\\">\\n        <div class=\\\"col-xl-5 col-lg-3 col-md-12 col-sm-12 col-12\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"inner-group in-line\\\">\\n              <label class=\\\"mr-15\\\">Show</label>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit\\\" (selectionChange)=\\\"changeLimit($event)\\\" *ngIf=\\\"totalItems >= 10\\\">\\n                  <mat-option *ngFor=\\\"let limit of limits\\\" [value]=\\\"limit.value\\\">{{ limit.label }}</mat-option>\\n              </mat-select>\\n              <mat-select class=\\\"btn btn-drop-down text-left mr-15\\\" [(ngModel)]=\\\"limit_disabled\\\" *ngIf=\\\"totalItems < 10\\\" disabled>\\n                  <mat-option [value]=\\\"limit_disabled\\\">{{ limit_disabled }}</mat-option>\\n              </mat-select>\\n              <label>of {{ totalItems | number }} entries</label>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-xl-7 col-lg-9 col-md-12 col-sm-12 col-12\\\" *ngIf=\\\"totalPages > 1\\\">\\n          <ul class=\\\"paginate pull-right\\\">\\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"prev_page\\\">\\n                <a (click)=\\\"gotoPage(prev_page)\\\">\\n                    Previous\\n                </a>\\n            </li>\\n            <ng-container *ngFor=\\\"let x of counter(totalPages); let i = index\\\">\\n              <li class=\\\"next-page cursor-pointer\\\" (click)=\\\"gotoPage(i+1)\\\" [ngClass]=\\\"{ 'c-pointer active' : page == i+1 }\\\" value=\\\"{{ i+1 }}\\\">{{ i+1 }}</li>\\n            </ng-container>\\n            \\n            <li class=\\\"link cursor-pointer\\\" *ngIf=\\\"next_page\\\">\\n                <a (click)=\\\"gotoPage(next_page)\\\">\\n                    Next\\n                </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n    </div>\\n  </section>  \"","export default \"\"","export default \"\"","export default \"\"","export default \"\"","export default \"\"","export default \"\"","export default \".btn-back {\\n  color: #444444;\\n  border: 2px solid #444444;\\n  background-color: #fafafa;\\n}\\n\\n.btn-back:hover {\\n  color: #1E2631;\\n}\"","export default \".content {\\n  -webkit-transition: 0.2s ease-in-out;\\n  transition: 0.2s ease-in-out;\\n  /* position:fixed; */\\n  padding: 0;\\n  bottom: 0;\\n  right: 0;\\n  /* width:82%; */\\n  margin-left: 18%;\\n  margin-top: 65px;\\n  /* height:91.2%; */\\n  background: #f3f6fe;\\n  z-index: 1;\\n  overflow: scroll;\\n}\\n.content.expanded {\\n  width: 95% !important;\\n  -webkit-transition: 0.2s ease-in-out;\\n  transition: 0.2s ease-in-out;\\n}\\n.content::-webkit-scrollbar {\\n  display: none;\\n}\\n.wrapper {\\n  padding: 0;\\n  width: 100vw;\\n  height: 100vh;\\n}\"","// if crypto is not installed on cli run \n// npm install crypto-js --save\n// if moment is not installed, on cli run\n// npm install moment-timezone '''\nimport * as CryptoJS from 'crypto-js'; \nimport * as moment from 'moment-timezone';\n\nexport const jwt = {\n    date: null,\n    header: {\n        alg: 'HS256',\n        typ: 'JWT',\n    },\n    payload: {\n\n    },\n    signature: '',\n    secret: '',\n\n    timezone: null,\n\n    setAlgo: function(alg){\n        this.header.alg = alg;\n        return this;\n    },\n\n    setClaim: function(key, value){\n        this.payload[key] = value;\n        return this;\n    },\n\n    setIssuer: function(issuer){\n        this.setClaim('iss', issuer);\n        return this;\n    },\n\n    setAudience: function(audience){\n        this.setClaim('aud', audience);\n        return this;\n    },\n\n    setExpiration: function(expiration){\n        this.setClaim('exp', expiration);\n        return this;\n    },\n\n    setId: function(id){\n        this.setClaim('jti', id);\n        return this;\n    },\n\n    setIssuedAt: function(){\n        let now = this.getTimeFormated();\n        this.setClaim('iat', now);\n        return this;\n    },\n\n    setSecret: function(s){\n        this.secret = s;\n        return this;\n    },\n\n    setDate: function(){\n        if(!this.date){\n            this.date = new Date();\n        }\n    },\n\n    getTimeFormated: function(){\n        this.setDate();\n        let d = this.date;\n\n        let mon = this.addZero(d.getMonth() + 1);\n        let date = this.addZero(d.getDate());\n        var hr = this.addZero(d.getHours());\n        let min = this.addZero(d.getMinutes());\n        let sec = this.addZero(d.getSeconds());\n        let now = d.getFullYear() + \"-\" + mon + \"-\" + date + \" \" + hr + \":\" + min + \":\" + sec;\n        return now;\n    },\n\n    addZero: function(value){\n        if(value < 10){\n            value = \"0\" + value;\n        }\n        return value;\n    },\n\n    getTimezone: function(){\n        this.setDate();\n        if(!this.timezone){\n            this.timezone = {\n                name: moment.tz.guess(),\n                gmt: this.date.toString().split(\"GMT\")[1].split(\" (\")[0]\n            }\n        }\n        return this.timezone;\n    },\n\n    sha256: function(h='', s=''){\n        return CryptoJS.HmacSHA256(h, s).toString();\n    },\n    base64url: function(source) {\n        let string = JSON.stringify(source);\n        let b64url = btoa(string);\n        b64url = b64url.replace(/=+$/, '');\n        b64url = b64url.replace(/\\+/g, '-');\n        b64url = b64url.replace(/\\//g, '_');\n        return b64url;\n    },\n    getToken: function(){\n        let header = this.base64url(this.header);\n        let payload = this.base64url(this.payload);\n        let signature = this.sha256(header + '.' + payload, this.secret);\n\n        let token = header + '.' + payload + '.' + signature;\n        return token;\n    },\n\n    /* payload */\n    getPayload: function(token){\n        var base64Url = token.split('.')[1];\n        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n        return JSON.parse(base64);\n    }\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class cookie {\n\n    isConsented = false;\n\n    constructor() {}\n\n    /**\n     * delete cookie\n     * @param name\n     */\n    public deleteCookie(name: string, domain: string = '') {\n        this.setCookie(name, null, -1, '/', domain);\n    }\n\n    /**\n     * get cookie\n     * @param {string} name\n     * @returns {string}\n     */\n    public getCookie(name: string) {\n        const ca: Array<string> = document.cookie.split(';');\n        const caLen: number = ca.length;\n        const cookieName = `${name}=`;\n        let c: string;\n\n        for (let i  = 0; i < caLen; i += 1) {\n            c = ca[i].replace(/^\\s+/g, '');\n            if (c.indexOf(cookieName) === 0) {\n                return c.substring(cookieName.length, c.length);\n            }\n        }\n        return '';\n    }\n\n    /**\n     * set cookie\n     * @param {string} name\n     * @param {string} value\n     * @param {number} expireDays\n     * @param {string} path\n     */\n    public setCookie(name: string, value: string, expireDays: number, path: string = '/', domain: string = '') {\n        const d: Date = new Date();\n\n        let expires = '';\n        if(expireDays){\n            d.setTime(d.getTime() + expireDays * 24 * 60 * 60 * 1000);\n            expires = `expires=${d.toUTCString()}`;\n        }\n\n        const cpath = path ? `; path=${path}` : '';\n        const cdomain = domain ? `; domain=${domain}` : '';\n        document.cookie = `${name}=${value}; ${expires}${cpath}${cdomain}`;\n    }\n\n    /**\n     * consent\n     * @param {boolean} isConsent\n     * @param e\n     * @param {string} COOKIE\n     * @param {string} EXPIRE_DAYS\n     * @returns {boolean}\n     */\n    public consent(isConsent: boolean, e: any, COOKIE: string, EXPIRE_DAYS: number) {\n        if (!isConsent) {\n            return this.isConsented;\n        } else if (isConsent) {\n            this.setCookie(COOKIE, '1', EXPIRE_DAYS);\n            this.isConsented = true;\n            e.preventDefault();\n        }\n    }\n\n}","export const urls = {\n  get_token: '/api/token/get',\n  admin_login: '/webapi/auth/login',\n  /* dashboard */\n  web_dashboard: '/webapi/dashboard/index',\n  feed_consumption: '/webapi/feedconsumption/feedconsumption',\n  med_consumption: '/webapi/medicineconsumption/medicineconsumption',\n  harvest_status: '/webapi/harvestproductionstatus/harvestproductionstatus',\n  harvest_rate: '/webapi/harvestproductionrate/harvestproductionrate',\n  recent_transactions: '/webapi/recenttransactions/recenttransactions',\n  staff_activities: '/webapi/recentstaffactivities/recentstaffactivities',\n  /* house */\n  house_listing: '/webapi/house/listing',\n  house_delete: '/webapi/house/delete',\n  house_save: '/webapi/house/save',\n  /* staff */\n  staff_listing: '/webapi/staff/listing',\n  staff_view: '/webapi/staff/view',\n  staff_profile: '/webapi/staff/staffprofile',\n  staff_update: '/webapi/staff/update',\n  staff_index: '/webapi/staff/index',\n  /* customer */\n  customer_listing: '/webapi/customers/listing',\n  customer_view: '/webapi/customer/view',\n  customer_profile: '/webapi/customer/profile',\n  customer_update: '/webapi/customer/update',\n  customer_index: '/webapi/customer/index',\n  customer_delete: '/webapi/customers/delete',\n  customer_type_listing: '/webapi/customertype/listing',\n  /* daily reports */\n  daily_listing: '/webapi/dailyreports/listing',\n  daily_index: '/webapi/dailyreports/index',\n  /* transactions/orders */\n  transaction_listing: '/webapi/transactions/listing',\n  transaction_index: '/webapi/transactions/index',\n  /* orders */\n  order_save: '/webapi/orders/save',\n  order_approve: '/webapi/orders/approve',\n  order_decline: '/webapi/orders/decline',\n  order_forrelease: '/webapi/orders/forrelease',\n  order_collectibles: '/webapi/orders/collectibles',\n  /* trays inventory */\n  tray_listing: '/webapi/trayinventory/listing',\n  tray_view: '/webapi/trayinventory/view',\n  /* sacks inventory */\n  sack_listing: '/webapi/sackinventory/listing',\n  sack_view: '/webapi/sackinventory/view',\n  /* feeds management */\n  feeds_listing: '/webapi/feedmanagement/listing',\n  feeds_index: '/webapi/feedmanagement/index',\n  feeds_save: '/webapi/feedmanagement/save',\n  feeds_delete: '/webapi/feedmanagement/delete',\n  /* medicine management */\n  medicine_listing: '/webapi/medicinemanagement/listing',\n  medicine_index: '/webapi/medicinemanagement/index',\n  medicine_save: '/webapi/medicinemanagement/save',\n  medicine_delete: '/webapi/medicinemanagement/delete',\n  /* medicine units */\n  medicineunits_listing: '/webapi/medicineunits/listing',\n  medicineunits_save: '/webapi/medicineunits/save',\n  medicineunits_delete: '/webapi/medicineunits/delete',\n  /* confirm password */\n  user_confirmpass: '/webapi/user/confirmpassword',\n  user_add: '/webapi/user/add',\n  user_update: '/webapi/user/update',\n  user_delete: '/webapi/user/delete',\n  /* fresh eggs */\n  freshegg_listing: '/webapi/freshegginventory/listing',\n  freshegg_view: '/webapi/freshegginventory/view',\n  freshegg_index: '/webapi/freshegginventory/index',\n  /* price management */\n  price_management_listing: '/webapi/pricemanagement/listing',\n  price_management_view: '/webapi/pricemanagement/view',\n  price_management_save: '/webapi/pricemanagement/save',\n  /* general activity */\n  general_activity: '/webapi/general/activity',\n  /* egg type */\n  eggtype_listing: '/webapi/eggtype/listing',\n  /* badge */\n  status_count: '/webapi/badge/statuscount',\n\n\n  /* webapi_sortingreport_index */\n  daily_sorting_index: '/webapi/sortingreport/index',\n\n  /* mode of payment approve */\n  mop_approve: '/webapi/mop/approve',\n\n  show_egg_stocks: '/api/inventory/search',\n  \n  /* generate password */\n  generate_password: '/webapi/generate/password',\n\n  performancereport_productionhouse: '/webapi/performancereport/productionhouse',\n  performancereport_productioneggsize: '/webapi/performancereport/productioneggsize',\n  performancereport_overallsales: '/webapi/performancereport/overallsales',\n  performancereport_saleseggsizes: '/webapi/performancereport/saleseggsizes',\n  performancereport_stocks: '/webapi/performancereport/stocks',\n  performancereport_feeds: '/webapi/performancereport/feeds',\n  performancereport_medicine: '/webapi/performancereport/medicine',\n  /* feeds and medicine consumption */\n  feedsmeds_consumption: '/webapi/feedsmedicineconsumption/view',\n  feedsmeds_validate: '/webapi/feedsmedicineconsumption/validate',\n\n  /* feeds and medicine consumption listing */\n  feedsmeds_listing: '/webapi/feedsmedicineconsumption/listing',\n  /* payment attachments */\n  paymentattachments_listing: '/webapi/paymentattachments/listing',\n  paymentattachments_save: '/webapi/paymentattachments/save',\n  paymentattachments_delete: '/webapi/paymentattachments/delete',\n\n  /* add discount */\n  discount_save: '/webapi/discount/save',\n\n  /* feeds meds update */\n  feeds_update: '/webapi/feedsmedicineconsumption/updatefeeds',\n\n  /* activity log */\n  activity_log: '/webapi/recentstaffactivities/activitylog',\n\n  /* get all medicine */\n  medicinemanage_getall: '/webapi/medicinemanagement/getall',\n\n  /* get all feeds */\n  feedmanage_getall: '/webapi/feedmanagement/getall',\n\n  /* add medicine */\n  feedsmeds_add: '/webapi/feedsmedicineconsumption/save',\n\n\n  /* notifications */\n  notificationslisting: '/api/notification/listing',\n  notificationsmarkasread: '/api/notification/markasread',\n\n  /* get single daily house harvest record */\n  feedsmeds_index: '/webapi/feedsmedicineconsumption/index',\n\n  /* update medicine consumption */\n  feedsmeds_updatemed: '/webapi/feedsmedicineconsumption/updatemedicine',\n\n  /* location with highest orders */\n  production_highestorders: '/webapi/performancereport/locationhighestorders',\n\n  /* credit balance chart */\n  production_creditbalance: '/webapi/performancereport/creditbalance',\n};","import { Router } from \"@angular/router\";\nimport { SessionStorageService } from \"ngx-webstorage\";\nimport { Injectable } from \"@angular/core\";\nimport { jwt } from \"./../jwt/jwt\";\nimport { cookie } from \"./../cookie/cookie\";\nimport { urls } from \"./../urls/urls\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\n\nimport * as moment from \"moment\";\nimport \"moment/locale/en-gb\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class env {\n  private secure = false;\n  private domain = /* \"localhost\"; */ \"gapan.livewire365.com\";\n\n  private url = \"http://api.gapan.livewire365.com\";\n  private secureUrl = \"https://api.gapan.livewire365.com\";\n/*   private url = \"http://dev.gapan.com\";\n  private secureUrl = \"https://dev.gapan.com\"; */\n  \n  private devicetoken = \"no-device\";\n  private deviceid = \"no-device\";\n\n  private apikey =\n    \"vmvm1xj0oeznryyd6ujdxogf6jhwiuh1oa1bbhaie1eubdtt61w3cqkkrx85d5ai8upbzsqlsp6hga0jl1nh1luiugae2dbzs1oudie9oakfu1nofhnyl434i0cpjoftvo31ikce3y2o4esf1hs9zo55v2xjg8nsiwz6jxcu5shlbnisgyvsbtfbldfxklszqpkizpnb\";\n\n  public _SUPERADMIN = 1;\n  public _ADMIN = 2;\n  public _SALES = 3;\n  public _PRODUCTIONPLANNER = 4;\n  public _PRODUCTIONMANAGER = 5;\n  public _PRESSOPERATOR = 6;\n\n  constructor(\n    private http: HttpClient,\n    private cookie: cookie,\n    public session: SessionStorageService,\n    public router: Router\n  ) {}\n  getUrl(path: string): any {\n    let url = \"\";\n    if (this.secure == true) {\n      url += this.secureUrl;\n    } else {\n      url += this.url;\n    }\n    url += path;\n    return url;\n  }\n\n  createUrlParam(p) {\n    let uriStr = \"?\";\n    for (let key of Object.keys(p)) {\n      if (p[key]) {\n        uriStr += key + \"=\" + p[key] + \"&\";\n      }\n    }\n    return uriStr;\n  }\n\n  getToken(): string {\n    return \"true\";\n  }\n  setToken(token: any, day: number = 0): any {\n    this.cookie.setCookie(\"token\", token, day, \"/\", this.domain); // '.'+\n  }\n\n  getCookie(name: string): any {\n    return this.cookie.getCookie(name);\n  }\n\n  deleteCookie(): any {\n    return this.cookie.deleteCookie(\"token\", this.domain); //'.'+\n  }\n\n  generateToken() {\n    let token = this.session.retrieve(\"token\");\n    if (!token) {\n      let tz = jwt.getTimezone();\n      let token = jwt.setAlgo(\"HS256\")\n        .setClaim(\"token\", \"exchange\")\n        .setClaim(\"tzoffset\", tz.gmt)\n        .setClaim(\"tzname\", tz.name)\n        .setIssuedAt()\n        .setSecret(this.apikey)\n        .getToken();\n      return token;\n    } else {\n      return token;\n    }\n  }\n\n  getHttpOptions() {\n    return new Promise(resolve => {\n        let httpOptions = {\n            headers: new HttpHeaders({\n                Authorization: \"Bearer \" + this.generateToken(),\n                Devicetoken: this.devicetoken,\n                Deviceid: this.deviceid\n            })\n        };\n        resolve(httpOptions);\n    });\n    /* let httpOptions = {\n      headers: new HttpHeaders({\n        Authorization: \"Bearer \" + this.generateToken(),\n        Devicetoken: this.devicetoken,\n        Deviceid: this.deviceid\n      })\n    };\n    return httpOptions; */\n  }\n\n  exchangeToken() {\n    let token = this.getCookie(\"token\");\n    if (!token.length) {\n        this.getHttpOptions().then(httpOptions => {\n            let url = this.getUrl(urls.get_token) + \"?device_token=\" + this.devicetoken;\n            return this.http.get<any>(url, httpOptions).subscribe(data => {\n                this.setToken(data.data.token);\n            });\n        });\n      /* let httpOptions = this.getHttpOptions();\n      let url =\n        this.getUrl(urls.get_token) + \"?device_token=\" + this.devicetoken;\n      return this.http.get<any>(url, httpOptions).subscribe(data => {\n        this.setToken(data.data.token);\n      }); */\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HouseService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) {\n\n  }\n  getList(page = 1, limit = 10, order?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.house_listing) + '/page/' + page + '/limit/' + limit;\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getAllList() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.house_listing);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  save(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.house_save);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  remove(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.house_delete);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdersService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n\n  save(data, action?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.order_save);\n        if (action) {\n          if (action == 'order_approve') {\n            url = this.env.getUrl(urls.order_approve);\n          } else if (action == 'order_decline') {\n            url = this.env.getUrl(urls.order_decline);\n          } else if (action == 'payment_add') {\n            url = this.env.getUrl(urls.order_forrelease);\n          } else if (action == 'transaction_create') {\n            url = this.env.getUrl(urls.order_save);\n          } else if (action == 'payment_approve') {\n            url = this.env.getUrl(urls.mop_approve);\n          }\n        } \n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getCount() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.status_count);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  savePayment(data) {\n    const formData = new FormData();\n\t\tfor (let propt in data) {\n\t\t\tformData.append(propt, data[propt]);\n\t\t}\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.order_forrelease);\n        \n        let request = this.http.post(url, formData, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getCollectibles(user_id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.order_collectibles) + '/user_id/' + user_id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\nimport { jwt } from \"./../../lib/jwt/jwt\";\nimport { SessionStorageService } from \"ngx-webstorage\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(\n    private session: SessionStorageService,\n    private http: HttpClient,\n    private router: Router,\n    private env: env\n  ) { }\n  saveUser(data) {\n    /* console.log(\"saveUser\", data); */\n    const formData = new FormData();\n\t\tfor (let propt in data) {\n\t\t\tformData.append(propt, data[propt]);\n\t\t}\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.user_add);\n        let request = this.http.post(url, formData, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  updateUser(data) {\n    /* console.log(\"saveUser\", data); */\n    const formData = new FormData();\n\t\tfor (let propt in data) {\n\t\t\tformData.append(propt, data[propt]);\n\t\t}\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.user_update);\n        let request = this.http.post(url, formData, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  confirmPassword(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.user_confirmpass);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  remove(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.user_delete);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) {\n\n  }\n  getList(page = 1, limit = 10, order?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.customer_listing) + '/page/' + page + '/limit/' + limit;\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getCustomerTypes() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.customer_type_listing);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  viewRecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.customer_view) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getProfile(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.customer_profile) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  save(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.customer_update);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getRecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.customer_index) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  remove(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.customer_delete);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PriceManagementService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n  getList(page = 1, limit = 10, type?, from?, to?, order?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.price_management_listing) + '/page/' + page + '/limit/' + limit;\n        if (type && type != 0) {\n          url += '/type/'+type;\n        }\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getPriceTrend(page = 1, limit = 10, type?, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.price_management_view) + '/page/' + page + '/limit/' + limit;\n        if (type && type != 0) {\n          url += '/type/'+type;\n        }\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  save(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.price_management_save);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n\n  getListByOrderId(page = 1, limit = 10, order_id?, type?, from?, to?, order?, search?) {\n    console.log(order);\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.paymentattachments_listing) + '/page/' + page + '/limit/' + limit;\n        if (order_id) {\n          url += '/order_id/'+order_id;\n        }\n        if (type && type != 0) {\n          url += '/type/'+type;\n        }\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  save(data) {\n    const formData = new FormData();\n\t\tfor (let propt in data) {\n\t\t\tformData.append(propt, data[propt]);\n    }\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.paymentattachments_save);\n        let request = this.http.post(url, formData, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  delete(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.paymentattachments_delete);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  saveDiscount(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.discount_save);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeedsMedicineConsumptionService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) {\n\n   }\n  getList(/* page = 1, limit = 10, */order?, house_id?) {\n    console.log(order);\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feedsmeds_consumption)/*  + '/page/' + page + '/limit/' + limit */;\n        if (order) {\n          url += '/order_by_column/' + order['order_by_column'] + '/order_by/' + order['order_by'];\n        }\n        if(house_id){\n          url += '/house_id/' + house_id;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getHouselist(page = 1, limit = 10) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feedsmeds_listing) + '/page/' + page + '/limit/' + limit;\n\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  updateFeeds(formdata) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feeds_update);\n        let request = this.http.post(url, formdata, httpOptions);\n        console.log('url', urls.feeds_update);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getAllmedicine() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicinemanage_getall);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getAllFeeds() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feedmanage_getall);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  saveMed(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feedsmeds_add);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getHouserecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feedsmeds_index) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  updateMeds(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feedsmeds_updatemed);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  validate() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feedsmeds_validate);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrdersService } from './../../../services/orders/orders.service';\nimport { UserService } from './../../../services/user/user.service';\nimport { EventsService } from 'angular4-events';\nimport { CustomerService } from './../../../services/customer/customer.service';\nimport { PriceManagementService } from './../../../services/price-management/price-management.service';\nimport { PaymentService } from './../../../services/payment/payment.service';\nimport { FeedsMedicineConsumptionService } from './../../../services/feeds-medicine-consumption/feeds-medicine-consumption.service';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n};\n\n@Component({\n  selector: 'app-confirm-password-modal',\n  templateUrl: './confirm-password-modal.component.html',\n  styleUrls: ['./confirm-password-modal.component.scss']\n})\nexport class ConfirmPasswordModalComponent implements OnInit {\n\n  public confirmPasswordForm: FormGroup;\n\n  item: any = [];\n  action: any;\n\n  modal_title: string = '';\n  modal_primary_button: string = '';\n  modal_primary_button_class: string = '';\n  modal_message: string = '';\n\n  show_password: boolean = false;\n\n  isLoading: boolean = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<ConfirmPasswordModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private ordersService: OrdersService,\n    private priceManagementService: PriceManagementService,\n    private userService: UserService,\n    private events: EventsService,\n    private customerService: CustomerService,\n    private paymentService: PaymentService,\n    private feedsMedicineConsumptionService: FeedsMedicineConsumptionService\n  ) {\n    this.confirmPasswordForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      password: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(8)\n        ])\n      ]\n    });\n  }\n\n  ngOnInit() {\n    this.item = this.data.item;\n    this.action = this.data.action;\n\n    console.log(\"item\", this.item);\n    console.log(\"action\", this.action);\n    this.confirmPasswordForm.controls.id.setValue(this.item.id);\n    if (this.action == 'order_approve') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To approve this order, please enter password below for validation:'\n      this.modal_primary_button = 'Yes, proceed';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'payment_approve') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To approve this request, please enter password below for validation:'\n      this.modal_primary_button = 'Yes, proceed';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'order_decline') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To decline this order, please enter password below for validation:'\n      this.modal_primary_button = 'Yes, proceed';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'user_add') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To add this new customer profile, please enter password below for validation:';\n      if (this.item.role != 3) {\n        this.modal_message = 'To add this new staff profile, please enter password below for validation:';\n      }\n      this.modal_primary_button = 'Submit';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'user_update') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To update customer profile, please enter password below for validation:';\n      if (this.item.role != 3) {\n        this.modal_message = 'To update staff profile, please enter password below for validation:';\n      }\n      this.modal_primary_button = 'Submit';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'user_delete') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To delete this customer profile, please enter password below for validation:';\n      if (this.item.role != 3) {\n        this.modal_message = 'To delete this staff profile, please enter password below for validation:';\n      }\n      this.modal_primary_button = 'Delete user';\n      this.modal_primary_button_class = 'btn-danger';\n    } else if (this.action == 'transaction_create') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To submit a new order, please enter password below for validation:';\n      this.modal_primary_button = 'Submit order';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'payment_add') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To save this payment, please enter password below for validation:';\n      this.modal_primary_button = 'Submit';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'price_create' || this.action == 'price_update') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To save this price, please enter password below for validation:';\n      this.modal_primary_button = 'Save';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'attachment_create') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To save this attachment, please enter password below for validation:';\n      this.modal_primary_button = 'Save';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'attachment_update') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To update this attachment, please enter password below for validation:';\n      this.modal_primary_button = 'Update';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'attachment_delete') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To delete this attachment, please enter password below for validation:';\n      this.modal_primary_button = 'Delete';\n      this.modal_primary_button_class = 'btn-danger';\n    } else if (this.action == 'add_discount') {\n      this.modal_title = 'Enter Your Password';\n      this.modal_message = 'To add discount, please enter password below for validation:';\n      this.modal_primary_button = 'Save';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'medicine_add') {\n      this.modal_title = 'Add Monthly Record';\n      this.modal_message = 'Are you sure you want to add this monthly record?'\n      this.modal_primary_button = 'Yes';\n      this.modal_primary_button_class = 'btn-primary';\n    }\n  }\n  async submit() {\n    this.isLoading = true;\n    await this.userService.confirmPassword(this.confirmPasswordForm.value).then(res => {\n      this.isLoading = false;\n      if (res['error'] == 0) {\n        this.proceedAction();\n      } else {\n        this.openSnackBar(res['message']);\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoading = false;\n      this.openSnackBar(e);\n    });\n  }\n  async proceedAction() {\n    this.isLoading = true;\n    if (this.action == 'order_approve' || this.action == 'order_decline' || this.action == 'payment_approve') {\n      await this.ordersService.save(this.item, this.action).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res['message']).then(() => {\n            this.events.publish('order_refresh', 1);\n          });\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'user_add') {\n      await this.userService.saveUser(this.item).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'user_update') {\n      await this.userService.updateUser(this.item).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'user_delete') {\n      if (this.item.role != 3) {\n        await this.userService.remove(this.item).then(res => {\n          this.isLoading = false;\n          if (res['error'] == 0) {\n            this.closeModal(res['message']);\n          } else {\n            this.openSnackBar(res['message']);\n            this.closeModal();\n          }\n        }).catch(e => {\n          console.log(e);\n          this.openSnackBar(e);\n          this.closeModal();\n          this.isLoading = false;\n        });\n      } else {\n        await this.customerService.remove(this.item).then(res => {\n          this.isLoading = false;\n          if (res['error'] == 0) {\n            this.closeModal(res['message']);\n          } else {\n            this.openSnackBar(res['message']);\n            this.closeModal();\n          }\n        }).catch(e => {\n          console.log(e);\n          this.openSnackBar(e);\n          this.closeModal();\n          this.isLoading = false;\n        });\n      }\n    } else if (this.action == 'transaction_create') {\n      await this.ordersService.save(this.item, this.action).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'payment_add') {\n      await this.ordersService.savePayment(this.item).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res['message']).then(() => {\n            this.events.publish('order_refresh', 1);\n          });\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'price_create' || this.action == 'price_update') {\n      await this.priceManagementService.save(this.item).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res['message']).then(() => {\n            this.events.publish('price_refresh', 1);\n          });\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'attachment_create' || this.action == 'attachment_update') {\n      await this.paymentService.save(this.item).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.events.publish('attachments_refresh', 1);\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'attachment_delete') {\n      await this.paymentService.delete(this.item).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.events.publish('attachments_refresh', 1);\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      });\n    } else if (this.action == 'add_discount') {\n      await this.paymentService.saveDiscount(this.item).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.events.publish('order_refresh', 1);\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n          this.closeModal();\n        }\n      }).catch(e => {\n        console.log(e);\n        this.openSnackBar(e);\n        this.closeModal();\n        this.isLoading = false;\n      })\n    } else if(this.action == 'medicine_add'){\n      await this.feedsMedicineConsumptionService.saveMed(this.item).then(res => {\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n      });\n    }\n  }\n  showPassword() {\n    this.show_password = !this.show_password;\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n  async openSnackBar(message) {\n    await this._snackBar.open(message, null, {\n      verticalPosition: 'top',\n      announcementMessage: message,\n      duration: 3000\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeedsMedicineManagementService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n  getFeedsList(page = 1, limit = 10, delivery_date?, feed?, expiration_date?, order?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feeds_listing) + '/page/' + page + '/limit/' + limit;\n        if (delivery_date) {\n          url += '/delivery_date/' + delivery_date;\n        }\n        if (feed) {\n          url += '/feed/' + feed;\n        }\n        if (expiration_date) {\n          url += '/expiration_date/' + expiration_date;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search=' + search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getMedicineList(page = 1, limit = 10, delivery_date?, medicine?, expiration_date?, order?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicine_listing) + '/page/' + page + '/limit/' + limit;\n        if (delivery_date) {\n          url += '/delivery_date/' + delivery_date;\n        }\n        if (medicine) {\n          url += '/medicine/' + medicine;\n        }\n        if (expiration_date) {\n          url += '/expiration_date/' + expiration_date;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search=' + search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getFeedRecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feeds_index) + '/id/' + id;\n        \n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getMedicineRecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicine_index) + '/id/' + id;\n        \n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  saveFeed(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feeds_save);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  saveMedicine(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicine_save);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  removeFeed(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feeds_delete);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  removeMedicine(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicine_delete);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getMedicineUnits() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicineunits_listing);\n        \n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  saveMedicineUnit(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicineunits_save);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  removeMedicineUnit(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicineunits_delete);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmPasswordModalComponent } from './../confirm-password-modal/confirm-password-modal.component';\n\nimport { OrdersService } from './../../../services/orders/orders.service';\nimport { FeedsMedicineManagementService } from './../../../services/feeds-medicine-management/feeds-medicine-management.service';\nimport { FeedsMedicineConsumptionService } from './../../../services/feeds-medicine-consumption/feeds-medicine-consumption.service';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n  page: any;\n};\n\n@Component({\n  selector: 'app-general-modal',\n  templateUrl: './general-modal.component.html',\n  styleUrls: ['./general-modal.component.scss']\n})\nexport class GeneralModalComponent implements OnInit {\n\n  public generalForm: FormGroup;\n\n  item: any = [];\n  action: any;\n  page: any;\n\n  modal_title: string = '';\n  modal_primary_button: string = 'Yes, proceed';\n  modal_primary_button_class: string = 'btn-primary';\n  modal_message: string = '';\n\n  modal_secondary_button: string = 'Cancel';\n  modal_secondary_button_class: string = 'btn-clear';\n\n\n  constructor(\n    public dialogRef: MatDialogRef<GeneralModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private ordersService: OrdersService,\n    private feedsMedicineConsumptionService: FeedsMedicineConsumptionService\n  ) {\n    this.generalForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n    });\n  }\n\n  ngOnInit() {\n    this.item = this.data.item;\n    this.action = this.data.action;\n    this.page = this.data.page;\n    console.log(\"this.item\", this.item);\n    console.log(\"this.action\", this.action);\n    console.log(\"this.page\", this.page);\n    if (this.item) {\n      this.generalForm.controls.id.setValue(this.item.id);\n    }\n    if (this.action == 'go_back') {\n      if (this.page == 'customer_create' || this.page == 'staff_create' || this.page == 'feed_create' || this.page == 'medicine_create' || this.page == 'transaction_create' || this.page == 'feedmedconsumption_create') {\n        this.modal_title = 'Go Back';\n        this.modal_message = 'Are you sure you want to go back to the list?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'customer_update' || this.page == 'staff_update' || this.page == 'feed_update' || this.page == 'medicine_update') {\n        this.modal_title = 'Go Back';\n        this.modal_message = 'All changes will be discarded. Are you sure you want to go back?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'payment_add') {\n        this.modal_title = 'Go Back';\n        this.modal_message = 'Are you sure you want to go back to the order details?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n      }\n    } else if (this.action == 'form_cancel') {\n      if (this.page == 'feedmedconsumption_create') {\n        this.modal_title = 'Add Monthly Record';\n        this.modal_message = 'Are you sure you want to cancel creating a new monthly record?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      }\n      if (this.page == 'customer_create') {\n        this.modal_title = 'Cancel New Customer';\n        this.modal_message = 'Are you sure you want to cancel creating a new customer?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'customer_update' || this.page == 'staff_update' || this.page == 'feed_update' || this.page == 'medicine_update') {\n        this.modal_title = 'Cancel Update';\n        this.modal_message = 'Are you sure you want to discard changes?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'staff_create') {\n        this.modal_title = 'Cancel New Staff';\n        this.modal_message = 'Are you sure you want to cancel creating a new staff?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'feed_create') {\n        this.modal_title = 'Cancel New Feed';\n        this.modal_message = 'Are you sure you want to cancel creating a new feed?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'medicine_create') {\n        this.modal_title = 'Cancel New Medicine';\n        this.modal_message = 'Are you sure you want to cancel creating a new medicine?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'transaction_create') {\n        this.modal_title = 'Cancel New Transaction';\n        this.modal_message = 'Are you sure you want to cancel creating a new transaction?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n        this.modal_secondary_button = 'No';\n      } else if (this.page == 'payment_add') {\n        this.modal_title = 'Cancel Add Payment';\n        this.modal_message = 'Are you sure you want to cancel adding payment?'\n        this.modal_primary_button = 'Yes';\n        this.modal_primary_button_class = 'btn-primary';\n      }\n    } else if (this.action == 'order_approve') {\n      this.modal_title = 'Approve Order';\n      this.modal_message = 'Do you want to proceed in approving this order?'\n    } else if (this.action == 'order_decline') {\n      this.modal_title = 'Decline Order';\n      this.modal_message = 'Please state the reason for declining this order.'\n      this.modal_primary_button = 'Next';\n      this.modal_primary_button_class = 'btn-danger';\n\n      this.generalForm.addControl('message', new FormControl(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(250)\n        ])\n      ));\n    } else if (this.action == 'feed_save' || this.action == 'medicine_save') {\n      this.modal_title = 'Save Item';\n      this.modal_message = 'Do you want to save this item?'\n      this.modal_primary_button = 'Yes';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'feed_update' || this.action == 'medicine_update') {\n      this.modal_title = 'Update Item';\n      this.modal_message = 'Do you want to update this item?'\n      this.modal_primary_button = 'Yes';\n      this.modal_primary_button_class = 'btn-primary';\n    } else if (this.action == 'feed_delete' || this.action == 'medicine_delete') {\n      this.modal_title = 'Delete Item';\n      this.modal_message = 'Do you want to delete this item?'\n      this.modal_primary_button = 'Yes';\n      this.modal_primary_button_class = 'btn-danger';\n    } else if (this.action == 'logout') {\n      this.modal_title = 'Logout';\n      this.modal_message = 'Are you sure you want to log out?'\n      this.modal_primary_button = 'Yes';\n      this.modal_primary_button_class = 'btn-primary';\n    } /* else if (this.action == 'medicine_add'){\n      this.modal_title = 'Add Medicine';\n      this.modal_message = 'Are you sure you want to add medicine?'\n      this.modal_primary_button = 'Yes';\n      this.modal_primary_button_class = 'btn-primary';\n    } */ else if (this.action == 'feed_add') {\n      this.modal_title = 'Update Feeds';\n      this.modal_message = 'Are you sure you want to update Gram/Bird Feeds?'\n      this.modal_primary_button = 'Yes';\n      this.modal_primary_button_class = 'btn-primary';\n    }\n  }\n  async submit() {\n    if (this.action == 'go_back' || this.action == 'form_cancel') {\n      this.closeModal(true);\n    } else if (this.action == 'order_approve' || this.action == 'order_decline') {\n      this.closeModal();\n      this.openModal(this.generalForm.value, this.action);\n    } else if (this.action == 'feed_save' || this.action == 'feed_update') {\n      await this.feedsMedicineManagementService.saveFeed(this.item).then(res => {\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n      });\n    } else if (this.action == 'feed_delete') {\n      await this.feedsMedicineManagementService.removeFeed(this.generalForm.value).then(res => {\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n      });\n    } else if (this.action == 'medicine_save' || this.action == 'medicine_update') {\n      await this.feedsMedicineManagementService.saveMedicine(this.item).then(res => {\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n      });\n    } else if (this.action == 'medicine_delete') {\n      await this.feedsMedicineManagementService.removeMedicine(this.generalForm.value).then(res => {\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n      });\n    } else if (this.action == 'logout') {\n      this.closeModal(true);\n    } /* else if(this.action == 'medicine_add'){\n      await this.feedsMedicineConsumptionService.saveMed(this.item).then(res => {\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n      });\n    } */\n    else if (this.action == 'feed_add') {\n      await this.feedsMedicineConsumptionService.updateFeeds(this.item).then(res => {\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.openSnackBar(res['message']);\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.openSnackBar(e);\n      });\n    }\n  }\n  openModal(item, action): void {\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: item,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n  async openSnackBar(message) {\n    await this._snackBar.open(message, null, {\n      verticalPosition: 'top',\n      announcementMessage: message,\n      duration: 3000\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\nimport { jwt } from \"./../../lib/jwt/jwt\";\nimport { SessionStorageService } from \"ngx-webstorage\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private session: SessionStorageService,\n    private http: HttpClient,\n    private router: Router,\n    private env: env\n  ) {\n\n  }\n  isLoggedIn(): any {\n    let token = this.session.retrieve(\"token\");\n    if (token) {\n      let payload = jwt.getPayload(token);\n      if (typeof payload.jti === \"undefined\") {\n        this.router.navigate([\"login\"]);\n      } else {\n        this.router.navigate([\"dashboard\"]);\n      }\n    } else {\n      this.router.navigate([\"login\"]);\n    }\n  }\n  login(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.admin_login);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  generate(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.generate_password);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  validateUserRole() {\n    let userProfile = JSON.parse(localStorage.getItem(\"user\"));\n    if (userProfile.user_role_id != 4) {\n      this.router.navigate(['transactions-status', 1]);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\n/* import 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map'; */\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularFireStoreService {\n\n  constructor(private afs: AngularFirestore) {\n\n  }\n  getCollection(collection) {\n    let observable = new Observable(observer => {\n      this.afs.collection(collection).valueChanges().subscribe(data => {\n        observer.next(data);\n      }, e => {\n        console.log(e);\n        observer.next({error: 1});\n      });\n    });\n    return observable;\n  }\n  getWhere(collection, field, value) {\n    let observable = new Observable(observer => {\n      this.afs.collection(collection, query => query.where(field, '==', value)).valueChanges().subscribe(data => {\n        observer.next({ error: 0, data: data });\n      }, e => {\n        console.log(\"e\", e);\n        observer.next({error: 1});\n      });\n    });\n    return observable;\n  }\n  getData(collection, field, value) {\n    return new Promise(resolve => {\n      this.afs.collection(collection, query => query.where(field, '==', value)).valueChanges().subscribe(data => {\n        if (data.length > 0) {\n          resolve({ error: 0, data: data });\n        } else {\n          resolve({ error: 1, data: data });\n        }\n      }, e => {\n        resolve({ error: 1, message: e });\n      });\n    });\n  }\n  setData(collection, data, id?) {\n    return new Promise(resolve => {\n      this.afs.collection(collection).doc(id).set(data).then(data => {\n        resolve({ error: 0, data: data });\n      }).catch(e => {\n        resolve({ error: 1, message: e });\n      });\n    });\n  }\n  removeData(collection, id) {\n    return new Promise(resolve => {\n      this.afs.collection(collection).doc(id).delete().then(data => {\n        resolve({ error: 0, data: data });\n      }).catch(e => {\n        console.log(\"e\", e);\n        resolve({ error: 1, data: e });\n      });\n    });\n  }\n  generateId() {\n    return new Promise(resolve => {\n      let id = this.afs.createId();\n      if (id) {\n        resolve({ error: 0, data: id });\n      } else {\n        resolve({ error: 1, message: 'Could not generate ID' });\n      }\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n  getUserNotificationList(page = 1, limit = 10, isUnread?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.notificationslisting) + '/page/' + page + '/limit/' + limit;\n        if (isUnread) {\n          url += '/isUnread/'+isUnread;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  markNotificationAsRead(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.notificationsmarkasread);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { HouseService } from './../../services/house/house.service';\nimport { EventsService } from 'angular4-events';\nimport { OrdersService } from './../../services/orders/orders.service'\nimport { GeneralModalComponent } from './../../components/modals/general-modal/general-modal.component';\nimport { SessionStorageService } from \"ngx-webstorage\";\nimport { AuthService } from \"src/app/services/auth/auth.service\";\nimport { AngularFireStoreService } from './../../services/angular-fire-store/angular-fire-store.service';\nimport { NotificationsService } from './../../services/notifications/notifications.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-template',\n  templateUrl: './template.component.html',\n  styleUrls: ['./template.component.scss']\n})\n\nexport class TemplateComponent {\n\n  userLogin: any;\n  houses: any = [];\n  statuscount: any = null;\n\n  isHandset$: Observable<boolean> = null;\n  notifCount: number = 0;\n  notifPreview: any = [];\n  constructor(\n    public auth: AuthService,\n    private breakpointObserver: BreakpointObserver,\n    private dialog: MatDialog,\n    public session: SessionStorageService,\n    private events: EventsService,\n    private houseService: HouseService,\n    private ordersService: OrdersService,\n    private afs: AngularFireStoreService,\n    private notificationsService: NotificationsService,\n    private router: Router,\n    private _snackBar: MatSnackBar\n  ) {\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches),shareReplay());\n    this.events.subscribe('sidebar_house_refresh', (res?) => {\n      if (res) {\n        this.getHouses();\n      }\n    });\n    this.events.subscribe('user_refresh', (res?) => {\n      if (res) {\n        this.userLogin = JSON.parse(localStorage.getItem(\"user\"));\n      }\n    });\n    this.events.subscribe('notifications:refresh', () => {\n      this.getUserNotificationList();\n    });\n    this.events.subscribe('notification:showsnackbar', (message?) => {\n      if (message) {\n        this.showSnackBar(message);\n      }\n    });\n  }\n  ngOnInit() {\n    this.userLogin = JSON.parse(localStorage.getItem(\"user\"));\n    this.getHouses();\n    this.getStatuscount();\n    this.waitForNotifications();\n  }\n  async getUserNotificationList() {\n    this.notifCount = 0;\n    await this.notificationsService.getUserNotificationList(1, 10, true).then(res => {\n      console.log(res);\n      if (res['error'] == 0) {\n        this.notifCount = Number(res['total_count']);\n        this.notifPreview = res['datas'];\n      }\n    });\n  }\n  async waitForNotifications() {\n    await this.afs.getWhere('daily_house_harvest', 'receiver_id', this.userLogin.id).subscribe(res => {\n      console.log(\"waitForNotifications\", res);\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('daily_house_harvest', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n    await this.afs.getWhere('daily_house_harvest_success', 'receiver_id', this.userLogin.id).subscribe(res => {\n      console.log(\"waitForNotifications\", res);\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('daily_house_harvest_success', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n    await this.afs.getWhere('daily_house_harvest_received', 'receiver_id', this.userLogin.id).subscribe(res => {\n      console.log(\"waitForNotifications\", res);\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('daily_house_harvest_received', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n    await this.afs.getWhere('daily_sorted_report', 'receiver_id', this.userLogin.id).subscribe(res => {\n      console.log(\"waitForNotifications\", res);\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('daily_sorted_report', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n    await this.afs.getWhere('sorted_report_success', 'receiver_id', this.userLogin.id).subscribe(res => {\n      console.log(\"waitForNotifications\", res);\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('sorted_report_success', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n    await this.afs.getWhere('sorted_report_received', 'receiver_id', this.userLogin.id).subscribe(res => {\n      console.log(\"waitForNotifications\", res);\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('sorted_report_received', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n\n    await this.afs.getWhere('new_order', 'receiver_id', this.userLogin.id).subscribe(res => {\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('new_order', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n\n    await this.afs.getWhere('order_cancelled', 'receiver_id', this.userLogin.id).subscribe(res => {\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('order_cancelled', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n\n    await this.afs.getWhere('order_pickup', 'receiver_id', this.userLogin.id).subscribe(res => {\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('order_pickup', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n\n    await this.afs.getWhere('order_completed', 'receiver_id', this.userLogin.id).subscribe(res => {\n      if (res['error'] == 0) {\n        if (res['data'].length > 0) {\n          this.events.publish('notification:showsnackbar', res['data'][0]['message']);\n        }\n        this.events.publish('notifications:refresh');\n        res['data'].forEach(data => {\n          if (data.data) {\n            this.afs.removeData('order_completed', data.document_id).then(res => {\n              console.log(\"this.cfs.remove\", res);\n            });\n          }\n        });\n      }\n    });\n  }\n  getHouses() {\n    this.houseService.getAllList().then(res => {\n      console.log(\"gethouses\", res);\n      if (res['error'] == 0) {\n        this.houses = res['datas'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  getStatuscount() {\n    this.ordersService.getCount().then(res => {\n      /* console.log(\"getStatuscount\", res); */\n      if (res['error'] == 0) {\n        this.statuscount = res['data'];\n        console.log(\"getStatuscount\", this.statuscount);\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  logout() {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: 'logout',\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.session.clear();\n        this.auth.isLoggedIn();\n      }\n    });\n  }\n  gotoPage(notifData) {\n    /* let markasread = {\n      notif_id: notifData.id,\n      item_id: notifData.item_id,\n      type: notifData.type\n    };\n    this.notificationsService.markNotificationAsRead(markasread).then(res => {\n      if (res['error'] == 0) {\n        this.events.publish('notifications:refresh');\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    }); */\n    if (notifData.type >= 1 && notifData.type <= 14) {\n      this.router.navigate(['/daily-reports/view', notifData.item_id]);\n    } else if (notifData.type >= 15) {\n      this.router.navigate(['/transactions/view', notifData.item_id]);\n    }\n  }\n  showSnackBar(message) {\n    this._snackBar.open(message, 'Okay', {\n      verticalPosition: 'bottom',\n      horizontalPosition: 'end',\n      announcementMessage: message,\n      duration: 3000\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SessionStorageService } from \"ngx-webstorage\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private session: SessionStorageService,\n    private _route: Router\n  ) {\n\n  }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (!this.session.retrieve(\"token\")) {\n      this._route.navigate([\"/login\"]);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\nimport { AuthService } from './../../../services/auth/auth.service';\nimport { SessionStorageService } from \"ngx-webstorage\";\nimport { Router } from \"@angular/router\";\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"]\n})\nexport class LoginComponent implements OnInit {\n\n  public loginForm: FormGroup;\n  show_password: boolean = false;\n  isLoading: boolean = false;\n\n  constructor(\n    private auth: AuthService,\n    private route: Router,\n    private session: SessionStorageService,\n    protected formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar\n  ) {\n    this.loginForm = this.formBuilder.group({\n      email: [\n        '',\n        Validators.compose([\n          Validators.required,\n          /* Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$') */\n          Validators.minLength(5)\n        ])\n      ],\n      password: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(8)\n        ])\n      ],\n      remember_me: [\n        false\n      ]\n    });\n  }\n\n  ngOnInit() {\n    this.auth.isLoggedIn();\n  }\n\n  login() {\n    this.auth.login(this.loginForm.value).then(res => {\n      console.log(\"res\", res);\n      if (res['error'] == 0) {\n        this.session.store(\"token\", res['token']);\n        localStorage.setItem(\"user\", JSON.stringify(res['data']));\n        console.log('asdasdas', res['data']);\n        if (res['data']['user_role_id'] == 4) {\n          this.route.navigate([\"dashboard\"]);\n        } else {\n          this.route.navigate(['transactions-status', 1]);\n        }\n      } else {\n        this._snackBar.open(res['message'], null, {\n          verticalPosition: 'top',\n          horizontalPosition: 'end',\n          announcementMessage: res['message'],\n          duration: 3000\n        });\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this._snackBar.open(e, null, {\n        verticalPosition: 'top',\n        horizontalPosition: 'end',\n        announcementMessage: e,\n        duration: 3000\n      });\n    });\n  }\n  showPassword() {\n    this.show_password = !this.show_password;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class strrandom {\n\n    base64url(source) {\n        let string = JSON.stringify(source);\n        let b64url = btoa(string);\n        b64url = b64url.replace(/=+$/, '');\n        b64url = b64url.replace(/\\+/g, '-');\n        b64url = b64url.replace(/\\//g, '_');\n        return b64url;\n    }\n\n    public generateFileName(){\n        return this.fileNameGenerator(8)+'.png';\n    }\n    \n    protected fileNameGenerator(len){\n        let charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var randomString = '';\n        for (var i = 0; i < len; i++) {\n            var randomPoz = Math.floor(Math.random() * charSet.length);\n            randomString += charSet.substring(randomPoz,randomPoz+1);\n        }\n        return randomString;\n    }\n\n    validateNumber(event){\n        let key = window.event ? event.keyCode : event.which;\n        if (event.keyCode === 8 || event.keyCode === 46) {\n            return true;\n        } else if ( key < 48 || key > 57 ) {\n            return false;\n        } else {\n          return true;\n        }\n    }\n\n    checkUrl(url){\n        var S = \"http://   https://\";\n\n        if(url.includes(\"http://\") || url.includes(\"https://\")){\n            return true;\n        }else{\n            url = \"http://\"+url;\n            return false;\n        }\n    }\n\n    /* ================================= start of time convertion ================================= */\n    public convertTo24Hrs(time){\n\t\tlet hours = Number(time.match(/^(\\d+)/)[1]);\n\t\tlet minutes = Number(time.match(/:(\\d+)/)[1]);\n        let AMPM = time.match(/\\s(.*)$/)[1];\n\t\tif((AMPM == \"PM\" || AMPM == \"pm\") && hours<12) hours = hours+12;\n\t\tif((AMPM == \"AM\" || AMPM == \"am\") && hours==12) hours = hours-12;\n\t\tlet sHours = hours.toString();\n\t\tlet sMinutes = minutes.toString();\n\t\tif(hours<10) sHours = \"0\" + sHours;\n        if(minutes<10) sMinutes = \"0\" + sMinutes;\n\t\treturn sHours + \":\" + sMinutes;\n    }\n    \n    /* this will convert time into a minutes */\n    public converToMin(time){\n        let t: any = this.convertTo24Hrs(time);\n        t = t.split(':');\n\n        let h = parseInt(t[0]);\n        let m = parseInt(t[1]);\n\n        let totalMin = h * 60 + m;\n        return totalMin;\n    }\n    /* ================================= end of time convertion ================================= */\n}","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ImageCroppedEvent, ImageCropperComponent } from 'ngx-image-cropper';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { CustomerService } from './../../../../services/customer/customer.service';\nimport { strrandom } from 'src/app/lib/strrandom/strrandom';\n\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\n\n@Component({\n  selector: 'app-customer-create',\n  templateUrl: './customer-create.component.html',\n  styleUrls: ['./customer-create.component.scss']\n})\nexport class CustomerCreateComponent implements OnInit {\n\n  public userForm: FormGroup;\n  customer_type_options: any = [];\n\n  profilePhoto: any;\n\tcroppedprofilePhoto: any;\n\tisProfileImageLoaded:boolean = false;\n\tisProfilePhotoCropped: boolean = false;\n  profileUploadWrongFile: boolean = false;\n  uploadMaxLimitReached: boolean = false;\n\n  @ViewChild(ImageCropperComponent, {static: false}) imageCropper: ImageCropperComponent;\n\n  constructor(\n    private customerService: CustomerService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private location: Location,\n    protected strand: strrandom\n  ) {\n    this.userForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      role: [\n        3\n      ],\n      first_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      last_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      customer_type_id: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      number: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\"^[0-9]*$\"),\n          Validators.maxLength(10),\n          Validators.minLength(10)\n        ])\n      ],\n      email: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n          Validators.maxLength(50),\n          Validators.minLength(6)\n        ])\n      ],\n      location: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(60)\n        ])\n      ],\n      photo: []\n    });\n  }\n  ngOnInit() {\n    this.getCustomerTypes();\n  }\n  async getCustomerTypes() {\n    await this.customerService.getCustomerTypes().then(res => {\n      if (res['error'] == 0) {\n        this.customer_type_options = res['datas'];\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  openModal(item, action): void {\n    console.log(item);\n    console.log(action);\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        this.location.back();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  fileChange(event: any): void {\n    console.log('fileChange', event.target.files[0]);\n\t\tlet fileType = event.target.files[0].type;\n\n\t\tif(fileType.match('image.*')){\n      if (event.target.files[0].size > 1000000) {\n        this.uploadMaxLimitReached = true;\n      } else {\n        this.uploadMaxLimitReached = false;\n        this.isProfileImageLoaded = false;\n        this.isProfilePhotoCropped = false;\n        this.profileUploadWrongFile = false;\n        this.profilePhoto = event;\n      }\n\t\t} else {\n      this.uploadMaxLimitReached = false;\n\t\t\tthis.isProfileImageLoaded = true;\n\t\t\tthis.isProfilePhotoCropped = true;\n\t\t\tthis.profileUploadWrongFile = true;\n\t\t\tthis.profilePhoto = null;\n\t\t}\n\t}\n\timageProfilePhotoCropped(event: ImageCroppedEvent) {\n\t\tthis.croppedprofilePhoto = event.base64;\n    this.isProfilePhotoCropped =  true;\n    let fileOfBlob = new File([event.file], this.strand.generateFileName());\n    /* console.log('fileOfBlob', fileOfBlob); */\n    this.userForm.controls.photo.setValue(fileOfBlob);\n\t}\n\timageProfileLoaded() {\n\t\tthis.isProfileImageLoaded = true;\n\t}\n\tstartCrop(event: ImageCroppedEvent) {\n\t\tthis.imageCropper.crop();\n\t}\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'ID',\n        key: 'id',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Customer Name',\n        key: 'first_name',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Customer Profile',\n        key: 'customer_type',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mobile Number',\n        key: 'number',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Home Address',\n        key: 'location',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Date and Time Added',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","export const limitoptions: any = [\n    {\n        label: '10',\n        value: 10,\n    },\n    {\n        label: '25',\n        value: 25,\n    },\n    {\n        label: '50',\n        value: 50,\n    },\n    {\n        label: '100',\n        value: 100,\n    }\n];","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneralService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n  getActivity(page, house_id?, order_status?, mode_of_payment?, id?, date?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.general_activity) + '/page/' + page;\n        if ((page == 'daily_sorting_reports_listing' || page == 'daily_reports_listing') && house_id) {\n          url += '/house_id/' + house_id;\n        }\n        if (page == 'transactions_listing' && order_status) {\n          url += '/order_status/' + order_status;\n        }\n        if (page == 'transactions_listing' && mode_of_payment) {\n          url += '/mode_of_payment/' + mode_of_payment;\n        }\n        if ((page == 'sacks_view' || page == 'trays_view' || page == 'payment_attachment_listing') && id) {\n          url += '/id/' + id;\n        }\n        if (page == 'fresh_egg_inventory_view' && date) {\n          url += '/date/' + date;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/customer-listing/customer-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { CustomerService } from './../../../../services/customer/customer.service';\nimport { GeneralService } from './../../../../services/general/general.service';\n\n@Component({\n  selector: 'app-customer-listing',\n  templateUrl: './customer-listing.component.html',\n  styleUrls: ['./customer-listing.component.scss']\n})\nexport class CustomerListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  /* get parameters */\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  /* get parameters */\n  activity: any = [];\n  showtimeago: boolean = true;\n  constructor(\n    private customerService: CustomerService,\n    private generalService: GeneralService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.getList();\n    this.getActivity('customer_listing');\n  }\n  async getList() {\n    await this.customerService.getList(this.page, this.limit, this.order, this.search).then(res => {\n      console.log(\"res\", res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count']/* res['data']['total_number_of_customers'] */;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StaffService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) {\n\n  }\n  getList(page = 1, limit = 10, order?, role_id?, from?, to?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.staff_listing) + '/page/' + page + '/limit/' + limit;\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (role_id && role_id != 0) {\n          url += '/role_id/' + role_id;\n        }\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  viewRecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.staff_view) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getProfile(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.staff_profile) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  save(data) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.staff_update);\n        let request = this.http.post(url, data, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getRecord(dailyhouse_id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.staff_index) + '/dailyhouse_id/' + dailyhouse_id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ImageCroppedEvent, ImageCropperComponent } from 'ngx-image-cropper';\nimport { strrandom } from 'src/app/lib/strrandom/strrandom';\nimport { CustomerService } from './../../../../services/customer/customer.service';\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-customer-update',\n  templateUrl: './customer-update.component.html',\n  styleUrls: ['./customer-update.component.scss']\n})\nexport class CustomerUpdateComponent implements OnInit {\n\n  public userForm: FormGroup;\n  customer_type_options: any = [];\n\n  profilePhoto: any;\n\tcroppedprofilePhoto: any;\n\tisProfileImageLoaded:boolean = false;\n\tisProfilePhotoCropped: boolean = false;\n  profileUploadWrongFile: boolean = false;\n  uploadMaxLimitReached: boolean = false;\n\n  @ViewChild(ImageCropperComponent, {static: false}) imageCropper: ImageCropperComponent;\n\n  constructor(\n    public _route: ActivatedRoute,\n    private customerService: CustomerService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private location: Location,\n    private staffService: StaffService,\n    protected strand: strrandom,\n    protected authService: AuthService\n  ) {\n    this.userForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      role: [\n        3\n      ],\n      first_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      last_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      customer_type_id: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      number: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\"^[0-9]*$\"),\n          Validators.maxLength(10),\n          Validators.minLength(10)\n        ])\n      ],\n      email: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n          Validators.maxLength(50),\n          Validators.minLength(6)\n        ])\n      ],\n      password: [\n        ''\n      ],\n      location: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(60)\n        ])\n      ],\n      photo: []\n    });\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.getCustomerTypes();\n      this.getRecord(params['id']);\n    });\n  }\n  async getCustomerTypes() {\n    await this.customerService.getCustomerTypes().then(res => {\n      if (res['error'] == 0) {\n        this.customer_type_options = res['datas'];\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async getRecord(id) {\n    await this.staffService.getProfile(id).then(res => {\n      if (res['error'] == 0) {\n        if (res['data']['profile_picture']) {\n          this.profilePhoto = res['data']['profile_picture'];\n        }\n        this.userForm.controls.id.setValue(res['data']['id']);\n        this.userForm.controls.first_name.setValue(res['data']['profile_first_name']);\n        this.userForm.controls.last_name.setValue(res['data']['profile_last_name']);\n        this.userForm.controls.customer_type_id.setValue(res['data']['customer_type_id']);\n        this.userForm.controls.number.setValue(res['data']['contact_number']);\n        this.userForm.controls.email.setValue(res['data']['email']);\n        this.userForm.controls.location.setValue(res['data']['address_address']);\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  openModal(item, action): void {\n    console.log(item);\n    console.log(action);\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        this.location.back();\n        if (action == 'user_delete') {\n          this.location.back();\n        }\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  fileChange(event: any): void {\n    console.log(event);\n\t\tlet fileType = event.target.files[0].type;\n\n\t\tif(fileType.match('image.*')){\n\t\t\tif (event.target.files[0].size > 1000000) {\n        this.uploadMaxLimitReached = true;\n      } else {\n        this.uploadMaxLimitReached = false;\n        this.isProfileImageLoaded = false;\n        this.isProfilePhotoCropped = false;\n        this.profileUploadWrongFile = false;\n        this.profilePhoto = event;\n      }\n\t\t} else {\n\t\t\tthis.isProfileImageLoaded = true;\n\t\t\tthis.isProfilePhotoCropped = true;\n\t\t\tthis.profileUploadWrongFile = true;\n\t\t\tthis.profilePhoto = null;\n\t\t}\n\t}\n\n\timageProfilePhotoCropped(event: ImageCroppedEvent) {\n\t\tthis.croppedprofilePhoto = event.base64;\n    this.isProfilePhotoCropped =  true;\n    let fileOfBlob = new File([event.file], this.strand.generateFileName());\n    /* console.log('fileOfBlob', fileOfBlob); */\n    this.userForm.controls.photo.setValue(fileOfBlob);\n\t}\n\n\timageProfileLoaded() {\n\t\tthis.isProfileImageLoaded = true;\n\t}\n\n\tstartCrop(event: ImageCroppedEvent) {\n\t\tthis.imageCropper.crop();\n\t}\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n  generatePassword() {\n    console.log(this.userForm.value);\n    this.authService.generate(this.userForm.value).then(res => {\n      if (res['error'] == 0) {\n        this.userForm.controls.password.setValue(res['data']);\n        /* console.log('res', res); */\n      }\n    }).catch(e => {\n      console.log(e);\n    })\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Order no.',\n        key: 'transaction_id',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Date & Time Ordered',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Order Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Egg Sizes',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Quantity',\n        key: 'total_pieces',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Bill',\n        key: 'total_price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mode of Payment',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","export const orderstatus: any = [\n    {\n        label: 'Pending for Approval',\n        value: 1,\n    },\n    {\n        label: 'Processing',\n        value: 2,\n    },\n    {\n        label: 'Ready for Pick Up',\n        value: 3,\n    },\n    {\n        label: 'Completed',\n        value: 4,\n    }\n];","export const paymentstatus: any = [\n    {\n        label: 'Pending Payments',\n        value: '0'\n    },\n    {\n        label: 'Paid',\n        value: 1\n    }\n];\n\nexport const realpaymentstatus: any = [\n    {\n        label: 'Pending for Payment',\n        value: 0\n    },\n    {\n        label: 'Paid',\n        value: 1\n    }\n];","export const modeofpayment: any = [\n    {\n        label: 'Full Payment',\n        value: 1,\n    },\n    {\n        label: 'With Credit',\n        value: 2,\n    },\n    {\n        label: 'With Balance',\n        value: 3,\n    }\n];","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionsService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n  getList(page = 1, limit = 10, order?, user_id?, order_status?, payment_status?, mode_of_payment?, from?, to?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.transaction_listing) + '/page/' + page + '/limit/' + limit;\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (user_id) {\n          url += '/user_id/'+user_id;\n        }\n        if (order_status) {\n          url += '/order_status/'+order_status;\n        }\n        if (payment_status) {\n          url += '/payment_status/'+payment_status;\n        }\n        if (mode_of_payment) {\n          url += '/mode_of_payment/'+mode_of_payment;\n        }\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        if (search){\n          url += '?search=' + search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getRecord(order_id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.transaction_index) + '/order_id/' + order_id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { datatable } from './../../../../components/datatables/customer-view/customer-view';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { orderstatus } from './../../../../components/datatables/filter/order-status/order-status';\nimport { paymentstatus } from '../../../../components/datatables/filter/payment-status/payment-status';\nimport { modeofpayment } from './../../../../components/datatables/filter/mode-of-payment/mode-of-payment';\nimport { Location, DatePipe } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { TransactionsService } from './../../../../services/transactions/transactions.service';\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { OrdersService } from './../../../../services/orders/orders.service';\n\n@Component({\n  selector: 'app-customer-view',\n  templateUrl: './customer-view.component.html',\n  styleUrls: ['./customer-view.component.scss']\n})\nexport class CustomerViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n  \n  visible_columns: any = [];\n\n  order_status_options: any = orderstatus;\n  payment_status_options: any = paymentstatus;\n  mode_of_payment_options: any = modeofpayment;\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'transaction_id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  order_status: number = 0;\n  payment_status: number = 0;\n  mode_of_payment: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  user_profile: any = [];\n\n  collectibles: any = [];\n\n  show_password: boolean = false;\n  constructor(\n    private datePipe: DatePipe,\n    private staffService: StaffService,\n    private location: Location,\n    public _route: ActivatedRoute,\n    private ordersService: OrdersService,\n    private transactions: TransactionsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.getRecord(params['id']);\n      this.getCollectibles(params['id']);\n    });\n  }\n  async getRecord(id) {\n    await this.staffService.getProfile(id).then(res => {\n      if (res['error'] == 0) {\n        this.user_profile = res['data'];\n        this.getOrders();\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getCollectibles(user_id) {\n    await this.ordersService.getCollectibles(user_id).then(res => {\n      if (res['error'] == 0) {\n        this.collectibles = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getOrders() {\n    await this.transactions.getList(this.page, this.limit, this.order, this.user_profile.id, this.order_status, this.payment_status, this.mode_of_payment, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getOrders();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getOrders();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getOrders();\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getOrders();\n    }\n  }\n  async changePaymentStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getOrders();\n  }\n  async changeOrderStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getOrders();\n  }\n  async changeModeOfPayment(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getOrders();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getOrders();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    this.payment_status = null;\n    this.order_status = null;\n    this.mode_of_payment = null;\n\n    await this.getOrders();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  goBack() {\n    this.location.back();\n  }\n  showPassword() {\n    this.show_password = !this.show_password;\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Date and Time',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Age',\n        key: 'age_week',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mortality',\n        key: 'mortality',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mortality Rate %',\n        key: 'mortality',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Cull',\n        key: 'cull',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'End Bird Population',\n        key: 'bird_count',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Egg Count',\n        key: 'real_egg_count',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Production Rate %',\n        key: 'feed_consumption',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of bags',\n        key: 'feed_consumption',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Feed Consumption',\n        key: 'feed_consumption',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Medicine Intake',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Report Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","export const reportstatus: any = [\n    {\n        label: 'Daily report for approval',\n        value: 1,\n    },\n    {\n        label: 'Approved daily report',\n        value: 2,\n    },\n    {\n        label: 'For sorting',\n        value: 3,\n    }/* ,\n    {\n        label: 'Received on warehouse',\n        value: 4,\n    } */,\n    {\n        label: 'Sorted report for approval',\n        value: 4,\n    },\n    {\n        label: 'Approved sorted report',\n        value: 5,\n    },\n    {\n        label: 'Received on warehouse',\n        value: 6,\n    }\n];","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DailyReportsService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) {\n\n  }\n  getList(page = 1, limit = 10, type?, flockman_id?, from?, to?, order?, search?) {\n    console.log(order);\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.daily_listing) + '/page/' + page + '/limit/' + limit;\n        if (type && type != 0) {\n          url += '/type/'+type;\n        }\n        if (flockman_id && flockman_id != 0) {\n          url += '/flockman_id/'+flockman_id;\n        }\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getRecord(page = 1, limit = 10, house_id?, type?, from?, to?, order?, search?) {\n    console.log('type', type);\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.daily_index) + '/page/'+page+'/limit/'+limit+'/house_id/' + house_id;\n        if (type && type != 0) {\n          url += '/type/'+type;\n        }\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getSortingRecord(house_harvest_id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.daily_sorting_index) + '/house_harvest_id/'+house_harvest_id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/daily-reports-house-listing/daily-reports-house-listing';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DailyReportsService } from './../../../../services/daily-reports/daily-reports.service';\nimport { DatePipe } from '@angular/common';\n\nexport interface DialogData {\n  page: number;\n  limit: number;\n  from: any,\n  to: any,\n  visible_columns: any,\n  ths: any,\n  type: any,\n  order: any,\n  search: any,\n  houseId: number\n};\n\n@Component({\n  selector: 'app-report-daily-house',\n  templateUrl: './report-daily-house.component.html',\n  styleUrls: ['./report-daily-house.component.scss']\n})\nexport class ReportDailyHouseComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  item: any = [];\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  staff_items: any = [];\n  flockmanId: number = 0;\n  type: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  houseId: number;\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'A4',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      showall: true,\n      pdfCallbackFn: this.pdfCallbackFn\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n  all: boolean = true;\n  constructor(\n    public dialogRef: MatDialogRef<ReportDailyHouseComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private dailyReportsService: DailyReportsService,\n    private exportAsService: ExportAsService,\n    private datePipe: DatePipe\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.type = this.data.type;\n    this.order = this.data.order;\n    this.search = this.data.search;\n    this.houseId = this.data.houseId;\n    this.getList();\n  }\n  async getList() {\n    await this.dailyReportsService.getRecord(this.page, this.limit, this.houseId, this.type, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.item = res['data'];\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Daily-House-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    /* pdf.showall */\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.setFontSize(12);\n      pdf.text(i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 25, pdf.internal.pageSize.getHeight() - 10);\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { datatable } from './../../../../components/datatables/daily-reports-house-listing/daily-reports-house-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { reportstatus } from './../../../../components/datatables/filter/report-status/report-status';\nimport { DailyReportsService } from './../../../../services/daily-reports/daily-reports.service';\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportDailyHouseComponent } from './../../../../components/modals/reports/report-daily-house/report-daily-house.component';\nimport { AuthService } from './../../../../services/auth/auth.service';\nimport { ExportToCsv } from 'export-to-csv';\n\n@Component({\n  selector: 'app-daily-reports-house-listing',\n  templateUrl: './daily-reports-house-listing.component.html',\n  styleUrls: ['./daily-reports-house-listing.component.scss']\n})\nexport class DailyReportsHouseListingComponent implements OnInit {\n  \n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  report_status_options: any = reportstatus;\n\n  items: any = [];\n  item: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  staff_items: any = [];\n  type: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  houseId: number;\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  max_date: any = new Date();\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    public _route: ActivatedRoute,\n    private dialog: MatDialog,\n    private dailyReportsService: DailyReportsService,\n    private generalService: GeneralService,\n    private staffService: StaffService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this._route.params.subscribe(params => {\n      console.log(params);\n      this.houseId = params['id'];\n      this.clearFilters();\n      this.getActivity('daily_reports_listing', this.houseId);\n    });\n  }\n  async getList() {\n    await this.dailyReportsService.getRecord(this.page, this.limit, this.houseId, this.type, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        this.item = res['data'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async changeReportStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.type = 0;\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page, house_id) {\n    await this.generalService.getActivity(page, house_id).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportDailyHouseComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        visible_columns: this.visible_columns,\n        ths: this.ths,\n        type: this.type,\n        houseId: this.houseId,\n        order: this.order,\n        search: this.search,\n        all: false\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n\n    await this.dailyReportsService.getRecord(1, this.totalItems, this.houseId, this.type, this.from, this.to, this.order, this.search).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n\n          let med_intake: any = [];\n\n          if (data.medicine_name) {\n            data.medicine_name.forEach(med => {\n              med_intake.push(med.medicine);\n            });\n          }\n\n          med_intake = med_intake.join(', ');\n\n          datas.push({\n            'Date and Time': this.datePipe.transform(new Date(data.prepared_by_date), 'yyyy-MM-dd'),\n            'Age': data.age,\n            'Mortality': data.mortality,\n            'Mortality Rate %': data.mortality_rate,\n            'Cull': data.cull,\n            'End Bird Population': data.bird_count,\n            'Total Egg Count': data.real_egg_count,\n            'Production Rate %': data.production_rate,\n            'No. of Bags': data.feeds.bags,\n            'Feed Consumption': data.feeds.string,\n            'Medicine Intake': med_intake,\n            'Report Status':  data.sortingRecordstatus ? data.sortingRecordstatus : data.recordStatus,\n            'Flockman': data.flockman\n          });\n        });\n        \n        const options = { \n          fieldSeparator: ',',\n          quoteStrings: '\"',\n          decimalSeparator: '.',\n          showLabels: true, \n          showTitle: true,\n          title:  'Report-Daily-House-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n          useTextFile: false,\n          useBom: true,\n          useKeysAsHeaders: true,\n          filename: 'Report-Daily-House-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n        };\n        const csvExporter = new ExportToCsv(options);\n        csvExporter.generateCsv(datas);\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    })\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Date and Time',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'House/Building no.',\n        key: 'house_name',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Age',\n        key: 'age_week',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mortality',\n        key: 'mortality',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mortality Rate %',\n        key: 'mortality',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Cull',\n        key: 'cull',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'End Bird Population',\n        key: 'bird_count',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Egg Count',\n        key: 'real_egg_count',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Production Rate %',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of bags',\n        key: 'feed_consumption',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Feed Consumption',\n        key: 'feed_consumption',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Medicine Intake',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Report Status',\n        key: 'recordStatus',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Flockman',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/daily-reports-listing/daily-reports-listing';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DailyReportsService } from './../../../../services/daily-reports/daily-reports.service';\nimport { DatePipe } from '@angular/common';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  visible_columns: any,\n  ths: any,\n  type: any,\n  flockmanId: any,\n  order: any,\n  search: any,\n};\n@Component({\n  selector: 'app-report-daily',\n  templateUrl: './report-daily.component.html',\n  styleUrls: ['./report-daily.component.scss']\n})\nexport class ReportDailyComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  staff_items: any = [];\n  flockmanId: number = 0;\n  type: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'A4',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      showall: true,\n      pdfCallbackFn: this.pdfCallbackFn\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n  all: boolean = true;\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportDailyComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private dailyReportsService: DailyReportsService,\n    private exportAsService: ExportAsService,\n    private datePipe: DatePipe\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.type = this.data.type;\n    this.flockmanId = this.data.flockmanId;\n    this.order = this.data.order;\n    this.search = this.data.search;\n    this.getList();\n  }\n  async getList() {\n    await this.dailyReportsService.getList(this.page, this.limit, this.type, this.flockmanId, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Daily-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    /* pdf.showall */\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.setFontSize(12);\n      pdf.text(i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 25, pdf.internal.pageSize.getHeight() - 10);\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { datatable } from './../../../../components/datatables/daily-reports-listing/daily-reports-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { reportstatus } from './../../../../components/datatables/filter/report-status/report-status';\nimport { DailyReportsService } from './../../../../services/daily-reports/daily-reports.service';\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportDailyComponent } from './../../../../components/modals/reports/report-daily/report-daily.component';\nimport { AuthService } from './../../../../services/auth/auth.service';\nimport { ExportToCsv } from 'export-to-csv';\n\n@Component({\n  selector: 'app-daily-reports-listing',\n  templateUrl: './daily-reports-listing.component.html',\n  styleUrls: ['./daily-reports-listing.component.scss']\n})\nexport class DailyReportsListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  report_status_options: any = reportstatus;\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  staff_items: any = [];\n  flockmanId: number = 0;\n  type: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  report_status: number;\n  show_filter: boolean = false;\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n  \n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private dialog: MatDialog,\n    public _route: ActivatedRoute,\n    private dailyReportsService: DailyReportsService,\n    private generalService: GeneralService,\n    private staffService: StaffService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getList();\n    this.getStaffList();\n    this.getActivity('daily_reports_listing');\n  }\n  async getList() {\n    await this.dailyReportsService.getList(this.page, this.limit, this.type, this.flockmanId, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async getStaffList() {\n    this.staffService.getList(1, 10, null, 8).then(res => {\n      console.log(\"getStaffListing\", res);\n      if (res['error'] == 0) {\n        this.staff_items = res['datas'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    })\n  }\n  async changeFlockman(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeReportStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.flockmanId = 0;\n    this.type = 0;\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportDailyComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        visible_columns: this.visible_columns,\n        ths: this.ths,\n        type: this.type,\n        flockmanId: this.flockmanId,\n        order: this.order,\n        search: this.search,\n        all: true\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n\n    await this.dailyReportsService.getList(1, this.totalItems, this.type, this.flockmanId, this.from, this.to, this.order, this.search).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n\n          let med_intake: any = [];\n\n          if (data.medicine_name) {\n            data.medicine_name.forEach(med => {\n              med_intake.push(med.medicine);\n            });\n          }\n\n          med_intake = med_intake.join(', ');\n\n          datas.push({\n            'Date and Time': this.datePipe.transform(new Date(data.prepared_by_date), 'yyyy-MM-dd'),\n            'House/Building no.': data.house_name.house_name,\n            'Age': data.age,\n            'Mortality': data.mortality,\n            'Mortality Rate %': data.mortality_rate,\n            'Cull': data.cull,\n            'End Bird Population': data.bird_count,\n            'Total Egg Count': data.real_egg_count,\n            'Production Rate %': data.production_rate,\n            'No. of bags': data.feeds.bags,\n            'Feed Consumption': data.feeds.string,\n            'Medicine Intake': med_intake,\n            'Report Status':  data.sortingRecordstatus ? data.sortingRecordstatus : data.recordStatus,\n            'Flockman': data.flockman\n          });\n        });\n        \n        const options = { \n          fieldSeparator: ',',\n          quoteStrings: '\"',\n          decimalSeparator: '.',\n          showLabels: true, \n          showTitle: true,\n          title:  'Report-Daily-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n          useTextFile: false,\n          useBom: true,\n          useKeysAsHeaders: true,\n          filename: 'Report-Daily-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n        };\n        const csvExporter = new ExportToCsv(options);\n        csvExporter.generateCsv(datas);\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    })\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  daily_report: any,\n  sorting_report: any\n};\n\n@Component({\n  selector: 'app-report-daily-view',\n  templateUrl: './report-daily-view.component.html',\n  styleUrls: ['./report-daily-view.component.scss']\n})\nexport class ReportDailyViewComponent implements OnInit {\n\n  item: any = [];\n  sorting_item: any = [];\n  user_profile: any = [];\n  date_today: any = new Date();\n  isLoaded: boolean = false;\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'portrait',\n        format: 'legal',\n      },\n      html2canvas:  {\n        scale: 2\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      image: {\n        type: 'jpeg',\n        quality: 0.95\n      }\n    }\n  };\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportDailyViewComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private exportAsService: ExportAsService,\n    public _route: ActivatedRoute,\n    private datePipe: DatePipe,\n  ) { }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.item = this.data.daily_report;\n    this.sorting_item = this.data.sorting_report;\n    this.isLoaded = true;\n    console.log(\"this.item\", this.item);\n    console.log(\"this.sorting_item\", this.sorting_item);\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Daily-View-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Location, DatePipe } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { DailyReportsService } from './../../../../services/daily-reports/daily-reports.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ExportToCsv } from 'export-to-csv';\nimport { ReportDailyViewComponent } from './../../../../components/modals/reports/report-daily-view/report-daily-view.component';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-daily-reports-view',\n  templateUrl: './daily-reports-view.component.html',\n  styleUrls: ['./daily-reports-view.component.scss']\n})\nexport class DailyReportsViewComponent implements OnInit {\n\n  item: any = [];\n  \n  sorting_item: any = [];\n\n  /* timeline = [\n    {statuslabel: \"Order Placed\", status: 2, created_at: \"2019-12-04 14:30:06\"},\n    {statuslabel: \"Order Approved\", status: 1, created_at: \"2019-12-06 14:14:50\"},\n    {statuslabel: \"Order has been processed\", status: 0, created_at: null},\n    {statuslabel: \"Ready For Pick Up\", status: 0, created_at: null},\n    {statuslabel: \"Order Released\", status: 0, created_at: null}\n  ] */\n  isLoaded: boolean = false;\n  selectedIndex: number = 0;\n  printabledata: any = [];\n  constructor(\n    private auth: AuthService,\n    private dailyReportsService: DailyReportsService,\n    private location: Location,\n    public _route: ActivatedRoute,\n    private staffService: StaffService,\n    private datePipe: DatePipe,\n    private dialog: MatDialog,\n  ) { }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this._route.params.subscribe(params => {\n      this.getRecord(params['id']);\n      this.getSortingRecord(params['id']);\n    });\n  }\n  async getRecord(dailyhouse_id) {\n    await this.staffService.getRecord(dailyhouse_id).then(res => {\n      console.log(\"getRecord\", res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.item = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  async getSortingRecord(house_harvest_id) {\n    await this.dailyReportsService.getSortingRecord(house_harvest_id).then(res => {\n      if (res['error'] == 0) {\n        this.sorting_item = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  goBack() {\n    this.location.back();\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportDailyViewComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        daily_report: this.item,\n        sorting_report: this.sorting_item\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n    let meds = [];\n    this.item.medicine.forEach(med => {\n      meds.push(med.medicine);\n    });\n\n    this.printabledata = {\n      'Harvested By': this.item.name,\n      'House/Building no.': this.item.house.house_name,\n      'Report Date': this.datePipe.transform(new Date(this.sorting_item.prepared_by_date), 'yyyy-MM-dd'),\n      'Report Time': this.datePipe.transform(new Date(this.sorting_item.prepared_by_date), 'hh:mm aaa'),\n      'Bird Count': this.item.bird_count,\n      'Age': this.item.age,\n      'Mortality': this.item.mortality,\n      'Cull': this.item.cull,\n      'End Bird Population': this.item.bird_count,\n      'No. of Sacks': this.item.feeds.bags,\n      'Feed Consumption': this.item.feeds.string,\n      'Medicine Intake': meds.join(','),\n      'Egg Count': this.item.egg_count,\n      'Validated Egg Count': this.item.real_egg_count,\n      'Prepared By': this.item.name,\n      'Checked By': this.item.checked_by_name,\n      'Received by': this.item.received_by_name,\n      'Sorted By': this.sorting_item ? this.sorting_item.prepared_by_name : '',\n      'Sorted Date': this.sorting_item ? this.datePipe.transform(new Date(this.sorting_item.prepared_by_date), 'yyyy-MM-dd') : '',\n      'Sorted Time': this.sorting_item ? this.datePipe.transform(new Date(this.sorting_item.prepared_by_date), 'hh:mm aaa') : '',\n      'Sorted Checked By': this.sorting_item ? this.sorting_item.checked_by_name : '',\n      'Sorted Received By': this.sorting_item ? this.sorting_item.received_by_name : ''\n    };\n    datas.push(this.printabledata);\n    const options = { \n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalSeparator: '.',\n      showLabels: true, \n      showTitle: true,\n      title:  'Daily-Report-View-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true,\n      filename: 'Daily-Report-View-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n    };\n    const csvExporter = new ExportToCsv(options);\n    csvExporter.generateCsv(datas);\n      \n  }\n  async tabChanged(e) {\n    console.log(this.selectedIndex);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) {\n\n  }\n  getDashboard(type) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.web_dashboard);\n        if (type) {\n          url += '/type/' + type;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getFeedConsumption(type) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.feed_consumption);\n        if (type) {\n          url += '/type/' + type;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getMedicineConsumption(type) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.med_consumption);\n        if (type) {\n          url += '/type/' + type;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getHarvestStatus(type) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.harvest_status);\n        if (type) {\n          url += '/type/' + type;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getHarvestRate(type) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.harvest_rate);\n        if (type) {\n          url += '/type/' + type;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getRecentTransactions(type) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.recent_transactions);\n        if (type) {\n          url += '/type/' + type;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getActivityLog() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.activity_log);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getStaffActivities(page = 1, limit = 10, user_id?, from?, to?, code?, order?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.staff_activities) + '/page/' + page + '/limit/' + limit;\n        if(user_id){\n          url += '/user_id/' + user_id;\n        }\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        if(code){\n          url += '/code/' + code;\n        }\n        if (order) {\n          url += '/order_by_column/' + order['order_by_column'] + '/order_by/' + order['order_by'];\n        }\n        if (search) {\n          url += '?search=' + search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getCode(user_role_id?){\n    let code: any = [];\n    return new Promise(resolve => {\n      console.log('userID', user_role_id);\n\n        if (user_role_id == 4) {\n          code = [\n            {\n              label: 'Approved Payment',\n              value: 'payment_approved',\n            },\n            {\n              label: 'Approved Order',\n              value: 'order_approved',\n            },\n            {\n              label: 'Declined Order',\n              value: 'order_decline',\n            },\n            {\n              label: 'Released Order',\n              value: 'order_forrelease',\n            }\n          ];\n        }else if(user_role_id==5){\n          code = [\n            {\n              label: 'Approved Payment',\n              value: 'payment_approved',\n            },\n            {\n              label: 'Approved Order',\n              value: 'order_approved',\n            },\n            {\n              label: 'Declined Order',\n              value: 'order_decline',\n            },\n            {\n              label: 'Pickup Order',\n              value: 'order_pickup',\n            },\n            {\n              label: 'Released Order',\n              value: 'order_forrelease',\n            }\n          ];\n        }else if(user_role_id==6){\n          code = [\n            {\n              label: 'Received Daily House Report',\n              value: 'daily_house_report_receive',\n            },\n            {\n              label: 'Received Daily Sorting Report',\n              value: 'daily_sorting_report_receive',\n            },\n            {\n              label: 'Approved Daily House Report',\n              value: 'daily_house_report_approve',\n            },\n            {\n              label: 'Approved Daily Sorting Report',\n              value: 'daily_sorting_report_approve'\n            },\n            {\n              label: 'Sent Daily House Incident Report',\n              value: 'incident_report_sentyou_dhr',\n            },\n            {\n              label: 'Sent Daily Sorting Incident Report',\n              value: 'incident_report_sentyou_dsr',\n            },\n            {\n              label: 'Approved Daily Harvest Incident Report',\n              value: 'incident_report_approve_dhreport',\n            },\n            {\n              label: 'Approved Daily Sorting Incident Report',\n              value: 'incident_report_approve_sortedreport',\n            }\n          ];\n        }else if(user_role_id==7){\n          code = [\n            {\n              label: 'Released Order',\n              value: 'order_forrelease',\n            }\n          ];\n        } else if (user_role_id == 8) {\n          code = [\n            {\n              label: 'Submit Daily House Report',\n              value: 'daily_house_report_submit'\n            },\n            {\n              label: 'Submit Daily House Incident Report',\n              value: 'incident_report_submit_flockman'\n            }, \n            {\n              label: 'File Daily Harvest Incident Report',\n              value: 'incident_report_mustfile_dhr',\n            }\n          ];\n        } else if (user_role_id == 9) {\n          code = [\n            {\n              label: 'Submit Daily Sorting Report',\n              value: 'daily_sorting_report_submit'\n            },\n            {\n              label: 'Submit Daily Sorting Incident Report',\n              value: 'incident_report_submit_sorter'\n            },\n            {\n              label: 'File Daily Sorting Incident Report',\n              value: 'incident_report_mustfile_dsr',\n            }\n          ];\n        } else if (user_role_id == 10) {\n          code = [\n            {\n              label: 'Pickup Order',\n              value: 'order_pickup',\n            }, \n            {\n              label: 'Submitted Sack Report',\n              value: 'sack_report_submit',\n            },\n            {\n              label: 'Submitted Tray Report',\n              value: 'tray_report_submit',\n            },\n            {\n              label: 'Received Daily Sorting Report',\n              value: 'daily_sorting_report_receive',\n            }\n          ];\n        }\n        if(code.length>0){\n          resolve({ error: 0, datas: code });\n        }else{\n          resolve({ error: 1, message: 'error' });\n        }\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { DashboardService } from './../../../services/dashboard/dashboard.service';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from \"@angular/router\";\nimport { AuthService } from './../../../services/auth/auth.service';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  \n  /* pie : start */\n  public pieChartOptions: ChartOptions = {\n    responsive: true,\n    legend: {\n      position: 'left',\n      labels: {\n        fontSize: 16,\n        fontColor: '#1E2631',\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: function(item, data) {\n          let datasetIndex = item.datasetIndex;\n          let lbl = data.labels[datasetIndex];\n          return lbl.toString();\n        },\n        footer: function(item, data) {\n          console.log(\"item\", item);\n          console.log(\"data\", data);\n          let index = item[0].index;\n          let value = Number(data.datasets[0].data[index]);\n          const label = value.toFixed(2) + ' %';\n          return value == 0 ? '' : 'Production Rate: ' + label;\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          const label = value.toFixed(2) + ' %';\n          return value == 0 ? '' : label;\n        },\n      },\n    },\n  };\n  public pieChartLabels: Label[] = [];\n  public pieChartData: number[] = [];\n  public pieChartType: ChartType = 'pie';\n  public pieChartLegend = true;\n  public pieChartPlugins = [pluginDataLabels];\n  piechartvalues: any = [];\n  /* pie : end */\n\n  /* bar : start */\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 1,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'No. of consumed (g)',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n          min: 0,\n          callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function(item, data) {\n          /* console.log(\"item\", item);\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            let parts = item.value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Consumed: \" + parts.join(\".\");\n          } */\n          return \"House/Building no. \" + item.label;\n        },\n        footer: function(item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Consumed: \" + parts.join(\".\") + ' g';\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#FFF',\n        formatter: (value, ctx) => {\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix;\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = false;\n  public barChartPlugins = [pluginDataLabels];\n\n  public barChartData: ChartDataSets[] = [];\n  barchartvalues: any = [];\n  /* bar : end */\n\n  dateToday: Date = new Date();\n  type: number = 0;\n  dashboard_data: any = null;\n  feed_consumption_data: any = null;\n  medicine_consumption_data: any = null;\n  harvest_production_status_data: any = null;\n  harvest_rate_data: any = null;\n  recent_transactions_data: any = null;\n  staff_activities_data: any = null;\n\n  masonryItems = [\n    {\n      title: 'Feed Consumption',\n      key: 'feed_consumption',\n      url: '/performance-report/consumption/feeds'\n    },\n    {\n      title: 'Medicine Consumption',\n      key: 'medicine_consumption',\n      url: '/performance-report/consumption/medicine'\n    },\n    {\n      title: 'Harvest Production Status',\n      key: 'harvest_production_status',\n      url: '/daily-reports'\n    },\n    {\n      title: 'Harvest Production Rate per houses',\n      key: 'harvest_production_rate',\n      url: null\n    },\n    {\n      title: 'Recent Transactions',\n      key: 'recent_transactions',\n      url: '/transactions'\n    },\n    {\n      title: 'Recent Staff Activities',\n      key: 'recent_staff_activities',\n      url: null\n    }\n  ];\n  userProfile: any = [];\n  constructor(\n    private auth: AuthService,\n    private dashboardService: DashboardService,\n  ) {\n\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getDashboard();\n    this.getFeedConsumption();\n    this.getHarvestRate();\n    this.getHarvestStatus();\n    this.getMedicineConsumption();\n    this.getRecentTransactions();\n    this.getStaffActivities();\n  }\n  async changeType() {\n    this.type = this.type == 1 ? 0 : 1;\n    await this.ngOnInit();\n  }\n  async getDashboard() {\n    await this.dashboardService.getDashboard(this.type).then(res => {\n      console.log(\"getDashboard\", res);\n      if (res['error'] == 0) {\n        this.dashboard_data = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getFeedConsumption() {\n    this.barChartLabels = [];\n    this.barChartData = [];\n    this.barchartvalues = [];\n    await this.dashboardService.getFeedConsumption(this.type).then(res => {\n      console.log(\"getFeedConsumption\", res);\n      if (res['error'] == 0) {\n        this.feed_consumption_data = res['data'];\n        res['data'].forEach(data => {\n          this.barChartLabels.push(data.house_name);\n          this.barchartvalues.push(data.consumed_feeds);\n        });\n        this.barChartData = [\n          {\n            data: this.barchartvalues,\n            label: 'Consumed',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      } else {\n        this.barChartData = [\n          {\n            data: this.barchartvalues,\n            label: 'Consumed',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.barChartData = [\n        {\n          data: this.barchartvalues,\n          label: 'Consumed',\n          backgroundColor: '#FF9F1A',\n          hoverBackgroundColor: '#FFB247',\n        }\n      ];\n    });\n  }\n  async getMedicineConsumption() {\n    await this.dashboardService.getMedicineConsumption(this.type).then(res => {\n      console.log(\"getMedicineConsumption\", res);\n      if (res['error'] == 0) {\n        this.medicine_consumption_data = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getHarvestStatus() {\n    await this.dashboardService.getHarvestStatus(this.type).then(res => {\n      console.log(\"getHarvestStatus\", res);\n      if (res['error'] == 0) {\n        this.harvest_production_status_data = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getHarvestRate() {\n    this.piechartvalues = [];\n    this.pieChartLabels = [];\n    this.pieChartData = [];\n    await this.dashboardService.getHarvestRate(this.type).then(res => {\n      console.log(\"getHarvestRate\", res);\n      if (res['error'] == 0) {\n        this.harvest_rate_data = res['data'];\n        this.harvest_rate_data.forEach(data => {\n          this.pieChartLabels.push('House/Building no. ' + data.house_name);\n          if (data.production_rate == 0) {\n            this.piechartvalues.push(0);\n          } else {\n            this.piechartvalues.push(Number(data.production_rate));\n          }\n        });\n        this.pieChartData = this.piechartvalues;\n      } else {\n        this.pieChartData = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.pieChartData = [];\n    });\n  }\n  async getRecentTransactions() {\n    await this.dashboardService.getRecentTransactions(this.type).then(res => {\n      console.log(\"getRecentTransactions\", res);\n      if (res['error'] == 0) {\n        this.recent_transactions_data = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getStaffActivities() {\n    await this.dashboardService.getActivityLog().then(res => {\n      console.log(\"getActivityLog\", res);\n      if (res['error'] == 0) {\n        this.staff_activities_data = res['data'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  abbreviateNumber(number) {\n    var SI_POSTFIXES = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n    var tier = Math.log10(Math.abs(number)) / 3 | 0;\n    if(tier == 0) return number;\n    var postfix = SI_POSTFIXES[tier];\n    var scale = Math.pow(10, tier * 3);\n    var scaled = number / scale;\n    var formatted = scaled.toFixed(1) + '';\n    if (/\\.0$/.test(formatted))\n      formatted = formatted.substr(0, formatted.length - 2);\n    return formatted + postfix;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { HouseService } from './../../../../services/house/house.service';\nimport { FeedsMedicineConsumptionService } from './../../../../services/feeds-medicine-consumption/feeds-medicine-consumption.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-feeds-medicine-consumption-create',\n  templateUrl: './feeds-medicine-consumption-create.component.html',\n  styleUrls: ['./feeds-medicine-consumption-create.component.scss']\n})\nexport class FeedsMedicineConsumptionCreateComponent implements OnInit {\n\n  monthdatetoday: any = new Date();\n\n  public medicineConsumptionForm: FormGroup;\n\n  house_options: any = [];\n\n  isLoaded: boolean = false;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit_disabled: number = 0;\n  feeds_and_medicine: any = [];\n  house_data: any;\n  house_id: any;\n  medicines: any = [];\n  checkedMedicine: any = [];\n  medicine: any = [/* {\n    day: this.datePipe.transform(new Date(this.monthdatetoday), 'dd'),\n    med: []\n  } */];\n  days: any = [/* {\n    day: this.monthdatetoday\n  } */];\n  med: any = [];\n  medic: any = [];\n  house_details: any;\n  disable_main_input: boolean = true;\n  daily_house_harvest_id: any;\n  house_record: any;\n  date_increment: any = new Date();\n  date_today: any = new Date();\n  feed_options: any = [];\n  feed: any = [];\n\n  constructor(\n    private auth: AuthService,\n    private formBuilder: FormBuilder,\n    private houseService: HouseService,\n    private location: Location,\n    private feedsandmedicineConsumption: FeedsMedicineConsumptionService,\n    private datePipe: DatePipe,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    public _route: ActivatedRoute\n  ) {\n    this.medicineConsumptionForm = this.formBuilder.group({\n      house_id: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      bird_count: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0)\n        ])\n      ],\n      age_week: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(1)\n        ])\n      ],\n      age_day: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(1)\n        ])\n      ]\n    });\n  }\n  loopDates() {\n    /* this.medicines = []; */\n    this.days = [];\n    this.medicine = [];\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    let from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    let to = this.datePipe.transform(new Date(year, month + 1, 0), 'yyyy-MM-dd');\n    let loop = new Date(from);\n    while (loop <= new Date(to)) {\n      /* this.addDay(); */\n      let medics = [];\n      this.medicines.forEach(data => {\n        medics.push({\n          med_id: data.id,\n          value: 0\n        });\n      });\n      this.days.push({\n        day: new Date(loop)\n      });\n      this.medicine.push({\n        day: this.datePipe.transform(new Date(loop), 'yyyy-MM-dd'),\n        med: medics,\n        feed: {\n          feed_id: null,\n          feed_consumption: null\n        }\n      });\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n  }\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getHouseList();\n    this.getAllmedicines();\n    this.getAllFeeds();\n    this._route.params.subscribe(params => {\n      if (params['id']) {\n        this.daily_house_harvest_id = params['id'];\n        this.getDailyhouserecord();\n      }\n    });\n  }\n  async getHouseList() {\n    await this.houseService.getAllList().then(res => {\n      if (res['error'] == 0) {\n        this.house_options = res['datas'];\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  goBack() {\n    this.location.back();\n  }\n  async getFeedsandmedicineconsumption() {\n    await this.loopDates();\n    await this.feedsandmedicineConsumption.getList(this.order, this.house_id).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        if (res['data']) {\n          this.house_data = res['data'];\n          this.house_data.forEach((data, index) => {\n            this.house_details = data;\n            let tindex = this.medicine.findIndex(x => x.day == this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd'));\n\n            if (data.medicine_ids) {\n              let medicine_ids: any = data.medicine_ids.split(',');\n              let medicine_values: any = data.medicine_values.split(',');\n              \n              medicine_ids.forEach((med, i) => {\n                let mindex = this.medicines.findIndex(x => x.id == med);\n                this.medicine[tindex].med[mindex].med_id = med;\n                this.medicine[tindex].med[mindex].value = medicine_values[i];\n              });\n            }\n\n            this.medicine[tindex].feed.feed_id = data.feed_id;\n            this.medicine[tindex].feed.feed_consumption = Number(data.feed_consumption);\n          });\n          this.disable_main_input = true;\n          this.medicineConsumptionForm.controls.bird_count.setValue(res['house_details'].current_age_of_chicken.bird_count/* this.house_details.bird_count */);\n          this.medicineConsumptionForm.controls.age_week.setValue(res['house_details'].current_age_of_chicken.age_week/* this.house_details.age_week */);\n          this.medicineConsumptionForm.controls.age_day.setValue(res['house_details'].current_age_of_chicken.age_day/* this.house_details.age_day */);\n        } else {\n          this.disable_main_input = false;\n          this.medicineConsumptionForm.controls.bird_count.setValue(res['house_details'].beginning_population);\n          this.medicineConsumptionForm.controls.age_week.setValue(1);\n          this.medicineConsumptionForm.controls.age_day.setValue(0);\n        }\n      } else {\n        this.house_data = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  async getDailyhouserecord() {\n    await this.feedsandmedicineConsumption.getHouserecord(this.daily_house_harvest_id).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.house_record = res['data'];\n        this.medicineConsumptionForm.controls.house_id.setValue(this.house_record.house_id);\n        this.medicineConsumptionForm.controls.bird_count.setValue(this.house_record.bird_count);\n        this.medicineConsumptionForm.controls.age_week.setValue(this.house_record.age_week);\n        this.medicineConsumptionForm.controls.age_day.setValue(this.house_record.age_day);\n        this.house_id = this.house_record.house_id;\n      } else {\n        this.house_record = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  async getHousedetails(e) {\n    this.isLoaded = false;\n    this.house_id = this.medicineConsumptionForm.controls.house_id.value;\n    this.medicineConsumptionForm.controls.bird_count.setValue(null);\n    this.medicineConsumptionForm.controls.age_week.setValue(null);\n    this.medicineConsumptionForm.controls.age_day.setValue(null);\n    this.getFeedsandmedicineconsumption();\n  }\n  async getAllmedicines() {\n    await this.feedsandmedicineConsumption.getAllmedicine().then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['data'].forEach(data => {\n          this.medicines.push(data);\n          /* this.medicine[0].med.push({\n            med_id: data.id,\n            value: 0\n          }); */\n        });\n        /* this.loopDates(); */\n      } else {\n        this.medicines = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    /* this.loopDates(); */\n  }\n  async getAllFeeds() {\n    await this.feedsandmedicineConsumption.getAllFeeds().then(res => {\n      if (res['error'] == 0) {\n        this.feed_options = res['datas'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  setMedvalue(e, i, x) {\n    this.medicine[i].med[x].value = e;\n  }\n  chooseFeed(e, i) {\n    this.medicine[i].feed.feed_id = e.value;\n  }\n  setFeedValue(e, i) {\n    this.medicine[i].feed.feed_consumption = e;\n  }\n  openModal(action?, page?): void {\n    if (action == 'form_cancel' || action == 'go_back') {\n      let dialog = this.dialog.open(GeneralModalComponent, {\n          width: '400px',\n          data: {\n            action: action,\n            page: page\n          }\n        });\n        dialog.afterClosed().subscribe(result => {\n          if (result) {\n            this.location.back();\n          }\n        });\n    } else {\n\n      /* let medmed = [];\n\n      this.medicine.forEach(d => {\n        if (new Date(d.day) > this.date_today) {\n          medmed.push(d);\n        }\n      }); */\n\n      this.medic = {\n        info: this.medicineConsumptionForm.value,\n        medicines: this.medicine\n      };\n      let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n        width: '400px',\n        data: {\n          item: this.medic,\n          action: 'medicine_add'\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          /* this.reloadData(); */\n          this.location.back();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    }\n  }\n  checkbox(e, i, x) {\n    if (!e.checked) {\n      this.medicine[i].med[x].value = 0;\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { FeedsMedicineConsumptionService } from './../../../../services/feeds-medicine-consumption/feeds-medicine-consumption.service'\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-feeds-medicine-consumption-listing',\n  templateUrl: './feeds-medicine-consumption-listing.component.html',\n  styleUrls: ['./feeds-medicine-consumption-listing.component.scss']\n})\nexport class FeedsMedicineConsumptionListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n  monthdatetoday: any = new Date();\n  page: number = 1;\n  limit: number = 10;\n  totalItems: number = 0;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit_disabled: number = 0;\n  houses: any = [];\n\n  canAdd: boolean = false;\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private feedsandmedicineConsumption: FeedsMedicineConsumptionService\n  ) {\n    \n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.validate();\n    this.getHouseListing();\n  }\n  async getHouseListing() {\n    await this.feedsandmedicineConsumption.getHouselist(this.page, this.limit).then(res => {\n      console.log('getHouselisting', res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.houses.push(data);\n        });\n      } else {\n        this.houses = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  async validate() {\n    this.feedsandmedicineConsumption.validate().then(res => {\n      if (res['error'] == 0) {\n        this.canAdd = true;\n      } else {\n        this.canAdd = false;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Day',\n        key: 'age_day',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Age',\n        key: 'age_week',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mortality',\n        key: 'mortality',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mortality Rate %',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Cull',\n        key: 'cull',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'End Population',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Egg production',\n        key: 'egg_count',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Production Rate %',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Grams/Bird',\n        key: 'feed_consumption',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Feeds/Bags',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Recommended Feeds (g)',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Recommended Feeds/Bag',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Medication',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FeedsMedicineConsumptionService } from './../../../services/feeds-medicine-consumption/feeds-medicine-consumption.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DatePipe } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n};\n\n@Component({\n  selector: 'app-medicine-consumption-update-modal',\n  templateUrl: './medicine-consumption-update-modal.component.html',\n  styleUrls: ['./medicine-consumption-update-modal.component.scss']\n})\nexport class MedicineConsumptionUpdateModalComponent implements OnInit {\n\n  public medicineUpdateForm: FormGroup;\n\n  item: any = null;\n  action: any = 'update';\n\n  modal_title: string = 'Update Medicine Consumption';\n  modal_primary_button: string = 'Save Changes';\n  modal_message: string = 'Are you sure you want to update medicines?';\n  modal_primary_button_class: string = 'btn-primary';\n\n  isLoaded: boolean = false;\n  medicines: any = [];\n  /* med_ids: any = [];\n  med_values: any = []; */\n  monthdatetoday: any = new Date();\n  med: any = [];\n  daily_house_report_id: any;\n\n  constructor(\n    public dialogRef: MatDialogRef<MedicineConsumptionUpdateModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private feedsandmedicineConsumption: FeedsMedicineConsumptionService,\n    private _snackBar: MatSnackBar,\n    private datePipe: DatePipe,\n    private formBuilder: FormBuilder\n  ) {\n    this.medicineUpdateForm = this.formBuilder.group({\n      daily_house_report_id: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      medicines:[]\n    });\n   }\n\n  ngOnInit() {\n    this.getAllmedicines();\n    /* this.med_ids = this.data.item.medicine_ids.split(',');\n    this.med_values = this.data.item.medicine_values.split(','); */\n    this.medicineUpdateForm.controls.daily_house_report_id.setValue(this.data.item.id);\n  }\n  async getAllmedicines() {\n    await this.feedsandmedicineConsumption.getAllmedicine().then(res => {\n      console.log('getAllmedicinesss', res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        let item_med_ids = this.data.item.medicine_ids.split(',');\n        let item_med_values = this.data.item.medicine_values.split(',');\n        res['data'].forEach(data => {\n          this.medicines.push(data);\n          this.med.push({\n            med_id: data.id,\n            value: 0\n          });\n        });\n        \n        item_med_ids.forEach((id, mindex) => {\n          let findIndex = this.medicines.findIndex(x => x.id == id);\n          this.med[findIndex].value = item_med_values[mindex];\n        });\n\n        /* res['data'].forEach(data => {\n          let findIndex = item_med_ids.findIndex(x => x == data.id);\n          if (findIndex >= 0) {\n            console.log('findIndex', findIndex);\n            this.med[findIndex].value = item_med_values[findIndex];\n          }\n        }); */\n      } else {\n        this.medicines = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    console.log(\"med\", this.med);\n  }\n  /* medicineChecked(e, x) {\n    let pick = e + \"-\" + x;\n    let meds = this.med.indexOf(pick);\n    if (meds) {\n      this.med.splice(meds, 1);\n    } else {\n      this.med.push(pick);\n    }\n    this.med.push(pick);\n  } */\n  setMedvalue(e, x) {\n    console.log('eee',e);\n    this.med[x].value = e;\n  }\n  /* isChecked(e, x) {\n    let pick = e + \"-\" + x;\n    let meds = this.med.includes(pick);\n    return meds;\n  } */\n  async submit(){\n    this.medicineUpdateForm.controls.medicines.setValue(this.med);\n    await this.feedsandmedicineConsumption.updateMeds(this.medicineUpdateForm.value).then(res => {\n      this.isLoaded = false;\n      if (res['error'] == 0) {\n        this.closeModal(res['message']);\n      } else {\n/*         this.modal_primary_button = this.action == 'create' ? 'Add House/Building' : 'Save Changes';\n        this._snackBar.open(res['message'], null, {\n          verticalPosition: 'top',\n          announcementMessage: res['message'],\n          duration: 3000\n        }); */\n      }\n    }).catch(e => {\n      this.isLoaded = false;\n      console.log(\"e\", e);\n      this._snackBar.open(e, null, {\n        verticalPosition: 'top',\n        announcementMessage: e,\n        duration: 3000\n      });\n    });\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n  checkbox(e, x) {\n    if (!e.checked) {\n      this.med[x].value = 0;\n    }\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FeedsMedicineConsumptionService } from './../../../services/feeds-medicine-consumption/feeds-medicine-consumption.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DatePipe } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n};\n\n@Component({\n  selector: 'app-feed-consumption-update-modal',\n  templateUrl: './feed-consumption-update-modal.component.html',\n  styleUrls: ['./feed-consumption-update-modal.component.scss']\n})\nexport class FeedConsumptionUpdateModalComponent implements OnInit {\n\n  public feedUpdateForm: FormGroup;\n\n  item: any = null;\n  action: any = 'update';\n\n  modal_title: string = 'Update Feed Consumption';\n  modal_primary_button: string = 'Save Changes';\n  modal_message: string = 'Are you sure you want to update feed consumption?';\n  modal_primary_button_class: string = 'btn-primary';\n\n  isLoaded: boolean = false;\n\n  feed_options: any = [];\n  feed: any = {\n    feed_id: null,\n    feed_consumption: null\n  };\n\n  constructor(\n    public dialogRef: MatDialogRef<FeedConsumptionUpdateModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private feedsandmedicineConsumption: FeedsMedicineConsumptionService,\n    private _snackBar: MatSnackBar,\n    private datePipe: DatePipe,\n    private formBuilder: FormBuilder\n  ) {\n    this.feedUpdateForm = this.formBuilder.group({\n      daily_house_report_id: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      feed:[]\n    });\n  }\n\n  ngOnInit() {\n    this.getAllFeeds();\n    this.feedUpdateForm.controls.daily_house_report_id.setValue(this.data.item.id);\n    this.feed = {\n      feed_id: this.data.item.feed_id ? this.data.item.feed_id : null,\n      feed_consumption: this.data.item.feed_consumption ? Number(this.data.item.feed_consumption) : 0\n    }\n  }\n  async getAllFeeds() {\n    await this.feedsandmedicineConsumption.getAllFeeds().then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.feed_options = res['datas'];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  chooseFeed(e) {\n    this.feed.feed_id = e.value;\n  }\n  setFeedValue(e) {\n    this.feed.feed_consumption = e;\n  }\n  async submit(){\n    this.feedUpdateForm.controls.feed.setValue(this.feed);\n    await this.feedsandmedicineConsumption.updateFeeds(this.feedUpdateForm.value).then(res => {\n      this.isLoaded = false;\n      if (res['error'] == 0) {\n        this.closeModal(res['message']);\n      } else {\n/*         this.modal_primary_button = this.action == 'create' ? 'Add House/Building' : 'Save Changes';\n        this._snackBar.open(res['message'], null, {\n          verticalPosition: 'top',\n          announcementMessage: res['message'],\n          duration: 3000\n        }); */\n      }\n    }).catch(e => {\n      this.isLoaded = false;\n      console.log(\"e\", e);\n      this._snackBar.open(e, null, {\n        verticalPosition: 'top',\n        announcementMessage: e,\n        duration: 3000\n      });\n    });\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryStocksService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) {\n\n  }\n  getTrayList(page = 1, limit = 10, order?, from?, to?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.tray_listing) + '/page/' + page + '/limit/' + limit;\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getTrayRecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.tray_view) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getSackList(page = 1, limit = 10, order?, from?, to?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.sack_listing) + '/page/' + page + '/limit/' + limit;\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getSackRecord(id) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.sack_view) + '/id/' + id;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getEggList(page = 1, limit = 10, order?, from?, to?, search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.freshegg_listing) + '/page/' + page + '/limit/' + limit;\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        if (search) {\n          url += '?search='+search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getEggRecord(date) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.freshegg_index) + '/date/' + date;\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  search(search?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.show_egg_stocks);\n        if (search) {\n          url += '?search=' + search;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../datatables/feeds-medicine-consumption-view/feeds-medicine-consumption-view';\nimport { InventoryStocksService } from './../../../../services/inventory-stocks/inventory-stocks.service';\nimport { DatePipe } from '@angular/common';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  visible_columns: number,\n  ths: any,\n  house_id: any,\n  order: any,\n  house_data: any,\n  feeds_and_medicine: any\n};\n\n@Component({\n  selector: 'app-report-monthly-record',\n  templateUrl: './report-monthly-record.component.html',\n  styleUrls: ['./report-monthly-record.component.scss']\n})\nexport class ReportMonthlyRecordComponent implements OnInit {\n  \n  visible_columns: any = [];\n  ths: any = datatable;\n  house_id: any;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  house_data: any = [];\n  feeds_and_medicine: any = [];\n  \n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n  isLoaded: boolean = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportMonthlyRecordComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private datePipe: DatePipe,\n    private inventoryStocksService: InventoryStocksService,\n    private exportAsService: ExportAsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.house_id = this.data.house_id;\n    this.order = this.data.order;\n    this.house_data = this.data.house_data;\n    this.feeds_and_medicine = this.data.feeds_and_medicine;\n    this.isLoaded = true;\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Feeds-And-Medicine-Consumption-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FeedsMedicineConsumptionService } from './../../../../services/feeds-medicine-consumption/feeds-medicine-consumption.service';\nimport { datatable } from './../../../../components/datatables/feeds-medicine-consumption-view/feeds-medicine-consumption-view';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Location } from '@angular/common';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MedicineConsumptionUpdateModalComponent } from './../../../../components/modals/medicine-consumption-update-modal/medicine-consumption-update-modal.component';\nimport { FeedConsumptionUpdateModalComponent } from './../../../../components/modals/feed-consumption-update-modal/feed-consumption-update-modal.component';\nimport { ReportMonthlyRecordComponent } from './../../../../components/modals/reports/report-monthly-record/report-monthly-record.component';\nimport { ExportToCsv } from 'export-to-csv';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-feeds-medicine-consumption-view',\n  templateUrl: './feeds-medicine-consumption-view.component.html',\n  styleUrls: ['./feeds-medicine-consumption-view.component.scss']\n})\nexport class FeedsMedicineConsumptionViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  feeds_and_medicine: any = [];\n  house_data: any = [];\n  feedsmedicine: any = [];\n  limit: number = 10;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  house_id: any;\n\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  ths: any = datatable;\n  visible_columns: any = [];\n\n  limit_disabled: number = 0;\n\n  date: Date;\n  dateCreatedat: any = [];\n  dateToday: any;\n  /* rowActive: boolean = false; */\n  id: any = [];\n  contentEditable: boolean = false;\n  formdata: any = [];\n\n  datetoday: any = new Date();\n  d: any;\n  isToday: boolean = false;\n  constructor(\n    private auth: AuthService,\n    private feedsandmedicineConsumption: FeedsMedicineConsumptionService,\n    public _route: ActivatedRoute,\n    private location: Location,\n    private datePipe: DatePipe,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar\n  ) { \n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this._route.params.subscribe(params => {\n      console.log('param',params);\n      this.house_id = params['house_id'];\n      this.getFeedsandmedicineconsumption();\n    });\n    this.d = this.datetoday.setDate(this.datetoday.getDate() + 1);\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.feeds_and_medicine = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getFeedsandmedicineconsumption();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.feeds_and_medicine = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getFeedsandmedicineconsumption();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.feeds_and_medicine = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getFeedsandmedicineconsumption();\n    }\n  }\n  async getFeedsandmedicineconsumption(){\n    await this.feedsandmedicineConsumption.getList(/* this.page, this.limit,  */this.order, this.house_id).then(res => {\n      console.log('feedsandmedicineConsumption',res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n/*         this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page']; */\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['data'].forEach(data => {\n          this.feeds_and_medicine.push(data);\n\n          this.date = new Date();\n          this.date.setDate(this.date.getDate() + 1);\n          this.dateCreatedat = this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd');\n          this.dateToday = this.datePipe.transform(new Date(this.date), 'yyyy-MM-dd');\n          if(this.dateToday > this.dateCreatedat){\n            this.isToday = true;\n          }\n\n        });\n        this.house_data = res['house_details'];\n        console.log(\"j feeds_and_medicine\", this.feeds_and_medicine);\n      } else {\n        this.feeds_and_medicine = [];\n        this.totalItems = 0;\n        /* this.totalPages = 0; */\n      }\n    }).catch(e => {\n      console.log(\"e\",e);\n      this.isLoaded = true;\n    });\n  }\n  async changeColumnVisibility(e) {\n    console.log(e);\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    })\n    console.log('new ths', this.ths);\n  }\n  goBack() {\n    this.location.back();\n  }\n  async onRowEnter(e,id){\n    e.preventDefault();\n    this.formdata = {\n     feed_id: id,\n      feeds_bags: e.target.innerHTML\n    }\n    if (e.which === 13) {\n      let dialog = this.dialog.open(GeneralModalComponent, {\n        width: '400px',\n        data: {\n          item: this.formdata,\n          action: 'feed_add'\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          /* this.location.back(); */\n          this.reloadData();\n          window.getSelection().removeAllRanges();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n/*       await this.feedsandmedicineConsumption.updateFeeds(formdata).then(res => {\n        this.isLoaded = true;\n        if (res['error'] == 0) {\n          window.getSelection().removeAllRanges();\n        }\n      }).catch(e => {\n        console.log(\"e\", e);\n        this.isLoaded = true;\n      }); */\n    }\n  }\n  async updateMed(){\n    console.log('house_data', this.house_data);\n    console.log('daily_house_report', this.feeds_and_medicine);\n  }\n  async reloadData() {\n    this.isLoaded = false;\n    this.feeds_and_medicine = [];\n    await this.getFeedsandmedicineconsumption();\n  }\n  openModal(data, type?) {\n    let date = this.datePipe.transform(new Date(this.d), 'yyyy-MM-dd');\n    let date2 = this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd');\n    if(date > date2){\n\n    }else{\n      if (type == 'feed') {\n        let dialog = this.dialog.open(FeedConsumptionUpdateModalComponent, {\n          width: '400px',\n          data: {\n            item: data,\n            action: 'feed_update'\n          }\n        });\n        dialog.afterClosed().subscribe(result => {\n          if (result) {\n            this.reloadData();\n            /* this.location.back(); */\n            this._snackBar.open(result, 'Okay', {\n              verticalPosition: 'top',\n              announcementMessage: result,\n              duration: 3000\n            });\n          }\n        });\n      } else {\n        let dialog = this.dialog.open(MedicineConsumptionUpdateModalComponent, {\n          width: '400px',\n          data: {\n            item: data,\n            action: 'medicine_update'\n          }\n        });\n        dialog.afterClosed().subscribe(result => {\n          if (result) {\n            this.reloadData();\n            /* this.location.back(); */\n            this._snackBar.open(result, 'Okay', {\n              verticalPosition: 'top',\n              announcementMessage: result,\n              duration: 3000\n            });\n          }\n        });\n      }\n    }\n  }\n  openPdf() {\n    let dialog = this.dialog.open(ReportMonthlyRecordComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        visible_columns: this.visible_columns,\n        ths: this.ths,\n        house_id: this.house_id,\n        order: this.order,\n        house_data: this.house_data,\n        feeds_and_medicine: this.feeds_and_medicine\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n    this.feeds_and_medicine.forEach(feeds_medicine => {\n\n      let age_string = feeds_medicine.age_week > 1 ? feeds_medicine.age_week+' weeks, ' : feeds_medicine.age_week+' week, ';\n      age_string += feeds_medicine.age_day > 1 ? feeds_medicine.age_day + ' days' : feeds_medicine.age_day+' day';\n\n      let medicine_string = '';\n\n      if (feeds_medicine.medicine_name) {\n        feeds_medicine.medicine_name.forEach((med, m) => {\n          medicine_string += med.medicine + ' (' + med.medicine_value + ' ' + med.medicine_unit.unit + ')';\n          medicine_string += m < feeds_medicine.medicine_name.length - 1 ? ', ' : '';\n        });\n      }\n      datas.push({\n        'Day': this.datePipe.transform(new Date(feeds_medicine.created_at), 'yyyy-MM-dd'),\n        'Age': age_string,\n        'Mortality': feeds_medicine.mortality,\n        'Mortality Rate %': feeds_medicine.mortality_rate + ' %',\n        'Cull': feeds_medicine.cull,\n        'End Population': feeds_medicine.end_bird_population,\n        'Egg Production': feeds_medicine.real_egg_count,\n        'Production Rate %': feeds_medicine.production_rate + ' %',\n        'Grams/Bird': feeds_medicine.feed_info ? feeds_medicine.feed_info.feed : '' + ' (' + feeds_medicine.feed_consumption + ' g)',\n        'Feeds/Bags': feeds_medicine.feeds ? feeds_medicine.feeds.string : '',\n        'Recommended Feeds (g)': feeds_medicine.feed_info ? feeds_medicine.feed_info.feed : '' + ' (' + feeds_medicine.rec_feed_consumption+ ' g)',\n        'Recommended Feeds/Bags': feeds_medicine.req_feeds ? feeds_medicine.req_feeds.string : '',\n        'Medication': medicine_string\n      });\n    });\n    const options = { \n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalSeparator: '.',\n      showLabels: true, \n      showTitle: true,\n      title:  'Feeds-And-Medicine-Consumption-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true,\n      filename: 'Feeds-And-Medicine-Consumption-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n    };\n    const csvExporter = new ExportToCsv(options);\n    csvExporter.generateCsv(datas);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { GeneralModalComponent } from './../../../../../components/modals/general-modal/general-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-feeds-create',\n  templateUrl: './feeds-create.component.html',\n  styleUrls: ['./feeds-create.component.scss']\n})\nexport class FeedsCreateComponent implements OnInit {\n\n  public feedForm: FormGroup;\n  max_date: any = new Date();\n  min_date: any = new Date();\n\n  constructor(\n    private auth: AuthService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private location: Location\n  ) {\n    this.min_date.setDate(this.min_date.getDate() + 1);\n    this.feedForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      feeds: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      kg_per_bag: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01),\n          Validators.max(9999999999)\n        ])\n      ],\n      pieces: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(1)\n        ])\n      ],\n      converted: [\n        ''\n      ],\n      delivery_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      unit_price: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01)\n        ])\n      ],\n      expiration_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      remarks: [\n        '',\n        Validators.compose([\n          Validators.maxLength(250)\n        ])\n      ],\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n  }\n  convertWeight() {\n    let converted = Number(this.feedForm.controls.kg_per_bag.value) * 1000;\n    this.feedForm.controls.converted.setValue(converted);\n  }\n  openModal(item, action): void {\n    console.log(item);\n    console.log(action);\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        this.location.back();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Feed Name',\n        key: 'feed',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Net weight (kg)',\n        key: 'kg_per_bag',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Converted (g)',\n        key: 'kg_per_bag',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of orders (pcs)',\n        key: 'pieces',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Consumed value (g)',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remaining value (g)',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Last updated',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Delivery Date',\n        key: 'delivery_date',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Unit Price',\n        key: 'unit_price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Expiration Date',\n        key: 'expiration_date',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remarks',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/feeds-listing/feeds-listing';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { FeedsMedicineManagementService } from './../../../../../services/feeds-medicine-management/feeds-medicine-management.service';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-feeds-listing',\n  templateUrl: './feeds-listing.component.html',\n  styleUrls: ['./feeds-listing.component.scss']\n})\nexport class FeedsListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n  \n  items: any = [];\n  totalItems: number = 0;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  /* get parameters */\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  delivery_date: any;\n  feed: any;\n  expiration_date: any;\n  order: any = {\n    order_by_column: 'feed',\n    order_by: 'asc'\n  };\n  search: any = '';\n\n  show_filter: boolean = false;\n\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  current_date: any = new Date();\n\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private generalService: GeneralService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getList();\n    this.getActivity('feeds_listing');\n  }\n  async getList() {\n    await this.feedsMedicineManagementService.getFeedsList(this.page, this.limit, this.delivery_date, this.feed, this.expiration_date, this.order, this.search).then(res => {\n      console.log(\"res\", res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['data']['feed_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          data.converted = Number(data.kg_per_bag) * 1000;\n          data.isExpired = this.datePipe.transform(new Date(this.current_date), 'yyyy-MM-dd') >= this.datePipe.transform(new Date(data.expiration_date), 'yyyy-MM-dd') ? true : false;\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(limit) {\n    this.isLoaded = false;\n    this.limit = limit.target.value;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async chooseDeliveryDate(e) {\n    this.delivery_date = this.datePipe.transform(new Date(e.value), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseExpirationDate(e) {\n    this.expiration_date = this.datePipe.transform(new Date(e.value), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.delivery_date = null;\n    this.expiration_date = null;\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { FeedsMedicineManagementService } from './../../../../../services/feeds-medicine-management/feeds-medicine-management.service';\nimport { GeneralModalComponent } from './../../../../../components/modals/general-modal/general-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-feeds-update',\n  templateUrl: './feeds-update.component.html',\n  styleUrls: ['./feeds-update.component.scss']\n})\nexport class FeedsUpdateComponent implements OnInit {\n\n  public feedForm: FormGroup;\n  max_date: any = new Date();\n  min_date: any = new Date();\n\n  constructor(\n    private auth: AuthService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    public _route: ActivatedRoute,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private formBuilder: FormBuilder,\n    private location: Location\n  ) {\n    this.min_date.setDate(this.min_date.getDate() + 1);\n    this.feedForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      feeds: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      kg_per_bag: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01),\n          Validators.max(9999999999)\n        ])\n      ],\n      pieces: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(1)\n        ])\n      ],\n      converted: [\n        ''\n      ],\n      delivery_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      unit_price: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01)\n        ])\n      ],\n      expiration_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      remarks: [\n        '',\n        Validators.compose([\n          Validators.maxLength(250)\n        ])\n      ],\n    });\n  }\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this._route.params.subscribe(params => {\n      this.getRecord(params['id']);\n    });\n  }\n  async getRecord(id) {\n    await this.feedsMedicineManagementService.getFeedRecord(id).then(res => {\n      console.log(\"res\", res);\n      if (res['error'] == 0) {\n        this.feedForm.controls.id.setValue(res['data']['id']);\n        this.feedForm.controls.feeds.setValue(res['data']['feed']);\n        this.feedForm.controls.kg_per_bag.setValue(res['data']['kg_per_bag']);\n        this.feedForm.controls.pieces.setValue(res['data']['pieces']);\n        this.feedForm.controls.converted.setValue(Number(res['data']['kg_per_bag']) * 1000);\n        this.feedForm.controls.delivery_date.setValue(res['data']['delivery_date']);\n        this.feedForm.controls.unit_price.setValue(res['data']['unit_price']);\n        this.feedForm.controls.expiration_date.setValue(res['data']['expiration_date']);\n        this.feedForm.controls.remarks.setValue(res['data']['remarks'] ? res['data']['remarks'] : '');\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  openModal(item, action): void {\n    console.log(item);\n    console.log(action);\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        this.location.back();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n  convertWeight() {\n    let converted = Number(this.feedForm.controls.kg_per_bag.value) * 1000;\n    this.feedForm.controls.converted.setValue(converted);\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { FeedsMedicineManagementService } from './../../../services/feeds-medicine-management/feeds-medicine-management.service';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n};\n\n@Component({\n  selector: 'app-medicine-unit-modal',\n  templateUrl: './medicine-unit-modal.component.html',\n  styleUrls: ['./medicine-unit-modal.component.scss']\n})\nexport class MedicineUnitModalComponent implements OnInit {\n\n  public medicineUnitForm: FormGroup;\n\n  item: any = [];\n  action: any = 'create';\n\n  modal_title: string = 'Add new medicine unit';\n  modal_primary_button: string = 'Add Medicine Unit';\n  modal_message: string = 'Are you sure you want to remove this medicine unit?';\n\n  isLoading: boolean = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<MedicineUnitModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private _snackBar: MatSnackBar\n  ) {\n    this.medicineUnitForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      unit: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ]\n    });\n  }\n\n  ngOnInit() {\n    console.log(\"data\", this.data);\n    this.item = this.data.item;\n    this.action = this.data.action;\n    if (this.item) {\n      this.modal_title = 'Edit medicine unit details';\n      this.modal_primary_button = 'Save Changes';\n      if (this.action && this.action == 'delete') {\n        this.modal_primary_button = 'Yes, remove';\n        this.modal_title = 'Remove medicine unit';\n      }\n      this.medicineUnitForm.controls.id.setValue(this.item.id);\n      this.medicineUnitForm.controls.unit.setValue(this.item.unit);\n    }\n  }\n  async submit() {\n    this.isLoading = true;\n    if (this.action == 'delete') {\n      this.modal_primary_button = 'Removing...';\n      await this.feedsMedicineManagementService.removeMedicineUnit(this.medicineUnitForm.value).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res['message']);\n        } else {\n          this.modal_primary_button = 'Yes, remove';\n          this._snackBar.open(res['message'], null, {\n            verticalPosition: 'top',\n            announcementMessage: res['message'],\n            duration: 3000\n          });\n        }\n      }).catch(e => {\n        this.isLoading = false;\n        console.log(\"e\", e);\n        this._snackBar.open(e, null, {\n          verticalPosition: 'top',\n          announcementMessage: e,\n          duration: 3000\n        });\n      });\n    } else {\n      this.modal_primary_button = this.action == 'create' ? 'Saving...' : 'Updating...';\n      await this.feedsMedicineManagementService.saveMedicineUnit(this.medicineUnitForm.value).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.closeModal(res);\n        } else {\n          this.modal_primary_button = this.action == 'create' ? 'Add Medicine Unit' : 'Save Changes';\n          this._snackBar.open(res['message'], null, {\n            verticalPosition: 'top',\n            announcementMessage: res['message'],\n            duration: 3000\n          });\n        }\n      }).catch(e => {\n        this.isLoading = false;\n        console.log(\"e\", e);\n        this._snackBar.open(e, null, {\n          verticalPosition: 'top',\n          announcementMessage: e,\n          duration: 3000\n        });\n      });\n    }\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { GeneralModalComponent } from './../../../../../components/modals/general-modal/general-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { FeedsMedicineManagementService } from './../../../../../services/feeds-medicine-management/feeds-medicine-management.service';\nimport { MedicineUnitModalComponent } from './../../../../../components/modals/medicine-unit-modal/medicine-unit-modal.component';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-medicine-create',\n  templateUrl: './medicine-create.component.html',\n  styleUrls: ['./medicine-create.component.scss']\n})\nexport class MedicineCreateComponent implements OnInit {\n  \n  public medicineForm: FormGroup;\n  max_date: any = new Date();\n  min_date: any = new Date();\n  \n  units: any = [];\n\n  constructor(\n    private auth: AuthService,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private location: Location\n  ) {\n    this.min_date.setDate(this.min_date.getDate() + 1);\n    this.medicineForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      medicine: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      unit_id: [\n        null,\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      net_weight: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01),\n          Validators.max(9999999999)\n        ])\n      ],\n      pieces: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(1)\n        ])\n      ],\n      delivery_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      unit_price: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01)\n        ])\n      ],\n      expiration_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      remarks: [\n        '',\n        Validators.compose([\n          Validators.maxLength(250)\n        ])\n      ],\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getMedicineUnits();\n  }\n  async getMedicineUnits() {\n    await this.feedsMedicineManagementService.getMedicineUnits().then(res => {\n      console.log(\"res\", res);\n      if (res['error'] == 0) {\n        this.units = res['data'];\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  openModal(item?, action?): void {\n    console.log('medicineito',item);\n    console.log(action);\n    if (item) {\n      let dialog = this.dialog.open(GeneralModalComponent, {\n        width: '400px',\n        data: {\n          item: item ? item : null,\n          action: action\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          /* this.reloadData(); */\n          this.location.back();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    } else {\n      let dialog = this.dialog.open(MedicineUnitModalComponent, {\n        width: '400px',\n        data: {\n          item: item ? item : null,\n          action: action ? action : 'create'\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          this.getMedicineUnits();\n          this._snackBar.open(result['message'], 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result['message'],\n            duration: 3000\n          });\n          this.medicineForm.controls.unit_id.setValue(result['data']);\n        }\n      });\n    }\n    \n  }\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Medicine Name',\n        key: 'medicine',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Unit',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Net Weight',\n        key: 'net_weight',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of orders (pcs)',\n        key: 'pieces',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Consumed value',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remaining value',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Last updated',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Delivery Date',\n        key: 'delivery_date',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Unit Price',\n        key: 'unit_price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Expiration Date',\n        key: 'expiration_date',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remarks',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/medicine-listing/medicine-listing';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { FeedsMedicineManagementService } from './../../../../../services/feeds-medicine-management/feeds-medicine-management.service';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-medicine-listing',\n  templateUrl: './medicine-listing.component.html',\n  styleUrls: ['./medicine-listing.component.scss']\n})\nexport class MedicineListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  /* get parameters */\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  delivery_date: any;\n  medicine: any;\n  expiration_date: any;\n  order: any = {\n    order_by_column: 'medicine',\n    order_by: 'asc'\n  };\n  search: any = '';\n\n  show_filter: boolean = false;\n\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  current_date: any = new Date();\n  \n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private generalService: GeneralService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getList();\n    this.getActivity('medicine_listing');\n  }\n  async getList() {\n    await this.feedsMedicineManagementService.getMedicineList(this.page, this.limit, this.delivery_date, this.medicine, this.expiration_date, this.order, this.search).then(res => {\n      console.log(\"res\", res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count']/* res['data']['type_of_medicines'] */;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          data.isExpired = this.datePipe.transform(new Date(this.current_date), 'yyyy-MM-dd') >= this.datePipe.transform(new Date(data.expiration_date), 'yyyy-MM-dd') ? true : false;\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(limit) {\n    this.isLoaded = false;\n    this.limit = limit.target.value;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async chooseDeliveryDate(e) {\n    this.delivery_date = this.datePipe.transform(new Date(e.value), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseExpirationDate(e) {\n    this.expiration_date = this.datePipe.transform(new Date(e.value), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.delivery_date = null;\n    this.expiration_date = null;\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { FeedsMedicineManagementService } from './../../../../../services/feeds-medicine-management/feeds-medicine-management.service';\nimport { GeneralModalComponent } from './../../../../../components/modals/general-modal/general-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MedicineUnitModalComponent } from './../../../../../components/modals/medicine-unit-modal/medicine-unit-modal.component';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-medicine-update',\n  templateUrl: './medicine-update.component.html',\n  styleUrls: ['./medicine-update.component.scss']\n})\nexport class MedicineUpdateComponent implements OnInit {\n\n  public medicineForm: FormGroup;\n  max_date: any = new Date();\n  min_date: any = new Date();\n  units: any = [];\n  item: any = [];\n\n  constructor(\n    private auth: AuthService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    public _route: ActivatedRoute,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private formBuilder: FormBuilder,\n    private location: Location\n  ) {\n    this.min_date.setDate(this.min_date.getDate() + 1);\n    this.medicineForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      medicine: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      unit_id: [\n        null,\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      net_weight: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01),\n          Validators.max(9999999999)\n        ])\n      ],\n      pieces: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(1)\n        ])\n      ],\n      delivery_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      unit_price: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01)\n        ])\n      ],\n      expiration_date: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      remarks: [\n        '',\n        Validators.compose([\n          Validators.maxLength(250)\n        ])\n      ],\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this._route.params.subscribe(params => {\n      this.getRecord(params['id']);\n      this.getMedicineUnits();\n    });\n  }\n  async getRecord(id) {\n    await this.feedsMedicineManagementService.getMedicineRecord(id).then(res => {\n      console.log(\"res\", res);\n      if (res['error'] == 0) {\n        this.medicineForm.controls.id.setValue(res['data']['id']);\n        this.medicineForm.controls.medicine.setValue(res['data']['medicine']);\n        this.medicineForm.controls.unit_id.setValue(res['data']['unit_id']);\n        this.medicineForm.controls.net_weight.setValue(res['data']['net_weight']);\n        this.medicineForm.controls.pieces.setValue(Number(res['data']['pieces']) * 1000);\n        this.medicineForm.controls.delivery_date.setValue(res['data']['delivery_date']);\n        this.medicineForm.controls.unit_price.setValue(res['data']['unit_price']);\n        this.medicineForm.controls.expiration_date.setValue(res['data']['expiration_date']);\n        this.medicineForm.controls.remarks.setValue(res['data']['remarks'] ? res['data']['remarks'] : '');\n        this.item = res['data'];\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getMedicineUnits() {\n    await this.feedsMedicineManagementService.getMedicineUnits().then(res => {\n      console.log(\"res\", res);\n      if (res['error'] == 0) {\n        this.units = res['data'];\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  openModal(item?, action?): void {\n    console.log(item);\n    console.log(action);\n    if (item) {\n      let dialog = this.dialog.open(GeneralModalComponent, {\n        width: '400px',\n        data: {\n          item: item ? item : null,\n          action: action\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          /* this.reloadData(); */\n          this.location.back();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    } else {\n      let dialog = this.dialog.open(MedicineUnitModalComponent, {\n        width: '400px',\n        data: {\n          item: item ? item : null,\n          action: action ? action : 'create'\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          this.getMedicineUnits();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    }\n    \n  }\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'House/Building no.',\n        key: 'house_name',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Maximum Capacity',\n        key: 'capacity',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { HouseService } from './../../../services/house/house.service';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { EventsService } from 'angular4-events';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n};\n\n@Component({\n  selector: 'app-house-modal',\n  templateUrl: './house-modal.component.html',\n  styleUrls: ['./house-modal.component.scss']\n})\nexport class HouseModalComponent implements OnInit {\n\n  public houseForm: FormGroup;\n\n  item: any = null;\n  action: any = 'create';\n\n  modal_title: string = 'Add new house/building';\n  modal_primary_button: string = 'Add House/Building';\n  modal_message: string = 'Are you sure you want to remove this house/building?';\n  modal_primary_button_class: string = 'btn-primary';\n\n  isLoading: boolean = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<HouseModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private events: EventsService,\n    private formBuilder: FormBuilder,\n    private houseService: HouseService,\n    private _snackBar: MatSnackBar\n  ) {\n    this.houseForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      house_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern('^[0-9]+$')\n        ])\n      ],\n      capacity: [\n        '',\n        Validators.compose([\n          Validators.min(1),\n          Validators.required,\n        ])\n      ]\n    });\n  }\n\n  ngOnInit() {\n    console.log(\"data\", this.data);\n    this.item = this.data.item;\n    this.action = this.data.action;\n    console.log('candelete', this.item);\n    if (this.item) {\n      this.modal_title = 'Edit house/building details';\n      this.modal_primary_button = 'Save Changes';\n      if (this.item.beginning) {\n        let min = Number(this.item.beginning.bird_count) + Number(this.item.beginning.cull) + Number(this.item.beginning.mortality);\n        this.houseForm.controls.capacity.clearValidators();\n        this.houseForm.controls.capacity.setValidators([\n          Validators.required,\n          Validators.min(min),\n        ])\n      }\n      if (this.action && this.action == 'delete') {\n        if (this.item && this.item.canDelete) {\n          this.modal_primary_button = 'Yes, remove';\n          this.modal_primary_button_class = 'btn-danger';\n          this.modal_title = 'Remove house/building';\n        } else {\n          this.modal_primary_button = 'Okay';\n          this.modal_primary_button_class = 'btn-primary';\n          this.modal_title = 'Remove house/building';\n          this.modal_message = 'You can not delete this house because it has an existing record.';\n        }\n      }\n      this.houseForm.controls.id.setValue(this.item.id);\n      this.houseForm.controls.house_name.setValue(this.item.house_name);\n      this.houseForm.controls.capacity.setValue(this.item.capacity);\n    }else{\n      this.modal_primary_button = 'Save';\n      this.modal_primary_button_class = 'btn-primary';\n      this.modal_title = 'Add House/Building';\n    }\n  }\n  async submit() {\n    console.log(this.houseForm.value);\n    this.isLoading = true;\n    if (this.action == 'delete') {\n      if(this.item && this.item.canDelete){\n        this.modal_primary_button = 'Removing...';\n        await this.houseService.remove(this.houseForm.value).then(res => {\n          this.isLoading = false;\n          if (res['error'] == 0) {\n            this.events.publish('sidebar_house_refresh', true);\n            this.closeModal(res['message']);\n          } else {\n            this.modal_primary_button = 'Yes, remove';\n            this._snackBar.open(res['message'], null, {\n              verticalPosition: 'top',\n              announcementMessage: res['message'],\n              duration: 3000\n            });\n          }\n        }).catch(e => {\n          this.isLoading = false;\n          console.log(\"e\", e);\n          this._snackBar.open(e, null, {\n            verticalPosition: 'top',\n            announcementMessage: e,\n            duration: 3000\n          });\n        });\n      }else{\n        this.closeModal();\n      }\n\n    } else {\n      this.modal_primary_button = this.action == 'create' ? 'Saving...' : 'Updating...';\n      await this.houseService.save(this.houseForm.value).then(res => {\n        this.isLoading = false;\n        if (res['error'] == 0) {\n          this.events.publish('sidebar_house_refresh', true);\n          this.closeModal(res['message']);\n        } else {\n          this.modal_primary_button = this.action == 'create' ? 'Add House/Building' : 'Save Changes';\n          this._snackBar.open(res['message'], null, {\n            verticalPosition: 'top',\n            announcementMessage: res['message'],\n            duration: 3000\n          });\n        }\n      }).catch(e => {\n        this.isLoading = false;\n        console.log(\"e\", e);\n        this._snackBar.open(e, null, {\n          verticalPosition: 'top',\n          announcementMessage: e,\n          duration: 3000\n        });\n      });\n    }\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { datatable } from './../../../../components/datatables/house-listing/house-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { HouseService } from './../../../../services/house/house.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { HouseModalComponent } from './../../../../components/modals/house-modal/house-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-house-listing',\n  templateUrl: './house-listing.component.html',\n  styleUrls: ['./house-listing.component.scss']\n})\nexport class HouseListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n  \n  items: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'house_name',\n    order_by: 'asc'\n  };\n  search: any = '';\n\n  activity: any = [];\n  showtimeago: boolean = true;\n  constructor(\n    private auth: AuthService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private generalService: GeneralService,\n    private houseService: HouseService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getListing();\n    this.getActivity('house_listing');\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getListing();\n    }\n  }\n  async getListing() {\n    await this.houseService.getList(this.page, this.limit, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async reloadData() {\n    this.isLoaded = false;\n    this.items = [];\n    await this.getListing();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  openModal(item?, action?): void {\n    console.log('item: ', item);\n    let dialog = this.dialog.open(HouseModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action ? action : 'create'\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.reloadData();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Dates',\n        key: 'dates',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Beginning no. of stocks',\n        key: 'beginning_no',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Harvested',\n        key: 'total_harvested',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of Waste/Sales',\n        key: 'sales',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Remaining stocks',\n        key: 'total_remaining',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    }\n    ,\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../datatables/fresh-eggs-listing/fresh-eggs-listing';\nimport { InventoryStocksService } from './../../../../services/inventory-stocks/inventory-stocks.service';\nimport { DatePipe } from '@angular/common';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  order: any,\n  search: any,\n  visible_columns: any,\n  ths: any\n};\n\n@Component({\n  selector: 'app-report-fresh-eggs',\n  templateUrl: './report-fresh-eggs.component.html',\n  styleUrls: ['./report-fresh-eggs.component.scss']\n})\nexport class ReportFreshEggsComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n  items: any = [];\n  page: number = 1;\n  limit: number = 10;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  search: any = '';\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'A4',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      showall: true,\n      pdfCallbackFn: this.pdfCallbackFn\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportFreshEggsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private datePipe: DatePipe,\n    private inventoryStocksService: InventoryStocksService,\n    private exportAsService: ExportAsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.getListing();\n  }\n  async getListing() {\n    await this.inventoryStocksService.getEggList(this.page, this.limit, this.order, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          data.date = this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd');\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Fresh-Eggs-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    /* pdf.showall */\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.setFontSize(12);\n      pdf.text(i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 25, pdf.internal.pageSize.getHeight() - 10);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/fresh-eggs-listing/fresh-eggs-listing';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { InventoryStocksService } from './../../../../../services/inventory-stocks/inventory-stocks.service';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportFreshEggsComponent } from './../../../../../components/modals/reports/report-fresh-eggs/report-fresh-eggs.component';\nimport { ExportToCsv } from 'export-to-csv';\n\n@Component({\n  selector: 'app-fresh-eggs-listing',\n  templateUrl: './fresh-eggs-listing.component.html',\n  styleUrls: ['./fresh-eggs-listing.component.scss']\n})\nexport class FreshEggsListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n  show_filter: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  search: any = '';\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  constructor(\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private generalService: GeneralService,\n    private inventoryStocksService: InventoryStocksService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.getListing();\n    this.getActivity('fresh_egg_inventory_listing');\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getListing();\n    }\n  }\n  async getListing() {\n    await this.inventoryStocksService.getEggList(this.page, this.limit, this.order, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          data.date = this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd');\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async reloadData() {\n    this.isLoaded = false;\n    this.items = [];\n    await this.getListing();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getListing();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportFreshEggsComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        search: this.search,\n        visible_columns: this.visible_columns,\n        ths: this.ths\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n\n    await this.inventoryStocksService.getEggList(1, this.totalItems, this.order, this.from, this.to, this.search).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          datas.push({\n            'Dates': this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd'),\n            'Beginning no. of stocks': data.beginning_stocks,\n            'Total Harvested': data.total_harvested,\n            'No. of Waste/Sales': data.waste_sales,\n            'Total Remaining Stocks': data.total_remaining_stocks\n          });\n        });\n        \n        const options = { \n          fieldSeparator: ',',\n          quoteStrings: '\"',\n          decimalSeparator: '.',\n          showLabels: true, \n          showTitle: true,\n          title:  'Fresh-Eggs-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n          useTextFile: false,\n          useBom: true,\n          useKeysAsHeaders: true,\n          filename: 'Fresh-Eggs-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n        };\n        const csvExporter = new ExportToCsv(options);\n        csvExporter.generateCsv(datas);\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    })\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Item Details',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Beginning no.',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Harvested',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    /* {\n        label: 'Waste',\n        key: '',\n        canSort: false,\n        isVisible: true\n    }, */\n    {\n        label: 'Sales',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remaining Stocks',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { InventoryStocksService } from './../../../../services/inventory-stocks/inventory-stocks.service';\nimport { DatePipe } from '@angular/common';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  item: any,\n  items: any,\n  ths: any,\n  visible_columns: any\n};\n\n@Component({\n  selector: 'app-report-fresh-eggs-view',\n  templateUrl: './report-fresh-eggs-view.component.html',\n  styleUrls: ['./report-fresh-eggs-view.component.scss']\n})\nexport class ReportFreshEggsViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n  item: any = [];\n  items: any = [];\n  ths: any = [];\n  visible_columns: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportFreshEggsViewComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private datePipe: DatePipe,\n    private inventoryStocksService: InventoryStocksService,\n    private exportAsService: ExportAsService\n  ) {\n\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.item = this.data.item;\n    this.items = this.data.items;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.isLoaded = true;\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Fresh-Eggs-Inventory-View-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/fresh-eggs-view/fresh-eggs-view';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { InventoryStocksService } from './../../../../../services/inventory-stocks/inventory-stocks.service';\nimport { Location } from '@angular/common';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportFreshEggsViewComponent } from './../../../../../components/modals/reports/report-fresh-eggs-view/report-fresh-eggs-view.component';\nimport { ExportToCsv } from 'export-to-csv';\n\n@Component({\n  selector: 'app-fresh-eggs-view',\n  templateUrl: './fresh-eggs-view.component.html',\n  styleUrls: ['./fresh-eggs-view.component.scss']\n})\nexport class FreshEggsViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  date: any = new Date();\n  dateToday: Date = new Date();\n  items: any = [];\n  item: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  activity: any = [];\n  showtimeago: boolean = true;\n  constructor(\n    private dialog: MatDialog,\n    private _route: ActivatedRoute,\n    private generalService: GeneralService,\n    private inventoryStocksService: InventoryStocksService,\n    private location: Location,\n    private datePipe: DatePipe\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.date = params['date'];\n      this.getRecord();\n      this.getActivity('fresh_egg_inventory_view', this.date);\n    });\n  }\n  async getRecord() {\n    await this.inventoryStocksService.getEggRecord(this.date).then(res => {\n      console.log('freshEggsinventory', res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.item = res['data'];\n        /* this.items = res['datas']; */\n        res['datas'].forEach(data => {\n          data.remaining = (Number(data.beginning) + Number(data.harvested)) - Number(data.sales);\n          this.items.push(data);\n        });\n      } else {\n        this.item = [];\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page, date) {\n    await this.generalService.getActivity(page, null, null, null, null, date).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportFreshEggsViewComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        item: this.item,\n        items: this.items,\n        ths: this.ths,\n        visible_columns: this.visible_columns\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  goBack() {\n    this.location.back();\n  }\n  async exportToCsv() {\n    let datas = [];\n    this.items.forEach(data => {\n      datas.push({\n        'Item Details': data.egg_type.type,\n        'Status': data.remaining > 0 ? 'Available' : 'Out of Stock',\n        'Beginning no.': data.beginning,\n        'Harvested': data.harvested,\n        'Sales': data.sales,\n        'Remaining Stocks': data.remaining\n      });\n    });\n    const options = { \n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalSeparator: '.',\n      showLabels: true, \n      showTitle: true,\n      title:  'Fresh-Eggs-Inventory-View-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true,\n      filename: 'Fresh-Eggs-Inventory-View-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n    };\n    const csvExporter = new ExportToCsv(options);\n    csvExporter.generateCsv(datas);\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Dates',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Beginning no. of stocks (pcs)',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of In/from Houses (pcs)',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of Out/Sales (pcs)',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Remaining stocks (pcs)',\n        key: 'last_ending',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Warehouseman',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../datatables/sacks-listing/sacks-listing';\nimport { InventoryStocksService } from './../../../../services/inventory-stocks/inventory-stocks.service';\nimport { DatePipe } from '@angular/common';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  order: any,\n  search: any,\n  visible_columns: any,\n  ths: any\n};\n\n@Component({\n  selector: 'app-report-sacks',\n  templateUrl: './report-sacks.component.html',\n  styleUrls: ['./report-sacks.component.scss']\n})\nexport class ReportSacksComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n  items: any = [];\n  page: number = 1;\n  limit: number = 10;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  search: any = '';\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'A4',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      showall: true,\n      pdfCallbackFn: this.pdfCallbackFn\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n  \n  constructor(\n    public dialogRef: MatDialogRef<ReportSacksComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private datePipe: DatePipe,\n    private inventoryStocksService: InventoryStocksService,\n    private exportAsService: ExportAsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.getListing();\n  }\n  async getListing() {\n    await this.inventoryStocksService.getSackList(this.page, this.limit, this.order, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          data.date = this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd');\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Sacks-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    /* pdf.showall */\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.setFontSize(12);\n      pdf.text(i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 25, pdf.internal.pageSize.getHeight() - 10);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/sacks-listing/sacks-listing';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { InventoryStocksService } from './../../../../../services/inventory-stocks/inventory-stocks.service';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { ExportToCsv } from 'export-to-csv';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportSacksComponent } from './../../../../../components/modals/reports/report-sacks/report-sacks.component';\n\n@Component({\n  selector: 'app-sacks-listing',\n  templateUrl: './sacks-listing.component.html',\n  styleUrls: ['./sacks-listing.component.scss']\n})\nexport class SacksListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n  show_filter: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'desc'\n  };\n  search: any = '';\n  activity: any = [];\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n  constructor(\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private generalService: GeneralService,\n    private inventoryStocksService: InventoryStocksService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    this.max_date.setDate(this.max_date.getDate());\n  }\n  ngOnInit() {\n    this.getListing();\n    this.getActivity('sacks_listing');\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getListing();\n    }\n  }\n  async getListing() {\n    await this.inventoryStocksService.getSackList(this.page, this.limit, this.order, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          data.total_out_sales = Number(data.total_out) + Number(data.sales);\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async reloadData() {\n    this.isLoaded = false;\n    this.items = [];\n    await this.getListing();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportSacksComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        search: this.search,\n        visible_columns: this.visible_columns,\n        ths: this.ths\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n\n    await this.inventoryStocksService.getSackList(1, this.totalItems, this.order, this.from, this.to, this.search).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          datas.push({\n            'Dates': this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd'),\n            'Beginning no. of stocks (pcs)': data.last_data ? data.last_data.last_ending : 0,\n            'No. of In/From House (pcs)': data.total_in,\n            'No. of Out/Sales (pcs)': data.total_out_sales,\n            'Total Remaining Stocks (pcs)': data.last_ending,\n            'Warehouseman': data.name\n          });\n        });\n        \n        const options = { \n          fieldSeparator: ',',\n          quoteStrings: '\"',\n          decimalSeparator: '.',\n          showLabels: true, \n          showTitle: true,\n          title:  'Sacks-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n          useTextFile: false,\n          useBom: true,\n          useKeysAsHeaders: true,\n          filename: 'Sacks-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n        };\n        const csvExporter = new ExportToCsv(options);\n        csvExporter.generateCsv(datas);\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    })\n  }\n}\n","\nexport const datatable: any = [\n    {\n        label: 'Item Details',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Last Ending no.',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'House/Bldg. 5',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'House/Bldg. 6',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'House/Bldg. 7',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'House/Bldg. 8',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total In',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Out',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Sales',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remaining stocks',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remarks (In)',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remarks (Out)',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    }\n]","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/sacks-view/sacks-view';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Location } from '@angular/common';\nimport { InventoryStocksService } from './../../../../../services/inventory-stocks/inventory-stocks.service';\nimport { GeneralService } from './../../../../../services/general/general.service';\n\n@Component({\n  selector: 'app-sacks-view',\n  templateUrl: './sacks-view.component.html',\n  styleUrls: ['./sacks-view.component.scss']\n})\nexport class SacksViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n  \n  visible_columns: any = [];\n\n  id: number;\n  items: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n\n  in_house: number = 0;\n  out_sales: number = 0;\n\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  constructor(\n    private _route: ActivatedRoute,\n    private generalService: GeneralService,\n    private inventoryStocksService: InventoryStocksService,\n    private location: Location\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.id = params['id'];\n      this.getRecord();\n      this.getActivity('sacks_view', this.id);\n    });\n  }\n  async getRecord() {\n    await this.inventoryStocksService.getSackRecord(this.id).then(res => {\n      this.isLoaded = true;\n      console.log(res);\n      if (res['error'] == 0) {\n        this.items = res['data'];\n        this.totalItems = res['total_count']/* res['data']['total_sacks'] */;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        this.items.sack_bldg_inventory.forEach(data => {\n          this.in_house += Number(data.count);\n        });\n        this.out_sales = Number(this.items.total_out) + Number(this.items.sales);\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  goBack() {\n    this.location.back();\n  }\n  async getActivity(page, id) {\n    await this.generalService.getActivity(page, null, null, null, id).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Time and Date',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Beginning no. of stocks (pcs)',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'In/Return of Stocks (pcs)',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'No. of Out/Sales (pcs)',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Remaining stocks (pcs)',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Warehouseman',\n        key: '',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../datatables/trays-listing/trays-listing';\nimport { InventoryStocksService } from './../../../../services/inventory-stocks/inventory-stocks.service';\nimport { DatePipe } from '@angular/common';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  order: any,\n  search: any,\n  visible_columns: any,\n  ths: any\n};\n@Component({\n  selector: 'app-report-trays',\n  templateUrl: './report-trays.component.html',\n  styleUrls: ['./report-trays.component.scss']\n})\nexport class ReportTraysComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n  items: any = [];\n  page: number = 1;\n  limit: number = 10;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  search: any = '';\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'A4',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      showall: true,\n      pdfCallbackFn: this.pdfCallbackFn\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportTraysComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private datePipe: DatePipe,\n    private inventoryStocksService: InventoryStocksService,\n    private exportAsService: ExportAsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.getListing();\n  }\n  async getListing() {\n    await this.inventoryStocksService.getTrayList(this.page, this.limit, this.order, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          data.date = this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd');\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Trays-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    /* pdf.showall */\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.setFontSize(12);\n      pdf.text(i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 25, pdf.internal.pageSize.getHeight() - 10);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/trays-listing/trays-listing';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { InventoryStocksService } from './../../../../../services/inventory-stocks/inventory-stocks.service';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { ExportToCsv } from 'export-to-csv';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { ReportTraysComponent } from './../../../../../components/modals/reports/report-trays/report-trays.component';\n\n@Component({\n  selector: 'app-trays-listing',\n  templateUrl: './trays-listing.component.html',\n  styleUrls: ['./trays-listing.component.scss']\n})\nexport class TraysListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n  show_filter: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n  \n  items: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'desc'\n  };\n  search: any = '';\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n  constructor(\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private generalService: GeneralService,\n    private inventoryStocksService: InventoryStocksService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    this.max_date.setDate(this.max_date.getDate());\n  }\n\n  ngOnInit() {\n    this.getListing();\n    this.getActivity('trays_listing');\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getListing();\n    }\n  }\n  async getListing() {\n    await this.inventoryStocksService.getTrayList(this.page, this.limit, this.order, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async reloadData() {\n    this.isLoaded = false;\n    this.items = [];\n    await this.getListing();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getListing();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportTraysComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        search: this.search,\n        visible_columns: this.visible_columns,\n        ths: this.ths\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n\n    await this.inventoryStocksService.getTrayList(1, this.totalItems, this.order, this.from, this.to, this.search).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          datas.push({\n            'Time and Date': this.datePipe.transform(new Date(data.created_at), 'yyyy-MM-dd'),\n            'Beginning no. of stocks (pcs)': data.beginning,\n            'In/Return of Stocks (pcs)': data.returned,\n            'No. of Out/Sales (pcs)': data.number_of_out_sales,\n            'Total Remaining Stocks (pcs)': data.total_remaining,\n            'Warehouseman': data.name\n          });\n        });\n        \n        const options = { \n          fieldSeparator: ',',\n          quoteStrings: '\"',\n          decimalSeparator: '.',\n          showLabels: true, \n          showTitle: true,\n          title:  'Tray-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n          useTextFile: false,\n          useBom: true,\n          useKeysAsHeaders: true,\n          filename: 'Tray-Inventory-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n        };\n        const csvExporter = new ExportToCsv(options);\n        csvExporter.generateCsv(datas);\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    })\n  }\n}","export const datatable: any = [\n    {\n        label: 'Item Details',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Beginning no.',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'In/Return',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Sorting (Waste)',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Marketing (Waste)',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Out/Hiram',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Remaining stocks',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    /* {\n        label: 'Remarks',\n        key: '',\n        canSort: false,\n        isVisible: true\n    } */\n]","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/trays-view/trays-view';\nimport { limitoptions } from './../../../../../components/datatables/limit/limit';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Location } from '@angular/common';\nimport { InventoryStocksService } from './../../../../../services/inventory-stocks/inventory-stocks.service';\nimport { GeneralService } from './../../../../../services/general/general.service';\n\n@Component({\n  selector: 'app-trays-view',\n  templateUrl: './trays-view.component.html',\n  styleUrls: ['./trays-view.component.scss']\n})\nexport class TraysViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  id: number;\n  items: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n\n  in_house: number = 0;\n  out_sales: number = 0;\n\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  constructor(\n    private _route: ActivatedRoute,\n    private generalService: GeneralService,\n    private inventoryStocksService: InventoryStocksService,\n    private location: Location\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.id = params['id'];\n      this.getRecord();\n      this.getActivity('trays_view', this.id);\n    });\n  }\n  async getRecord() {\n    await this.inventoryStocksService.getTrayRecord(this.id).then(res => {\n      this.isLoaded = true;\n      console.log(res);\n      if (res['error'] == 0) {\n        this.items = res['data'];\n        this.totalItems = res['total_count']/* res['data']['total_trays'] */;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  goBack() {\n    this.location.back();\n  }\n  async getActivity(page, id) {\n    await this.generalService.getActivity(page, null, null, null, id).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EggTypeService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n  getList() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.eggtype_listing);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { env } from \"./../../lib/env/env\";\nimport { urls } from './../../lib/urls/urls';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PerformanceReportService {\n\n  constructor(\n    private http: HttpClient,\n    private env: env\n  ) { }\n  getProductionHouse(page = 1, limit = 10, house_id?, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_productionhouse) + '/page/' + page + '/limit/' + limit;\n        if (house_id && house_id != 0) {\n          url += '/house_id/'+house_id;\n        }\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getProductionEggSize(page = 1, limit = 10, house_id?, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_productioneggsize) + '/page/' + page + '/limit/' + limit;\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        if (house_id) {\n          url += '/house_id/' + house_id;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getOverallSales(page = 1, limit = 10, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_overallsales) + '/page/' + page + '/limit/' + limit;\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getSalesByEggSize(page = 1, limit = 10, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_saleseggsizes) + '/page/' + page + '/limit/' + limit;\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getFeedConsumptionReport(page = 1, limit = 10, house_id?, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_feeds) + '/page/' + page + '/limit/' + limit;\n        if (house_id && house_id != 0) {\n          url += '/house_id/'+house_id;\n        }\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getMedicineConsumption(page = 1, limit = 10, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_medicine) + '/page/' + page + '/limit/' + limit;\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getStocks(page = 1, limit = 10, from?, to?, order?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_stocks) + '/page/' + page + '/limit/' + limit;\n        if (from && to) {\n          url += '/from/'+from+'/to/'+to;\n        }\n        if (order) {\n          url += '/order_by_column/'+order['order_by_column']+'/order_by/'+order['order_by'];\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getMedicineconsumption(page = 1, limit = 10, from?, to?, order?, month?, house_id?, med_id?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.performancereport_medicine) + '/page/' + page + '/limit/' + limit;\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        if (order) {\n          url += '/order_by_column/' + order['order_by_column'] + '/order_by/' + order['order_by'];\n        }\n        if (month){\n          url += '/month/' + month;\n        }\n        if (house_id) {\n          url += '/house_id/' + house_id;\n        }\n        if (med_id) {\n          url += '/med_id/' + med_id;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getAllmedicine() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.medicinemanage_getall);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          console.log('err2', err);\n          resolve({ error: 1, message: 'error' });\n        });\n      });\n    });\n  }\n  getAllList() {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.house_listing);\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getLocationwithhighestorders(from?, to?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.production_highestorders);\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n  getCreditBalance(from?, to?) {\n    return new Promise(resolve => {\n      this.env.getHttpOptions().then(httpOptions => {\n        let url = this.env.getUrl(urls.production_creditbalance);\n        if (from && to) {\n          url += '/from/' + from + '/to/' + to;\n        }\n        let request = this.http.get(url, httpOptions);\n        request.subscribe(result => {\n          resolve(result);\n        }, err => {\n          resolve({ error: 1, message: err });\n        });\n      });\n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { PerformanceReportService } from './../../../../services/performance-report/performance-report.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { HouseService } from './../../../../services/house/house.service';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  order: any,\n  visible_columns: any,\n  ths: any,\n  lineChartLabels: any,\n  charthousevalues: any\n};\n\n@Component({\n  selector: 'app-report-feeds-consumption',\n  templateUrl: './report-feeds-consumption.component.html',\n  styleUrls: ['./report-feeds-consumption.component.scss']\n})\nexport class ReportFeedsConsumptionComponent implements OnInit {\n\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        stacked: false,\n        scaleLabel: {\n          display: true,\n          labelString: 'Consumed feeds (grams)',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        stacked: false\n      }]\n    },\n    legend: {\n      position: 'top',\n      /* align: 'start',\n      labels: {\n        padding: 5\n      } */\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return 'Week ' + title[0].label;\n        },\n        label: function(item, data) {\n          let index = item.index;\n          let datasetIndex = item.datasetIndex;\n          let total = 0;\n          data.datasets.forEach(dset => {\n            total += Number(dset.data[index]);\n          });\n          let label = data.datasets[datasetIndex].label;\n          /* return \"a\"; */\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            return label;\n          }\n        },\n        footer: function(item, data) {\n          let piece: any = 0;\n          if (Number(item[0].value) != 0) {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            piece = parts.join(\".\");\n          }\n          return \"Consumed: \" + piece + \" g\";\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n        },\n      },\n    },\n  };\n  public lineChartLabels: Label[] = [];\n  public lineChartType: ChartType = 'line';\n  public lineChartLegend = true;\n  public lineChartPlugins = [pluginDataLabels];\n  public lineChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  house_options: any = [];\n  visible_columns: any = [];\n\n  ths: any = [];\n  overall_harvested_eggs: number = 0;\n\n  charthousevalues: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportFeedsConsumptionComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private houseService: HouseService,\n    private eggTypeService: EggTypeService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n  ) {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.order = this.data.order;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.lineChartLabels = this.data.lineChartLabels;\n    this.charthousevalues = this.data.charthousevalues;\n    /* this.getHouses(); */\n    this.getList();\n  }\n  async getList() {\n    await this.performanceReportService.getFeedConsumptionReport(this.page, this.limit, null, this.from, this.to, this.order).then(res => {\n      /* this.isLoaded = true; */\n      if (res['error'] == 0) {\n        this.totalItems = Number(res['total_count']);\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.isLoaded = true;\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.lineChartLabels = [];\n    this.lineChartData = [];\n    this.chartvalues = [];\n    this.charthousevalues.forEach(chv => {\n      chv.data.forEach((e, index) => {\n        chv.data[index] = 0;\n      });\n    });\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getFeedConsumptionReport(1, this.totalItems, null, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.lineChartLabels.push(data.age_week);\n          let index_of_date = this.lineChartLabels.indexOf(data.age_week);\n          this.charthousevalues.forEach(chv => {\n            if (chv.house_id == 'Recommended') {\n              chv.data[index_of_date] = data.rec_feed_consumption;\n              chv.backgroundColor = 'transparent';\n              chv.hoverBackgroundColor = 'transparent';\n            }\n            let findhome = data.house.find(x => x.id == chv.house_id);\n            if (findhome && findhome.daily_harvest_report) {\n              chv.data[index_of_date] = findhome.daily_harvest_report.sum;\n              let findIfVisible = this.ths.find(x => x.key == chv.house_id);\n              chv.hidden = !findIfVisible.isVisible;\n              chv.backgroundColor = 'transparent';\n              chv.hoverBackgroundColor = 'transparent';\n            }\n          });\n        });\n        this.lineChartData = this.charthousevalues;\n      } else {\n        this.lineChartData = this.charthousevalues;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.lineChartData = this.charthousevalues;\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Feed-Consumption-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../../services/egg-type/egg-type.service';\nimport { HouseService } from './../../../../../services/house/house.service';\nimport { PerformanceReportService } from './../../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportFeedsConsumptionComponent } from './../../../../../components/modals/reports/report-feeds-consumption/report-feeds-consumption.component';\nimport { AuthService } from './../../../../../services/auth/auth.service';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\n\n@Component({\n  selector: 'app-feeds',\n  templateUrl: './feeds.component.html',\n  styleUrls: ['./feeds.component.scss']\n})\nexport class FeedsComponent implements OnInit {\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        stacked: false,\n        scaleLabel: {\n          display: true,\n          labelString: 'Consumed feeds (grams)',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        stacked: false\n      }]\n    },\n    legend: {\n      position: 'top',\n      /* align: 'start',\n      labels: {\n        padding: 5\n      } */\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return 'Week ' + title[0].label;\n        },\n        label: function(item, data) {\n          let index = item.index;\n          let datasetIndex = item.datasetIndex;\n          console.log(\"datasetIndex\", datasetIndex);\n          let total = 0;\n          data.datasets.forEach(dset => {\n            total += Number(dset.data[index]);\n          });\n          let label = data.datasets[datasetIndex].label;\n          console.log(\"label\", label);\n          /* return \"a\"; */\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            return label;\n          }\n        },\n        footer: function(item, data) {\n          let piece: any = 0;\n          if (Number(item[0].value) != 0) {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            piece = parts.join(\".\");\n          }\n          return \"Consumed: \" + piece + \" g\";\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n        },\n      },\n    },\n  };\n  public lineChartLabels: Label[] = [];\n  public lineChartType: ChartType = 'line';\n  public lineChartLegend = true;\n  public lineChartPlugins = [pluginDataLabels];\n  public lineChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  house_options: any = [];\n  visible_columns: any = [];\n\n  ths: any = [];\n  overall_harvested_eggs: number = 0;\n\n  charthousevalues: any = [];\n\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private generalService: GeneralService,\n    private houseService: HouseService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n    private dialog: MatDialog\n  ) {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    /* this.loopDates(); */\n  }\n\n  /* loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.barChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n  } */\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getHouses();\n    this.getActivity('daily_reports_listing');\n    /* this.getRecord(); */\n  }\n  async getList() {\n    await this.performanceReportService.getFeedConsumptionReport(this.page, this.limit, null, this.from, this.to, this.order).then(res => {\n      /* this.isLoaded = true; */\n      if (res['error'] == 0) {\n        this.totalItems = Number(res['total_count']) + 1;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.isLoaded = true;\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.lineChartLabels = [];\n    this.lineChartData = [];\n    this.chartvalues = [];\n    this.charthousevalues.forEach(chv => {\n      chv.data.forEach((e, index) => {\n        chv.data[index] = 0;\n      });\n    });\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getFeedConsumptionReport(1, this.totalItems, null, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.lineChartLabels.push(data.age_week);\n          let index_of_date = this.lineChartLabels.indexOf(data.age_week);\n          this.charthousevalues.forEach(chv => {\n            if (chv.house_id == 'Recommended') {\n              chv.data[index_of_date] = data.rec_feed_consumption;\n              chv.backgroundColor = 'transparent';\n              chv.hoverBackgroundColor = 'transparent';\n            }\n            let findhome = data.house.find(x => x.id == chv.house_id);\n            if (findhome && findhome.daily_harvest_report) {\n              chv.data[index_of_date] = findhome.daily_harvest_report.sum;\n              let findIfVisible = this.ths.find(x => x.key == chv.house_id);\n              chv.hidden = !findIfVisible.isVisible;\n              chv.backgroundColor = 'transparent';\n              chv.hoverBackgroundColor = 'transparent';\n            }\n          });\n\n        });\n        this.lineChartData = this.charthousevalues;\n      } else {\n        this.lineChartData = this.charthousevalues;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.lineChartData = this.charthousevalues;\n    });\n  }\n  async getHouses() {\n    await this.houseService.getAllList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.house_options.push(data);\n          this.ths.push({\n            label: 'House/Bldg no. ' + data.house_name,\n            key: data.id,\n            canSort: false,\n            isVisible: true,\n            canToggle: true\n          });\n          /* this.visible_columns.push(data.id); */\n        });\n\n        this.charthousevalues.push({\n          data: [],\n          house_id: 'Recommended',\n          label: 'Recommended'\n          /* backgroundColor: '#FFC575',\n          hoverBackgroundColor: '#FFB247', */\n        });\n        this.lineChartLabels.forEach(() => {\n          this.charthousevalues[0].data.push(0);\n        });\n        this.ths.forEach((data, index) => {\n          this.visible_columns.push(index);\n          /* this.chartvalues.push(0); */\n          this.charthousevalues.push({\n            data: [],\n            house_id: data.key,\n            label: data.label,\n            /* backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247', */\n          });\n          this.lineChartLabels.forEach(() => {\n            this.charthousevalues[index].data.push(0);\n          });\n        });\n\n        this.getList();\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async clearFilters() {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  async changeColumnVisibility(e) {\n    console.log(\"e\", e);\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n      /* this.barChartData[index].hidden = true;\n      console.log(\"this.barChartData[index]\", this.barChartData[index]); */\n    });\n    this.getGraph();\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportFeedsConsumptionComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        visible_columns: this.visible_columns,\n        ths: this.ths,\n        lineChartLabels: this.lineChartLabels,\n        charthousevalues: this.charthousevalues\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { PerformanceReportService } from './../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { Label } from 'ng2-charts';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  order: any,\n  ths: any,\n  visible_columns: any,\n  med_id: any,\n  barChartLabels: any,\n  charthousevalues: any\n};\n\n@Component({\n  selector: 'app-report-medicine',\n  templateUrl: './report-medicine.component.html',\n  styleUrls: ['./report-medicine.component.scss']\n})\nexport class ReportMedicineComponent implements OnInit {\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        stacked: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Total Consumed',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        stacked: true\n      }]\n    },\n    legend: {\n      position: 'top',\n      /* align: 'start',\n      labels: {\n        padding: 5\n      } */\n    },\n    tooltips: {\n      callbacks: {\n        /* title: (title, data) => {\n          return null;\n        }, */\n        label: function(item, data) {\n          let index = item.index;\n          let datasetIndex = item.datasetIndex;\n          let total = 0;\n          data.datasets.forEach(dset => {\n            total += Number(dset.data[index]);\n          });\n          let label = data.datasets[datasetIndex].label;\n          /* return \"a\"; */\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            return label;\n          }\n        },\n        footer: function(item, data) {\n          let index = item[0].index;\n          let overall: any = 0;\n          data.datasets.forEach(dset => {\n            if (!dset.hidden) {\n              overall += Number(dset.data[index]);\n            }\n          });\n\n          let piece: any = 0;\n          if (Number(item[0].value) != 0) {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            piece = parts.join(\".\");\n          }\n          let parts = overall.toString().split(\".\");\n          parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          return \"Total: \" + piece + \" ml\\nOverall: \" + parts.join(\".\") + \" ml\";\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n\n  ths: any = [];\n  visible_columns: any = [];\n\n  totalItems: number = 0;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  items: any = [];\n  max_date: any = new Date();\n  medicines: any = [];\n  houses: any = [];\n  med_id: any;\n  house_id: any;\n  month: any;\n  \n  created_at: any = [];\n\n  activity: any = [];\n\n  charthousevalues: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportMedicineComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private exportAsService: ExportAsService,\n    private performanceReportService: PerformanceReportService,\n    private datePipe: DatePipe\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n   }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.order = this.data.order;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.med_id = this.data.med_id;\n    this.barChartLabels = this.data.barChartLabels;\n    this.charthousevalues = this.data.charthousevalues;\n    this.getList();\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.barChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      /* this.chartvalues.push(0); */\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n    this.getList();\n  }\n  async getList() {\n    await this.performanceReportService.getMedicineconsumption(this.page, this.limit, this.from, this.to, this.order, this.month ,this.house_id, this.med_id).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.barChartData = [];\n    this.chartvalues = [];\n    this.charthousevalues.forEach(chv => {\n      chv.data.forEach((e, index) => {\n        chv.data[index] = 0;\n      });\n    });\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getMedicineconsumption(1, this.limit, this.from, this.to, this.order, this.month ,this.house_id, this.med_id).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          console.log(\"datad\", data);\n          let index_of_date = this.barChartLabels.indexOf(this.datePipe.transform(new Date(data.date), 'MM/dd'));\n          console.log(\"index_of_date\", index_of_date);\n          this.charthousevalues.forEach(chv => {\n            console.log(\"chv\", chv);\n            let findhome = data.house.find(x => x.id == chv.house_id);\n            if (findhome/*  && findhome.medicine_volume */) {\n              chv.data[index_of_date] = findhome.medicine_volume;\n              let findIfVisible = this.ths.find(x => x.key == chv.house_id);\n              chv.hidden = !findIfVisible.isVisible;\n            }\n          });\n        });\n        console.log(\"this.charthousevalues\", this.charthousevalues);\n        this.barChartData = this.charthousevalues;\n      } else {\n        this.barChartData = this.charthousevalues;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = this.charthousevalues;\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Medicine-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PerformanceReportService } from './../../../../../services/performance-report/performance-report.service';\nimport { AuthService } from './../../../../../services/auth/auth.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { Label } from 'ng2-charts';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportMedicineComponent } from './../../../../../components/modals/reports/report-medicine/report-medicine.component';\n\n@Component({\n  selector: 'app-medicine',\n  templateUrl: './medicine.component.html',\n  styleUrls: ['./medicine.component.scss']\n})\nexport class MedicineComponent implements OnInit {\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        stacked: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Total Consumed',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        stacked: true\n      }]\n    },\n    legend: {\n      position: 'top',\n      /* align: 'start',\n      labels: {\n        padding: 5\n      } */\n    },\n    tooltips: {\n      callbacks: {\n        /* title: (title, data) => {\n          return null;\n        }, */\n        label: function(item, data) {\n          let index = item.index;\n          let datasetIndex = item.datasetIndex;\n          let total = 0;\n          data.datasets.forEach(dset => {\n            total += Number(dset.data[index]);\n          });\n          let label = data.datasets[datasetIndex].label;\n          /* return \"a\"; */\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            return label;\n          }\n        },\n        footer: function(item, data) {\n          let index = item[0].index;\n          let overall: any = 0;\n          data.datasets.forEach(dset => {\n            if (!dset.hidden) {\n              overall += Number(dset.data[index]);\n            }\n          });\n\n          let piece: any = 0;\n          if (Number(item[0].value) != 0) {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            piece = parts.join(\".\");\n          }\n          let parts = overall.toString().split(\".\");\n          parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          return \"Total: \" + piece + \" ml\\nOverall: \" + parts.join(\".\") + \" ml\";\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n\n  ths: any = [];\n  visible_columns: any = [];\n\n  totalItems: number = 0;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  items: any = [];\n  max_date: any = new Date();\n  medicines: any = [];\n  houses: any = [];\n  med_id: any;\n  house_id: any;\n  month: any;\n  \n  created_at: any = [];\n\n  activity: any = [];\n\n  charthousevalues: any = [];\n\n  constructor(\n    private auth: AuthService,\n    private performanceReportService: PerformanceReportService,\n    private datePipe: DatePipe,\n    private dialog: MatDialog\n  ) { \n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.loopDates();\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.barChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      /* this.chartvalues.push(0); */\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n  }\n  ngOnInit() {\n    this.auth.validateUserRole();\n    /* this.getList(); */\n    this.getAllmedicines();\n    this.getAllhouse();\n  }\n\n  async getList() {\n    await this.performanceReportService.getMedicineconsumption(this.page, this.limit, this.from, this.to, this.order, this.month ,this.house_id, this.med_id).then(res => {\n      console.log(\"medicineConsumption\", res);\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.barChartData = [];\n    this.chartvalues = [];\n    this.charthousevalues.forEach(chv => {\n      chv.data.forEach((e, index) => {\n        chv.data[index] = 0;\n      });\n    });\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getMedicineconsumption(1, this.totalItems, this.from, this.to, this.order, this.month ,this.house_id, this.med_id).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          console.log(\"datad\", data);\n          let index_of_date = this.barChartLabels.indexOf(this.datePipe.transform(new Date(data.date), 'MM/dd'));\n          console.log(\"index_of_date\", index_of_date);\n          this.charthousevalues.forEach(chv => {\n            console.log(\"chv\", chv);\n            let findhome = data.house.find(x => x.id == chv.house_id);\n            if (findhome/*  && findhome.medicine_volume */) {\n              chv.data[index_of_date] = findhome.medicine_volume;\n              let findIfVisible = this.ths.find(x => x.key == chv.house_id);\n              chv.hidden = !findIfVisible.isVisible;\n            }\n          });\n        });\n        console.log(\"this.charthousevalues\", this.charthousevalues);\n        this.barChartData = this.charthousevalues;\n      } else {\n        this.barChartData = this.charthousevalues;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = this.charthousevalues;\n    });\n  }\n    counter(i: number) {\n    return new Array(i);\n  }\n  async getAllmedicines() {\n    await this.performanceReportService.getAllmedicine().then(res => {\n      console.log('medicines', res);\n      if (res['error'] == 0) {\n        res['data'].forEach(data => {\n          this.medicines.push(data);\n        });\n      } else {\n        this.medicines = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  async getAllhouse() {\n    await this.performanceReportService.getAllList().then(res => {\n      console.log('houses', res);\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.houses.push(data);\n          this.ths.push({\n            label: 'House/Bldg no. ' + data.house_name,\n            key: data.id,\n            canSort: false,\n            isVisible: true,\n            canToggle: true\n          }); \n        });\n        this.ths.forEach((data, index) => {\n          this.visible_columns.push(index);\n          this.charthousevalues.push({\n            data: [],\n            house_id: data.key,\n            label: data.label,\n            /* backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247', */\n          });\n          this.barChartLabels.forEach(() => {\n            this.charthousevalues[index].data.push(0);\n          });\n        });\n      } else {\n        this.houses = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getList();\n  }\n  async changeHouse(e){\n    this.isLoaded = false;\n    this.houses = [];\n    await this.getAllhouse();\n  }\n  selectMed(id){\n    this.med_id = id;\n    this.items = [];\n    this.getList();\n  }\n  selectHouse(e){\n    this.items = [];\n    this.getList();\n  }\n  async changeColumnVisibility(e) {\n    console.log(\"e\", e);\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    this.getGraph();\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.barChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  async clearFilters() {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.barChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  downloadModal() {\n    let dialog = this.dialog.open(ReportMedicineComponent, {\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        ths: this.ths,\n        visible_columns: this.visible_columns,\n        med_id: this.med_id,\n        barChartLabels: this.barChartLabels,\n        charthousevalues: this.charthousevalues\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n\n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { PerformanceReportService } from './../../../../services/performance-report/performance-report.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  visible_columns: any,\n  ths: any,\n  house_id: number,\n  items: any,\n  barChartLabels: any,\n  barChartData: any,\n  overall_harvested_eggs: number\n};\n\n@Component({\n  selector: 'app-report-production-by-egg-size',\n  templateUrl: './report-production-by-egg-size.component.html',\n  styleUrls: ['./report-production-by-egg-size.component.scss']\n})\nexport class ReportProductionByEggSizeComponent implements OnInit {\n\n  page: number = 1;\n  limit: number;\n  from: any;\n  to: any;\n  visible_columns: any = [];\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total quantity of eggs',\n          fontSize: 14,\n          lineHeight: 4,\n          fontColor: '#72787F'\n        },\n        ticks: {\n           min: 0,\n           fontSize: 12,\n           fontColor: '#72787F',\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          fontSize: 12,\n          fontColor: '#72787F',\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n          return \"Size: \" + title[0].label;\n        },\n        label: function(item, data) {\n          return \"Size: \" + item.label;\n          /* console.log(\"item\", item);\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            let parts = item.value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' pcs';\n          } */\n        },\n        footer: function(item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Quantity: \" + parts.join(\".\") + ' pcs';\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#FFF',\n        formatter: (value, ctx) => {\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix;\n        },\n      },\n    }\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = false;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  egg_type_options: any = [];\n\n  house_options: any = [];\n  selected_house: any = [];\n\n  ths: any = [];\n  overall_harvested_eggs: number = 0;\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n  house_id: number;\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportProductionByEggSizeComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n  ) {\n\n  }\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.house_id = this.data.house_id;\n    this.barChartLabels = this.data.barChartLabels;\n    this.barChartData = this.data.barChartData;\n    this.overall_harvested_eggs = this.data.overall_harvested_eggs;\n    this.getEggTypeList();\n  }\n  async getEggTypeList() {\n    await this.eggTypeService.getList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach((data, index) => {\n          this.egg_type_options.push(data);\n        });\n        this.ths.forEach((data, index) => {\n          this.visible_columns.push(index);\n        });\n        this.getList();\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async getList() {\n    await this.performanceReportService.getProductionEggSize(this.page, this.limit, this.house_id, this.from, this.to, this.order).then(res => {\n      if (res['error'] == 0) {\n        this.isLoaded = true;\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.isLoaded = true;\n        this.items = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Production-By-Egg-Size-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.text('Page ' + i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 100, pdf.internal.pageSize.getHeight() - 30);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../../services/egg-type/egg-type.service';\nimport { HouseService } from './../../../../../services/house/house.service';\nimport { PerformanceReportService } from './../../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportProductionByEggSizeComponent } from './../../../../../components/modals/reports/report-production-by-egg-size/report-production-by-egg-size.component';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-production-by-egg-size',\n  templateUrl: './production-by-egg-size.component.html',\n  styleUrls: ['./production-by-egg-size.component.scss']\n})\nexport class ProductionByEggSizeComponent implements OnInit {\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total quantity of eggs',\n          fontSize: 14,\n          lineHeight: 4,\n          fontColor: '#72787F',\n        },\n        ticks: {\n           min: 0,\n           fontSize: 12,\n           fontColor: '#72787F',\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          fontSize: 12,\n          fontColor: '#72787F',\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n          return \"Size: \" + title[0].label;\n        },\n        label: function(item, data) {\n          return \"Size: \" + item.label;\n          /* console.log(\"item\", item);\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            let parts = item.value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' pcs';\n          } */\n        },\n        footer: function(item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Quantity: \" + parts.join(\".\") + ' pcs';\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#FFF',\n        /* formatter: (value, ctx) => {\n          if (value == 0) {\n            return null;\n          } else {\n            let parts = value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\");\n          }\n        }, */\n        formatter: (value, ctx) => {\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix;\n        },\n      },\n    }\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = false;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  egg_type_options: any = [];\n  visible_columns: any = [];\n\n  house_options: any = [];\n\n  ths: any = [];\n  overall_harvested_eggs: number = 0;\n\n  house_id: number;\n\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private generalService: GeneralService,\n    private houseService: HouseService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private dialog: MatDialog\n  ) {\n    /* get first day of month, get current date of month */\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(dateToday), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getEggTypeList();\n    this.getHouses();\n    this.getActivity('daily_sorting_reports_listing');\n  }\n  async getEggTypeList() {\n    await this.eggTypeService.getList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach((data, index) => {\n          this.egg_type_options.push(data);\n          this.ths.push({\n            label: data.type,\n            id: data.id,\n            key: 'type_shortcode',\n            canSort: false,\n            isVisible: true,\n            canToggle: true\n          });\n        });\n        this.ths.forEach((data, index) => {\n          this.visible_columns.push(index);\n        });\n        this.getList();\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async getList() {\n    await this.performanceReportService.getProductionEggSize(this.page, this.limit, this.house_id, this.from, this.to, this.order).then(res => {\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.chartvalues = [];\n    this.chartlabels = [];\n    this.barChartLabels = [];\n    this.overall_harvested_eggs = 0;\n    let filter = this.ths.filter(a => a.isVisible == true);\n    await filter.forEach((data, index) => {\n        this.chartvalues.push(0);\n        let egg = this.egg_type_options.find(e => e.id == Number(data.id));\n        this.chartlabels.push(egg['type']);\n        this.barChartLabels.push(egg['type_shortcode']);\n    });\n    this.barChartData = [];\n    await this.performanceReportService.getProductionEggSize(1, this.totalItems > 1 ? this.totalItems : this.limit, this.house_id, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          data.daily_sorting_inventory.forEach((data, index) => {\n            let find = this.ths.find(a => a.id == data.type_id);\n            if (find.isVisible) {\n              let index_of_find = filter.indexOf(find);\n              this.chartvalues[index_of_find] += Number(data.sum);\n              this.overall_harvested_eggs += Number(data.sum);\n            }\n          });\n        });\n        this.barChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Qty',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  \n  async getHouses() {\n    await this.houseService.getAllList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.house_options.push(data);\n        });\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    /* if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    } */\n    console.log(\"column count\", this.visible_columns.length);\n    this.getGraph();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async clearFilters() {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.house_id = null;\n    await this.getList();\n  }\n  async houseSelected(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportProductionByEggSizeComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        visible_columns: this.visible_columns,\n        ths: this.ths,\n        house_id: this.house_id,\n        items: this.items,\n        barChartLabels: this.barChartLabels,\n        barChartData: this.barChartData,\n        overall_harvested_eggs: this.overall_harvested_eggs\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { PerformanceReportService } from './../../../../services/performance-report/performance-report.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { HouseService } from './../../../../services/house/house.service';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  order: any,\n  visible_columns: any,\n  ths: any,\n  barChartLabels: any,\n  charthousevalues: any\n};\n\n@Component({\n  selector: 'app-report-production-per-house',\n  templateUrl: './report-production-per-house.component.html',\n  styleUrls: ['./report-production-per-house.component.scss']\n})\nexport class ReportProductionPerHouseComponent implements OnInit {\n\n  page: number = 1;\n  limit: number;\n  from: any;\n  to: any;\n  visible_columns: any = [];\n  \n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        stacked: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Total no. of eggs harvested',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e',\n          fontStyle: 'bold'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n           /* stepSize: 1000 */\n        }\n      }],\n      xAxes: [{\n        stacked: true\n      }]\n    },\n    legend: {\n      position: 'top',\n      /* align: 'start',\n      labels: {\n        padding: 5\n      } */\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function(item, data) {\n          let index = item.index;\n          /* console.log(\"index\", index); */\n          let datasetIndex = item.datasetIndex;\n          /* console.log(\"datasetIndex\", datasetIndex); */\n          let total = 0;\n          data.datasets.forEach(dset => {\n            /* console.log('dset', dset.data[index]); */\n            total += Number(dset.data[index]);\n          });\n          let label = data.datasets[datasetIndex].label;\n          /* return \"a\"; */\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            return label;\n          }\n        },\n        footer: function(item, data) {\n          let index = item[0].index;\n          let overall: any = 0;\n          data.datasets.forEach(dset => {\n            console.log('dset', dset);\n            if (!dset.hidden) {\n              overall += Number(dset.data[index]);\n            }\n          });\n\n          let piece: any = 0;\n          if (Number(item[0].value) != 0) {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            piece = parts.join(\".\");\n          }\n          let parts = overall.toString().split(\".\");\n          parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          return \"Total: \" + piece + \" pcs\\nOverall: \" + parts.join(\".\") + \" pcs\";\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  house_options: any = [];\n\n  ths: any = [];\n  overall_harvested_eggs: number = 0;\n\n  charthousevalues: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportProductionPerHouseComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private houseService: HouseService,\n    private eggTypeService: EggTypeService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.order = this.data.order;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.barChartLabels = this.data.barChartLabels;\n    this.charthousevalues = this.data.charthousevalues;\n    /* this.loopDates(); */\n    this.getList();\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.barChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      /* this.chartvalues.push(0); */\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n    this.getList();\n  }\n  async getList() {\n    await this.performanceReportService.getProductionHouse(this.page, this.limit, null, this.from, this.to, this.order).then(res => {\n      /* this.isLoaded = true; */\n      if (res['error'] == 0) {\n        this.totalItems = Number(res['total_count']) + 1;\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.isLoaded = true;\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.barChartData = [];\n    this.chartvalues = [];\n    this.charthousevalues.forEach(chv => {\n      chv.data.forEach((e, index) => {\n        chv.data[index] = 0;\n      });\n    });\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getProductionHouse(1, this.totalItems, null, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          let index_of_date = this.barChartLabels.indexOf(this.datePipe.transform(new Date(data.grouped_date), 'MM/dd'));\n          this.charthousevalues.forEach(chv => {\n            let findhome = data.house.find(x => x.id == chv.house_id);\n            if (findhome && findhome.daily_sorting_report) {\n              chv.data[index_of_date] = findhome.daily_sorting_report.sum;\n              let findIfVisible = this.ths.find(x => x.key == chv.house_id);\n              chv.hidden = !findIfVisible.isVisible;\n            }\n          });\n        });\n        this.barChartData = this.charthousevalues;\n      } else {\n        this.barChartData = this.charthousevalues;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = this.charthousevalues;\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Production-Per-House-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../../services/egg-type/egg-type.service';\nimport { HouseService } from './../../../../../services/house/house.service';\nimport { PerformanceReportService } from './../../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportProductionPerHouseComponent } from './../../../../../components/modals/reports/report-production-per-house/report-production-per-house.component';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-production-per-house',\n  templateUrl: './production-per-house.component.html',\n  styleUrls: ['./production-per-house.component.scss']\n})\nexport class ProductionPerHouseComponent implements OnInit {\n  \n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        stacked: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Total no. of eggs harvested',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           fontSize: 12,\n           fontColor: '#72787F',\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        stacked: true,\n        ticks: {\n          fontSize: 12,\n          fontColor: '#72787F',\n        }\n      }]\n    },\n    legend: {\n      position: 'top',\n      /* align: 'start',\n      labels: {\n        padding: 5\n      } */\n    },\n    tooltips: {\n      callbacks: {\n        /* title: (title, data) => {\n          return null;\n        }, */\n        label: function(item, data) {\n          let index = item.index;\n          let datasetIndex = item.datasetIndex;\n          let total = 0;\n          data.datasets.forEach(dset => {\n            total += Number(dset.data[index]);\n          });\n          let label = data.datasets[datasetIndex].label;\n          /* return \"a\"; */\n          if (Number(item.value) == 0) {\n            return null;\n          } else {\n            return label;\n          }\n        },\n        footer: function(item, data) {\n          let index = item[0].index;\n          let overall: any = 0;\n          data.datasets.forEach(dset => {\n            if (!dset.hidden) {\n              overall += Number(dset.data[index]);\n            }\n          });\n\n          let piece: any = 0;\n          if (Number(item[0].value) != 0) {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            piece = parts.join(\".\");\n          }\n          let parts = overall.toString().split(\".\");\n          parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          return \"Total: \" + piece + \" pcs\\nOverall: \" + parts.join(\".\") + \" pcs\";\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  house_options: any = [];\n  visible_columns: any = [];\n\n  ths: any = [];\n  overall_harvested_eggs: number = 0;\n\n  charthousevalues: any = [];\n\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private generalService: GeneralService,\n    private houseService: HouseService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n    private dialog: MatDialog\n  ) {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.loopDates();\n  }\n\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.barChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      /* this.chartvalues.push(0); */\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getHouses();\n    this.getActivity('daily_sorting_reports_listing');\n    /* this.getRecord(); */\n  }\n  async getList() {\n    await this.performanceReportService.getProductionHouse(this.page, this.limit, null, this.from, this.to, this.order).then(res => {\n      /* this.isLoaded = true; */\n      if (res['error'] == 0) {\n        this.totalItems = Number(res['total_count']) + 1;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.isLoaded = true;\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.barChartData = [];\n    this.chartvalues = [];\n    this.charthousevalues.forEach(chv => {\n      chv.data.forEach((e, index) => {\n        chv.data[index] = 0;\n      });\n    });\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getProductionHouse(1, this.totalItems, null, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          let index_of_date = this.barChartLabels.indexOf(this.datePipe.transform(new Date(data.grouped_date), 'MM/dd'));\n          this.charthousevalues.forEach(chv => {\n            let findhome = data.house.find(x => x.id == chv.house_id);\n            if (findhome && findhome.daily_sorting_report) {\n              chv.data[index_of_date] = findhome.daily_sorting_report.sum;\n              let findIfVisible = this.ths.find(x => x.key == chv.house_id);\n              chv.hidden = !findIfVisible.isVisible;\n            }\n          });\n        });\n        this.barChartData = this.charthousevalues;\n      } else {\n        this.barChartData = this.charthousevalues;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = this.charthousevalues;\n    });\n  }\n  async getHouses() {\n    await this.houseService.getAllList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.house_options.push(data);\n          this.ths.push({\n            label: 'House/Bldg no. ' + data.house_name,\n            key: data.id,\n            canSort: false,\n            isVisible: true,\n            canToggle: true\n          });\n          /* this.visible_columns.push(data.id); */\n        });\n        this.ths.forEach((data, index) => {\n          this.visible_columns.push(index);\n          /* this.chartvalues.push(0); */\n          this.charthousevalues.push({\n            data: [],\n            house_id: data.key,\n            label: data.label,\n            /* backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247', */\n          });\n          this.barChartLabels.forEach(() => {\n            this.charthousevalues[index].data.push(0);\n          });\n        });\n        this.getList();\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.barChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async clearFilters() {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.barChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  async changeColumnVisibility(e) {\n    console.log(\"e\", e);\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n      /* this.barChartData[index].hidden = true;\n      console.log(\"this.barChartData[index]\", this.barChartData[index]); */\n    });\n    this.getGraph();\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportProductionPerHouseComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        visible_columns: this.visible_columns,\n        ths: this.ths,\n        barChartLabels: this.barChartLabels,\n        charthousevalues: this.charthousevalues\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Transaction Date and Time',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Sales',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../datatables/performance-report/sales/overall-sales/overall-sales';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { PerformanceReportService } from './../../../../services/performance-report/performance-report.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  visible_columns: any,\n  ths: any\n};\n\n@Component({\n  selector: 'app-report-overall-sales',\n  templateUrl: './report-overall-sales.component.html',\n  styleUrls: ['./report-overall-sales.component.scss']\n})\nexport class ReportOverallSalesComponent implements OnInit {\n  \n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total amount of sales',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n          min: 0,\n          beginAtZero: true,\n          callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n           /* callback: function(value, index, values) {\n            if(parseInt(value) >= 1000){\n              return '₱ ' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            } else {\n              return '₱ ' + value;\n            }\n          } */\n           /* stepSize: 1000 */\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          min: 0,\n          beginAtZero: true\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function (tooltipItem, data) {\n          return tooltipItem.label/* this.datePipe.transform(new Date(tooltipItem.label), 'MMM dd') */;\n        },\n        footer: function(item, data) {\n          console.log(\"item\", item);\n          console.log(\"data\", data);\n          if (parseInt(item[0].value) >= 1000){\n            return 'Sales: ₱ ' + item[0].value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          } else {\n            return 'Sales: ₱ ' + item[0].value;\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#05172e',\n        formatter: (value, ctx) => {\n          if (value == 0) {\n            return '';\n          }\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix;\n        },\n      },\n    }\n    /* animation: {\n      onComplete: function () {\n        var chartInstance = this.chart,\n        ctx = chartInstance.ctx;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'bottom';\n        this.data.datasets.forEach(function (dataset, i) {\n            var meta = chartInstance.controller.getDatasetMeta(i);\n            meta.data.forEach(function (bar, index) {\n                var data = dataset.data[index];\n                ctx.fillText(data, bar._model.x, bar._model.y - 5);\n            });\n        });\n      }\n    } */\n  };\n  public lineChartLabels: Label[] = [];\n  public lineChartType: ChartType = 'line';\n  public lineChartLegend = false;\n  public lineChartPlugins = [pluginDataLabels];\n  public lineChartData: ChartDataSets[] = [];\n  chartvalues: any = [];\n  chartlabels: any = [];\n  overall_value: number = 0;\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  item: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportOverallSalesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.loopDates();\n    /* this.getList(); */\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.lineChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      this.chartvalues.push(null);\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n    this.getList();\n  }\n  async getList() {\n    await this.performanceReportService.getOverallSales(this.page, this.limit, this.from, this.to, this.order).then(res => {\n      if (res['error'] == 0) {\n        this.totalItems = res['datas'].length;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        this.item = res['data'];\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    /* this.chartvalues = [];\n    this.chartlabels = [];\n    this.lineChartLabels = []; */\n    this.overall_value = 0;\n    this.lineChartData = [];\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getOverallSales(1, this.totalItems, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          let getIndex = this.lineChartLabels.indexOf(this.datePipe.transform(new Date(data.date), 'MM/dd'));\n          this.chartvalues[getIndex] = Number(data.total);\n          this.overall_value += Number(data.total);\n          /* this.chartlabels.push(this.datePipe.transform(new Date(data.date), 'MM/dd/yy'));\n          this.lineChartLabels.push(this.datePipe.transform(new Date(data.date), 'MM/dd/yy'));\n          this.chartvalues.push(Number(data.total));\n          this.overall_value += Number(data.total); */\n        });\n        let getMax = Math.max.apply(Math, this.chartvalues);\n        let max = getMax / Number(this.visible_columns.length);\n        /* this.lineChartOptions.scales.yAxes[0].ticks.max = getMax + max; */\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Sales',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n          }\n        ];\n        console.log(this.lineChartData);\n      } else {\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Sales',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.lineChartData = [\n        {\n          data: this.chartvalues,\n          label: 'Sales',\n          borderColor: '#FF9F1A',\n          backgroundColor: 'transparent',\n          hoverBackgroundColor: 'transparent',\n        }\n      ];\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Sales-Overall-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/performance-report/sales/overall-sales/overall-sales';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../../services/egg-type/egg-type.service';\nimport { HouseService } from './../../../../../services/house/house.service';\nimport { PerformanceReportService } from './../../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportOverallSalesComponent } from './../../../../../components/modals/reports/report-overall-sales/report-overall-sales.component';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-overall-sales',\n  templateUrl: './overall-sales.component.html',\n  styleUrls: ['./overall-sales.component.scss']\n})\nexport class OverallSalesComponent implements OnInit {\n\n  /* chart */\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    spanGaps: true,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total amount of sales',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n          min: 0,\n          callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n           /* callback: function(value, index, values) {\n            if(parseInt(value) >= 1000){\n              return '₱ ' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            } else {\n              return '₱ ' + value;\n            }\n          } */\n           /* stepSize: 1000 */\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function (tooltipItem, data) {\n          return tooltipItem.label/* this.datePipe.transform(new Date(tooltipItem.label), 'MMM dd') */;\n        },\n        footer: function(item, data) {\n          console.log(\"item\", item);\n          console.log(\"data\", data);\n          if (parseInt(item[0].value) >= 1000){\n            return 'Sales: ₱ ' + item[0].value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          } else {\n            return 'Sales: ₱ ' + item[0].value;\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#05172e',\n        formatter: (value, ctx) => {\n          if (value == 0) {\n            return '';\n          }\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix;\n        },\n      },\n    }\n    /* animation: {\n      onComplete: function () {\n        var chartInstance = this.chart,\n        ctx = chartInstance.ctx;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'bottom';\n        this.data.datasets.forEach(function (dataset, i) {\n            var meta = chartInstance.controller.getDatasetMeta(i);\n            meta.data.forEach(function (bar, index) {\n                var data = dataset.data[index];\n                ctx.fillText(data, bar._model.x, bar._model.y - 5);\n            });\n        });\n      }\n    } */\n  };\n  public lineChartLabels: Label[] = [];\n  public lineChartType: ChartType = 'line';\n  public lineChartLegend = false;\n  public lineChartPlugins = [pluginDataLabels];\n  public lineChartData: ChartDataSets[] = [];\n  chartvalues: any = [];\n  overall_value: number = 0;\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  item: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  constructor(\n    private auth: AuthService,\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private generalService: GeneralService,\n    private performanceReportService: PerformanceReportService,\n  ) {\n    /* get first day of month, get current date of month */\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.loopDates();\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.lineChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      this.chartvalues.push(null);\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getList();\n    this.getActivity('transactions_listing');\n  }\n  async getList() {\n    await this.performanceReportService.getOverallSales(this.page, this.limit, this.from, this.to, this.order).then(res => {\n      console.log('Overallsales',res);\n      if (res['error'] == 0) {\n        this.totalItems = res['datas'].length;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        this.item = res['data'];\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    /* this.chartvalues = []; */\n    /* this.chartlabels = []; */\n    /* this.lineChartLabels = []; */\n    this.overall_value = 0;\n    this.lineChartData = [];\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getOverallSales(1, this.totalItems, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          console.log('total data', data.total);\n          let getIndex = this.lineChartLabels.indexOf(this.datePipe.transform(new Date(data.date), 'MM/dd'));\n          /* this.chartlabels.push(this.datePipe.transform(new Date(data.date), 'MM/dd/yy'));\n          this.lineChartLabels.push(this.datePipe.transform(new Date(data.date), 'MM/dd/yy')); */\n          this.chartvalues[getIndex] = Number(data.total);\n          /* this.chartvalues.push(Number(data.total)); */\n          this.overall_value += Number(data.total);\n        });\n        let getMax = Math.max.apply(Math, this.chartvalues);\n        let max = getMax / Number(this.visible_columns.length);\n        /* this.lineChartOptions.scales.yAxes[0].ticks.max = getMax + max; */\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Sales',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n          }\n        ];\n        console.log(this.lineChartData);\n      } else {\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Sales',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.lineChartData = [\n        {\n          data: this.chartvalues,\n          label: 'Sales',\n          borderColor: '#FF9F1A',\n          backgroundColor: 'transparent',\n          hoverBackgroundColor: 'transparent',\n        }\n      ];\n    });\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.item = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.lineChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    /* if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    } */\n    /* this.getGraph(); */\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.item = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async clearFilters() {\n    /* this.from = null;\n    this.to = null;\n    this.created_at = []; */\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.item = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.lineChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.item = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportOverallSalesComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        visible_columns: this.visible_columns,\n        ths: this.ths\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport { HouseService } from './../../../../services/house/house.service';\nimport { PerformanceReportService } from './../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportProductionByEggSizeComponent } from './../../../../components/modals/reports/report-production-by-egg-size/report-production-by-egg-size.component';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  from: any,\n  to: any,\n  order: any,\n  visible_columns: any,\n  ths: any,\n  egg_type_options: any\n};\n\n@Component({\n  selector: 'app-report-sales-egg',\n  templateUrl: './report-sales-egg.component.html',\n  styleUrls: ['./report-sales-egg.component.scss']\n})\nexport class ReportSalesEggComponent implements OnInit {\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total no. of sales',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function(item, data) {\n          return \"Size: \" + item.label;\n        },\n        footer: function(item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Qty: \" + parts.join(\".\");\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#FFF',\n        formatter: (value, ctx) => {\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix;\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = false;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  egg_type_options: any = [];\n  visible_columns: any = [];\n\n  house_options: any = [];\n  selected_house: any = [];\n\n  ths: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportSalesEggComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private generalService: GeneralService,\n    private houseService: HouseService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n    private dialog: MatDialog\n  ) { }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.egg_type_options = this.data.egg_type_options;\n    this.getList();\n  }\n  async getList() {\n    await this.performanceReportService.getSalesByEggSize(this.page, this.limit, this.from, this.to, this.order).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.chartvalues = [];\n    this.chartlabels = [];\n    this.barChartLabels = [];\n    let filter = this.ths.filter(a => a.isVisible == true);\n    await filter.forEach((data, index) => {\n        this.chartvalues.push(0);\n        let egg = this.egg_type_options.find(e => e.id == Number(data.id));\n        this.chartlabels.push(egg['type']);\n        this.barChartLabels.push(egg['type_shortcode']);\n    });\n    this.barChartData = [];\n    this.limit = this.limit == 1 ? 2 : this.limit;\n    await this.performanceReportService.getSalesByEggSize(1, this.limit, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          data.egg_types.forEach((data, index) => {\n            let find = this.ths.find(a => a.id == data.id);\n            if (find.isVisible) {\n              let index_of_find = filter.indexOf(find);\n              this.chartvalues[index_of_find] += Number(data.total);\n            }\n          });\n        });\n        this.barChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Qty',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      } else {\n        this.barChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Qty',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = [\n        {\n          data: this.chartvalues,\n          label: 'Qty',\n          backgroundColor: '#FF9F1A',\n          hoverBackgroundColor: '#FFB247',\n        }\n      ];\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Sales-By-Egg-Size-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../../services/egg-type/egg-type.service';\nimport { HouseService } from './../../../../../services/house/house.service';\nimport { PerformanceReportService } from './../../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportSalesEggComponent } from './../../../../../components/modals/reports/report-sales-egg/report-sales-egg.component';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-sales-by-egg-size',\n  templateUrl: './sales-by-egg-size.component.html',\n  styleUrls: ['./sales-by-egg-size.component.scss']\n})\nexport class SalesByEggSizeComponent implements OnInit {\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total no. of sales',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function(item, data) {\n          return \"Size: \" + item.label;\n        },\n        footer: function(item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Qty: \" + parts.join(\".\") + ' pcs';\n          }\n        }\n      }\n    },\n    legend: {\n      position: 'top',\n      align: 'start'\n    },\n    plugins: {\n      datalabels: {\n        color: \"#FFF\",\n        formatter: (value, ctx) => {\n          /* return null; */\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix;\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = false;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  public barsChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total Quantity',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n          min: 0,\n          callback: function (label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if (tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function (item, data) {\n          return item.label;\n        },\n        footer: function (item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Total Amount: \" + parts.join(\".\") + '';\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n          /* let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix; */\n        },\n      },\n    },\n  };\n  public barsChartLabels: Label[] = [];\n  public barsChartType: ChartType = 'bar';\n  public barsChartLegend = true;\n  public barsChartPlugins = [pluginDataLabels];\n  public barsChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  isLoaded: boolean = false;\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  egg_type_options: any = [];\n  visible_columns: any = [];\n\n  house_options: any = [];\n  selected_house: any = [];\n\n  ths: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-content',\n    options: {\n      filename: 'hey',\n      jsPDF: {\n        orientation: 'landscape',\n      },\n      margin: 20,\n      image: {\n        type: 'jpeg',\n        quality: 0.98\n      },\n      html2canvas:  { scale: 2 },\n      pdfCallbackFn: this.pdfCallbackFn // to add header and footer\n    }\n  };\n\n  highest_orders: any = [];\n  credit_balance: any = [];\n  chartvalues_balance: any = [];\n  chartvalues_credit: any = [];\n\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private generalService: GeneralService,\n    private houseService: HouseService,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n    private dialog: MatDialog\n  ) {\n    /* get first day of month, get current date of month */\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(dateToday), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getEggTypeList();\n    this.getHouses();\n    this.getActivity('daily_reports_listing');\n    this.getHighestorders();\n    this.getCreditbalance();\n  }\n  async getEggTypeList() {\n    await this.eggTypeService.getList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach((data, index) => {\n          this.egg_type_options.push(data);\n          this.ths.push({\n            label: data.type,\n            id: data.id,\n            key: 'type_shortcode',\n            canSort: false,\n            isVisible: true,\n            canToggle: true\n          });\n        });\n        this.ths.forEach((data, index) => {\n          this.visible_columns.push(index);\n        });\n        this.getList();\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async getList() {\n    await this.performanceReportService.getSalesByEggSize(this.page, this.limit, this.from, this.to, this.order).then(res => {\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.chartvalues = [];\n    this.chartlabels = [];\n    this.barChartLabels = [];\n    let filter = this.ths.filter(a => a.isVisible == true);\n    await filter.forEach((data, index) => {\n        this.chartvalues.push(0);\n        let egg = this.egg_type_options.find(e => e.id == Number(data.id));\n        this.chartlabels.push(egg['type']);\n        this.barChartLabels.push(egg['type_shortcode']);\n    });\n    this.barChartData = [];\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getSalesByEggSize(1, this.totalItems, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          data.egg_types.forEach((data, index) => {\n            let find = this.ths.find(a => a.id == data.id);\n            if (find.isVisible) {\n              let index_of_find = filter.indexOf(find);\n              this.chartvalues[index_of_find] += Number(data.total);\n            }\n          });\n        });\n        this.barChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Qty',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      } else {\n        this.barChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Qty',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = [\n        {\n          data: this.chartvalues,\n          label: 'Qty',\n          backgroundColor: '#FF9F1A',\n          hoverBackgroundColor: '#FFB247',\n        }\n      ];\n    });\n  }\n  \n  async getHouses() {\n    await this.houseService.getAllList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.house_options.push(data);\n          this.selected_house.push(data.id);\n        });\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.highest_orders = [];\n    this.credit_balance = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n    await this.getCreditbalance();\n    await this.getHighestorders();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    /* if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    } */\n    this.getGraph();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async clearFilters() {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Sales-By-Egg-Size-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n\n    });\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.text('Page ' + i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 100, pdf.internal.pageSize.getHeight() - 30);\n    }\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportSalesEggComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        visible_columns: this.visible_columns,\n        ths: this.ths,\n        order: this.order,\n        egg_type_options: this.egg_type_options\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async getHighestorders() {\n    await this.performanceReportService.getLocationwithhighestorders(this.from, this.to).then(res => {\n      this.isLoaded = true;\n      console.log('getHighestorders', res);\n      if (res['error'] == 0) {\n        res['data'].forEach(data => {\n          this.highest_orders.push(data);\n        });\n      } else {\n        this.highest_orders = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n  }\n  async getCreditbalance() {\n    this.barsChartData = [];\n    this.barsChartLabels = [];\n    await this.performanceReportService.getCreditBalance(this.from, this.to).then(res => {\n      console.log('getCreditbalance', res);\n      if (res['error'] == 0) {\n        res['data'].forEach(data => {\n          this.barsChartLabels.push('week: ' + data.week);\n          this.chartvalues_balance.push(data.balance);\n          this.chartvalues_credit.push(data.credit);\n        });\n        this.barsChartData = [\n          {\n            data: this.chartvalues_balance,\n            label: 'Balance',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          },\n          {\n            data: this.chartvalues_credit,\n            label: 'Credit',\n            backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      } else {\n        this.barsChartData = [\n          {\n            data: this.chartvalues_balance,\n            label: 'Balance',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          },\n          {\n            data: this.chartvalues_credit,\n            label: 'Credit',\n            backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barsChartData = [\n        {\n          data: this.chartvalues_balance,\n          label: 'Balance',\n          backgroundColor: '#FF9F1A',\n          hoverBackgroundColor: '#FFB247',\n        },\n        {\n          data: this.chartvalues_credit,\n          label: 'Credit',\n          backgroundColor: '#FFC575',\n          hoverBackgroundColor: '#FFB247',\n        }\n      ];\n    });\n  }\n}","export const datatable: any = [\n    {\n        label: 'Dates',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Inflow (Qty)',\n        key: 'egg_in',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Outflow (Qty)',\n        key: 'egg_out',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    },\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../datatables/performance-report/stocks/stocks';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { PerformanceReportService } from './../../../../services/performance-report/performance-report.service';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\n\nexport interface DialogData {\n  page: number;\n  limit: number;\n  from: any,\n  to: any,\n  visible_columns: any,\n  ths: any\n};\n\n@Component({\n  selector: 'app-report-stocks',\n  templateUrl: './report-stocks.component.html',\n  styleUrls: ['./report-stocks.component.scss']\n})\nexport class ReportStocksComponent implements OnInit {\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total no. of sales',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function(item, data) {\n          return item.label;\n        },\n        footer: function(item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Qty: \" + parts.join(\".\") + ' pcs';\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n          /* let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix; */\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = false;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues_in: any = [];\n  chartvalues_out: any = [];\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  item: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportStocksComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private datePipe: DatePipe,\n    private performanceReportService: PerformanceReportService,\n    private router: Router,\n    private exportAsService: ExportAsService,\n  ) { }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.visible_columns = this.data.visible_columns;\n    this.ths = this.data.ths;\n    this.loopDates();\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.barChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      this.chartvalues_in.push(0);\n      this.chartvalues_out.push(0);\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n    this.getList();\n  }\n  async getList() {\n    await this.performanceReportService.getStocks(this.page, this.limit, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['datas'].length;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        this.item = res['data'];\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.barChartData = [];\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getStocks(1, this.totalItems, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          let getIndex = this.barChartLabels.indexOf(this.datePipe.transform(new Date(data.created_at), 'MM/dd'));\n          this.chartvalues_in[getIndex] = Number(data.egg_in);\n          this.chartvalues_out[getIndex] = Number(data.egg_out);\n        });\n        this.barChartData = [\n          {\n            data: this.chartvalues_in,\n            label: 'Inflow',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          },\n          {\n            data: this.chartvalues_out,\n            label: 'Outflow',\n            backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      } else {\n        this.barChartData = [\n          {\n            data: this.chartvalues_in,\n            label: 'Inflow',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          },\n          {\n            data: this.chartvalues_out,\n            label: 'Outflow',\n            backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = [\n        {\n          data: this.chartvalues_in,\n          label: 'Inflow',\n          backgroundColor: '#FF9F1A',\n          hoverBackgroundColor: '#FFB247',\n        },\n        {\n          data: this.chartvalues_out,\n          label: 'Outflow',\n          backgroundColor: '#FFC575',\n          hoverBackgroundColor: '#FFB247',\n        }\n      ];\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Stock-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../../components/datatables/performance-report/stocks/stocks';\nimport { GeneralService } from './../../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../../services/egg-type/egg-type.service';\nimport { HouseService } from './../../../../../services/house/house.service';\nimport { PerformanceReportService } from './../../../../../services/performance-report/performance-report.service';\nimport { DatePipe } from '@angular/common';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { Router } from '@angular/router';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportStocksComponent } from './../../../../../components/modals/reports/report-stocks/report-stocks.component';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { AuthService } from './../../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-stocks-listing',\n  templateUrl: './stocks-listing.component.html',\n  styleUrls: ['./stocks-listing.component.scss']\n})\nexport class StocksListingComponent implements OnInit {\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Total no. of sales',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n           min: 0,\n           callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function(item, data) {\n          return item.label;\n        },\n        footer: function(item, data) {\n          if (Number(item[0].value) == 0) {\n            return null;\n          } else {\n            let parts = item[0].value.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return \"Qty: \" + parts.join(\".\") + ' pcs';\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        formatter: (value, ctx) => {\n          return null;\n          /* let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix; */\n        },\n      },\n    },\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [pluginDataLabels];\n  public barChartData: ChartDataSets[] = [];\n\n  chartvalues_in: any = [];\n  chartvalues_out: any = [];\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  visible_columns: any = [];\n\n  items: any = [];\n  item: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private generalService: GeneralService,\n    private performanceReportService: PerformanceReportService,\n    private dialog: MatDialog\n  ) {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.loopDates();\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.barChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      this.chartvalues_in.push(0);\n      this.chartvalues_out.push(0);\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getList();\n  }\n  async getList() {\n    await this.performanceReportService.getStocks(this.page, this.limit, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['datas'].length;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        this.item = res['data'];\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.barChartData = [];\n    this.totalItems = this.totalItems == 1 ? 2 : this.totalItems;\n    await this.performanceReportService.getStocks(1, this.totalItems, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          let getIndex = this.barChartLabels.indexOf(this.datePipe.transform(new Date(data.created_at), 'MM/dd'));\n          this.chartvalues_in[getIndex] = Number(data.egg_in);\n          this.chartvalues_out[getIndex] = Number(data.egg_out);\n        });\n        this.barChartData = [\n          {\n            data: this.chartvalues_in,\n            label: 'Inflow',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          },\n          {\n            data: this.chartvalues_out,\n            label: 'Outflow',\n            backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n        console.log(\"barchartdata\", this.barChartData);\n      } else {\n        this.barChartData = [\n          {\n            data: this.chartvalues_in,\n            label: 'Inflow',\n            backgroundColor: '#FF9F1A',\n            hoverBackgroundColor: '#FFB247',\n          },\n          {\n            data: this.chartvalues_out,\n            label: 'Outflow',\n            backgroundColor: '#FFC575',\n            hoverBackgroundColor: '#FFB247',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.barChartData = [\n        {\n          data: this.chartvalues_in,\n          label: 'Inflow',\n          backgroundColor: '#FF9F1A',\n          hoverBackgroundColor: '#FFB247',\n        },\n        {\n          data: this.chartvalues_out,\n          label: 'Outflow',\n          backgroundColor: '#FFC575',\n          hoverBackgroundColor: '#FFB247',\n        }\n      ];\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.item = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues_in = [];\n    this.chartvalues_out = [];\n    this.barChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async clearFilters() {\n    /* this.from = null;\n    this.to = null;\n    this.created_at = []; */\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.item = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues_in = [];\n    this.chartvalues_out = [];\n    this.barChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  openModal() {\n    let dialog = this.dialog.open(ReportStocksComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        visible_columns: this.visible_columns,\n        ths: this.ths\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-stocks-view',\n  templateUrl: './stocks-view.component.html',\n  styleUrls: ['./stocks-view.component.scss']\n})\nexport class StocksViewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export const datatable: any = [\n    {\n        label: 'OR No.',\n        key: 'attachment_no',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    }, \n    {\n        label: 'Amount',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Uploaded by',\n        key: 'first_name',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Upload Date',\n        key: 'updated_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n];\n\nexport const datatable2: any = [\n    {\n        label: 'Type',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Uploaded by',\n        key: 'first_name',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Upload Date',\n        key: 'updated_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","export const paymentattachment: any = [\n    {\n        label: 'Official Receipt',\n        value: 1,\n    },\n    {\n        label: 'Payment Form',\n        value: 2,\n    },\n    {\n        label: 'Credit Form',\n        value: 3,\n    },\n    {\n        label: 'Balance Form',\n        value: 4,\n    }\n];","import { Component, OnInit, Inject, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EventsService } from 'angular4-events';\nimport { paymentattachment } from './../../datatables/filter/payment-attachment/payment-attachment';\nimport { ImageCroppedEvent, ImageCropperComponent } from 'ngx-image-cropper';\nimport { strrandom } from 'src/app/lib/strrandom/strrandom';\nimport { ConfirmPasswordModalComponent } from './../confirm-password-modal/confirm-password-modal.component';\nimport { Router } from \"@angular/router\";\nimport { Location } from '@angular/common';\nimport { GeneralModalComponent } from './../general-modal/general-modal.component';\nexport interface DialogData {\n  item: any;\n  action: any;\n  payment_id: any;\n};\n\n@Component({\n  selector: 'app-view-payment-modal',\n  templateUrl: './view-payment-modal.component.html',\n  styleUrls: ['./view-payment-modal.component.scss']\n})\nexport class ViewPaymentModalComponent implements OnInit {\n\n  public attachmentForm: FormGroup;\n\n  item: any = [];\n  payment_id: number;\n  paymentattachment_options = paymentattachment;\n  type_label: any = 'Official Receipt';\n\n  action: any = 'create';\n  modal_title: string = 'Upload Signed Form';\n  modal_primary_button: string = 'Save';\n  modal_message: string = '';\n\n  isLoading: boolean = false;\n\n  photo: any;\n\tcroppedPhoto: any;\n\tisPhotoLoaded:boolean = false;\n\tisPhotoCropped: boolean = false;\n  photoUploadWrongFile: boolean = false;\n  uploadMaxLimitReached: boolean = false;\n\n  @ViewChild(ImageCropperComponent, {static: false}) imageCropper: ImageCropperComponent;\n\n  temp_photo: any;\n\n  constructor(\n    public dialogRef: MatDialogRef<ViewPaymentModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private events: EventsService,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    protected strand: strrandom,\n    protected router: Router,\n    protected location: Location\n  ) {\n    this.attachmentForm = this.formBuilder.group({\n      id: [\n        ''\n      ],\n      type: [\n        ''\n      ],\n      attachment_no: [\n        ''\n      ],\n      payment_id: [\n        ''\n      ],\n      attachment: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ]\n    });\n  }\n\n  ngOnInit() {\n    this.item = this.data.item;\n    this.action = this.data.action;\n    this.payment_id = this.data.payment_id;\n    console.log(\"item\", this.item);\n    if (this.item) {\n      this.attachmentForm.controls.id.setValue(this.item.id);\n      this.attachmentForm.controls.type.setValue(Number(this.item.type));\n      if (this.item.type == 1) {\n        this.attachmentForm.controls.attachment_no.setValue(this.item.attachment_no);\n        this.attachmentForm.controls.attachment_no.setValidators([\n          Validators.required\n        ]);\n      }\n      this.type_label = this.item.type_label;\n      this.temp_photo = this.item.attachment;\n\n      this.attachmentForm.controls.attachment.clearValidators();\n    }\n    this.attachmentForm.controls.payment_id.setValue(this.payment_id);\n  }\n  changeType(e) {\n    let type = this.attachmentForm.controls.type.value;\n    console.log(\"type\", type);\n    if (type == 1) {\n      this.type_label = 'Official Receipt';\n      this.attachmentForm.controls.attachment_no.setValidators([\n        Validators.required\n      ]);\n      this.attachmentForm.controls.attachment_no.setValue(this.item.attachment_no);\n    } else if (type == 2) {\n      this.type_label = 'Payment Form';\n      this.attachmentForm.controls.attachment_no.clearValidators();\n      this.attachmentForm.controls.attachment_no.setValue('');\n    } else if (type == 3) {\n      this.type_label = 'Credit Form';\n      this.attachmentForm.controls.attachment_no.clearValidators();\n      this.attachmentForm.controls.attachment_no.setValue('');\n    } else if (type == 4) {\n      this.type_label = 'Balance Form';\n      this.attachmentForm.controls.attachment_no.clearValidators();\n      this.attachmentForm.controls.attachment_no.setValue('');\n    }\n  }\n  photoChange(event: any): void {\n    console.log(event);\n\t\tlet fileType = event.target.files[0].type;\n\n\t\tif(fileType.match('image.*')){\n\t\t\tif (event.target.files[0].size > 1000000) {\n        this.uploadMaxLimitReached = true;\n      } else {\n        this.uploadMaxLimitReached = false;\n        this.isPhotoLoaded = false;\n        this.isPhotoCropped = false;\n        this.photoUploadWrongFile = false;\n        this.photo = event;\n        this.temp_photo = null;\n      }\n\t\t} else {\n\t\t\tthis.isPhotoLoaded = true;\n\t\t\tthis.isPhotoCropped = true;\n\t\t\tthis.photoUploadWrongFile = true;\n\t\t\tthis.photo = null;\n\t\t}\n\t}\n\timagePhotoCropped(event: ImageCroppedEvent) {\n\t\tthis.croppedPhoto = event.base64;\n    this.isPhotoCropped =  true;\n    let fileOfBlob = new File([event.file], this.strand.generateFileName());\n    /* console.log('fileOfBlob', fileOfBlob); */\n    this.attachmentForm.controls.attachment.setValue(fileOfBlob);\n\t}\n\timageLoaded() {\n\t\tthis.isPhotoLoaded = true;\n\t}\n\tstartCrop(event: ImageCroppedEvent) {\n\t\tthis.imageCropper.crop();\n  }\n  openModal(): void {\n    this.closeModal();\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: this.attachmentForm.value,\n        action: this.action ? this.action : 'attachment_create'\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        /* this.location.back(); */\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { datatable, datatable2 } from './../../../../components/datatables/payments/payments';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { PaymentService } from './../../../../services/payment/payment.service';\nimport { EventsService } from 'angular4-events';\nimport { ViewPaymentModalComponent } from './../../../../components/modals/view-payment-modal/view-payment-modal.component';\nimport { Location } from '@angular/common';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\n\n@Component({\n  selector: 'app-payment-listing',\n  templateUrl: './payment-listing.component.html',\n  styleUrls: ['./payment-listing.component.scss']\n})\nexport class PaymentListingComponent implements OnInit {\n\n  items: any = [];\n  item: any = [];\n  order_id: number;\n  \n  ths: any = datatable;\n  \n  visible_columns: any = [];\n  visible_columns_others: any = [];\n\n  isLoaded: boolean = false;\n\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'updated_at',\n    order_by: 'desc'\n  };\n  search: any = '';\n  type: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n  activity: any = [];\n  showtimeago: boolean = false;\n\n  ths_others: any = datatable2;\n  items_others: any = [];\n\n  constructor(\n    public _route: ActivatedRoute,\n    private generalService: GeneralService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private datePipe: DatePipe,\n    private events: EventsService,\n    private paymentService: PaymentService,\n    private location: Location\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    this.ths_others.forEach((data, index) => {\n      this.visible_columns_others.push(index);\n    });\n    this.events.subscribe('attachments_refresh', (res?) => {\n      if (res) {\n        this.isLoaded = false;\n        this.page = 1;\n        this.items = [];\n        this.items_others = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n        this.ngOnInit();\n      }\n    });\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      this.order_id = params['id'];\n      this.getList();\n      this.getListOthers();\n      /* this.getActivity('payment_attachment_listing'); */\n    });\n  }\n  async getListOthers() {\n    await this.paymentService.getListByOrderId(this.page, this.limit, this.order_id, this.type, this.from, this.to, this.order, this.search).then(res => {\n      console.log(\"getListOthers\", res);\n      if (res['error'] == 0) {\n        this.items_others = res['datas'];\n      } else {\n        this.items_others = [];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async getList() {\n    await this.paymentService.getListByOrderId(this.page, this.limit, this.order_id, 1, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      console.log(\"getList\", res);\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        this.item = res['data'];\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n        this.getActivity('payment_attachment_listing');\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page, null, null, null, this.item.payment_id).then(res => {\n      console.log(\"resres\", res);\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.type = 0;\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  openModal(item?, action?): void {\n    if (action == 'attachment_delete') {\n      let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n        width: '400px',\n        data: {\n          item: item ? item : null,\n          action: action ? action : null,\n          payment_id: this.item.payment.id\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          /* this.reloadData(); */\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    } else {\n      let dialog = this.dialog.open(ViewPaymentModalComponent, {\n        width: '400px',\n        data: {\n          item: item ? item : null,\n          action: action ? action : null,\n          payment_id: this.item.payment.id\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          /* this.reloadData(); */\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    }\n  }\n  goBack() {\n    this.location.back();\n  }\n}","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TransactionsService } from './../../../../services/transactions/transactions.service';\nimport { modeofpayment } from './../../../../components/datatables/filter/mode-of-payment/mode-of-payment';\nimport { realpaymentstatus } from './../../../../components/datatables/filter/payment-status/payment-status';\nimport { SessionStorageService } from \"ngx-webstorage\";\n\nimport { ImageCroppedEvent, ImageCropperComponent } from 'ngx-image-cropper';\nimport { strrandom } from 'src/app/lib/strrandom/strrandom';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { OrdersService } from './../../../../services/orders/orders.service';\n\n@Component({\n  selector: 'app-payment-update',\n  templateUrl: './payment-update.component.html',\n  styleUrls: ['./payment-update.component.scss']\n})\nexport class PaymentUpdateComponent implements OnInit {\n\n  public paymentForm: FormGroup;\n\n  item: any = [];\n  order_items: any = [];\n  order_id: number;\n  isLoaded: boolean = false;\n  mode_of_payment_options: any = modeofpayment;\n\n  payment_status_options: any = realpaymentstatus;\n\n  userProfile: any = [];\n  canChangeMode: boolean = false;\n\n  min_date: any = new Date();\n  max_date: any = new Date();\n  mode_of_payment: any = null;\n\n  /* receipt */\n  receiptPhoto: any;\n\tcroppedReceiptPhoto: any;\n\tisReceiptPhotoLoaded:boolean = false;\n\tisReceiptPhotoCropped: boolean = false;\n  receiptUploadWrongFile: boolean = false;\n  uploadReceiptMaxLimitReached: boolean = false;\n\n  @ViewChild(ImageCropperComponent, {static: false}) imageCropper: ImageCropperComponent;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private location: Location,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    public _route: ActivatedRoute,\n    public session: SessionStorageService,\n    private transactionsService: TransactionsService,\n    protected strand: strrandom,\n    private route: Router,\n    private ordersService: OrdersService\n  ) {\n    this.max_date.setDate(this.max_date.getDate() + 7);\n    this.paymentForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      mode_of_payment: [\n        null\n      ],\n      payment_status: [\n        null\n      ],\n      total_price: [\n        null\n      ],\n      payment: [\n        null\n      ],\n      balance: [\n        null\n      ],\n      due_date: [\n        null\n      ],\n      receipt_photo: [\n        null,\n        /* Validators.compose([\n          Validators.required\n        ]) */\n      ],\n      receipt_no: [\n        null,\n        Validators.compose([\n          Validators.required\n        ])\n      ]\n    });\n  }\n\n  ngOnInit() {\n    this.userProfile = JSON.parse(localStorage.getItem('user'));\n    this.canChangeMode = this.userProfile.user_role_id == 5 ? false : true;\n    this._route.params.subscribe(params => {\n      this.order_id = params['id'];\n      this.getRecord();\n    });\n  }\n  async getRecord() {\n    await this.transactionsService.getRecord(this.order_id).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.item = res['data'];\n        console.log(\"this item\", this.item);\n        this.order_items = res['data']['order_items'];\n        this.mode_of_payment = this.item.mode_of_payment;\n        this.paymentForm.controls.id.setValue(this.item.id);\n        this.paymentForm.controls.mode_of_payment.setValue(Number(this.item.mode_of_payment));\n        this.paymentForm.controls.payment_status.setValue(Number(this.item.payment_status));\n        this.paymentForm.controls.total_price.setValue(Number(this.item.total_price));\n        /* this.changePayment(); */\n        this.paymentForm.controls.payment.setValue(this.item.payment.payment);\n        \n        if (this.mode_of_payment == 1) {\n          this.paymentForm.controls.payment.setValidators([\n            Validators.required,\n            Validators.min(Number(this.item.total_price)),\n            Validators.max(Number(this.item.total_price))\n          ]);\n        } else if (this.mode_of_payment == 2) {\n          if(!this.item.last_payment){\n            console.log('this.item.last_payment', this.item.last_payment);\n            console.log('this.mode_of_payment', this.mode_of_payment);\n            this.paymentForm.controls.payment.setValidators([\n              Validators.required,\n              Validators.min(0),\n              Validators.max(0)\n            ]);\n          }else{\n            this.paymentForm.controls.payment.setValidators([\n              Validators.required,\n              Validators.min(Number(this.item.total_price)),\n              Validators.max(Number(this.item.total_price))\n            ]);\n          }\n        } else if (this.mode_of_payment == 3) {\n          this.paymentForm.controls.payment.setValidators([\n            Validators.required,\n            Validators.min(Number(this.item.total_price) / 2),\n            Validators.max(Number(this.item.total_price))\n          ]);\n        }\n        if (!this.item.last_payment) {\n          this.paymentForm.controls.balance.setValue(Number(this.item.payment.balance));\n        } else {\n          this.paymentForm.controls.balance.setValue(Number(this.item.total_price) - Number(this.item.last_payment.payment));\n          this.paymentForm.controls.payment.setValue(null);\n          if(this.mode_of_payment==2){\n            this.paymentForm.controls.payment.setValue(Number(this.item.total_price));\n          }\n          this.paymentForm.controls.payment.clearValidators();\n          this.paymentForm.controls.payment.setValidators([\n            Validators.required,\n            Validators.min(Number(this.item.total_price) - Number(this.item.last_payment.payment)),\n            Validators.max(Number(this.item.total_price) - Number(this.item.last_payment.payment))\n          ]);\n        }\n        /* this.paymentForm.controls.balance.setValue(Number(this.item.payment.balance)); */\n        this.paymentForm.controls.due_date.setValue(this.item.payment.due_date);\n        /* this.paymentForm.controls.receipt_no.setValue(this.item.payment.receipt_no); */\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  changePayment(e?) {\n    this.mode_of_payment = this.paymentForm.controls.mode_of_payment.value;\n    if (this.mode_of_payment == 1) {\n      this.paymentForm.controls.due_date.clearValidators();\n      this.paymentForm.controls.payment.setValue(this.item.payment.payment);\n      this.paymentForm.controls.balance.setValue(this.item.payment.balance);\n      this.paymentForm.controls.due_date.setValue(null);\n      this.paymentForm.controls.payment.setValidators([\n        Validators.required,\n        Validators.min(Number(this.item.total_price)),\n        Validators.max(Number(this.item.total_price))\n      ]);\n    } else if (this.mode_of_payment == 2) { /* with credit */\n      this.paymentForm.controls.payment.clearValidators();\n      this.paymentForm.controls.payment.setValue(this.item.payment.payment);\n      this.paymentForm.controls.balance.setValue(Number(this.item.payment.balance) + Number(this.item.payment.payment));\n      this.paymentForm.controls.due_date.setValidators([\n        Validators.required,\n        /* Validators.min(this.min_date),\n        Validators.max(this.max_date) */\n      ]);\n      this.paymentForm.controls.due_date.setValue(null);\n      \n      this.paymentForm.controls.payment.setValidators([\n        Validators.required,\n        Validators.min(0),\n        Validators.max(Number(this.item.total_price))\n      ]);\n    } else if (this.mode_of_payment == 3) { /* with balance */\n      this.paymentForm.controls.payment.setValue(0);\n      this.paymentForm.controls.balance.setValue(this.item.total_price);\n\n      if (this.item.last_payment) {\n        this.paymentForm.controls.payment.setValidators([\n          Validators.required,\n          Validators.min(Number(this.item.total_price) - Number(this.item.last_payment.payment)),\n          Validators.max(Number(this.item.total_price) - Number(this.item.last_payment.payment))\n        ]);\n      } else {\n        this.paymentForm.controls.payment.setValidators([\n          Validators.required,\n          Validators.min(Number(this.item.total_price) / 2),\n          Validators.max(this.item.total_price)\n        ]);\n      }\n      this.paymentForm.controls.due_date.setValidators([\n        Validators.required,\n        /* Validators.min(this.min_date),\n        Validators.max(this.max_date) */\n      ]);\n      this.paymentForm.controls.due_date.setValue(null);\n    }\n  }\n  async calculateRemaining(e) {\n    let balance = 0;\n    if (this.item.last_payment) {\n      balance = (Number(this.item.total_price) - Number(this.item.last_payment.payment)) - Number(this.paymentForm.controls.payment.value);\n    } else {\n      balance = Number(this.paymentForm.controls.total_price.value) - Number(this.paymentForm.controls.payment.value);\n    }\n    if (balance < 0) {\n      balance = 0;\n    }\n    this.paymentForm.controls.balance.setValue(balance);\n  }\n  enterCashAmount(e) {\n    let remaining_balance = Number(this.paymentForm.controls.total_price.value) - Number(this.paymentForm.controls.payment.value);\n    this.paymentForm.controls.balance.setValue(remaining_balance);\n  }\n  /* for receipt photo : start */\n  receiptChange(event: any): void {\n    console.log(event);\n\t\tlet fileType = event.target.files[0].type;\n\n\t\tif(fileType.match('image.*')){\n\t\t\tif (event.target.files[0].size > 1000000) {\n        this.uploadReceiptMaxLimitReached = true;\n      } else {\n        this.uploadReceiptMaxLimitReached = false;\n        this.isReceiptPhotoLoaded = false;\n        this.isReceiptPhotoCropped = false;\n        this.receiptUploadWrongFile = false;\n        this.receiptPhoto = event;\n      }\n\t\t} else {\n\t\t\tthis.isReceiptPhotoLoaded = true;\n\t\t\tthis.isReceiptPhotoCropped = true;\n\t\t\tthis.receiptUploadWrongFile = true;\n\t\t\tthis.receiptPhoto = null;\n\t\t}\n\t}\n\timageReceiptPhotoCropped(event: ImageCroppedEvent) {\n\t\tthis.croppedReceiptPhoto = event.base64;\n    this.isReceiptPhotoCropped =  true;\n    let fileOfBlob = new File([event.file], this.strand.generateFileName());\n    /* console.log('fileOfBlob', fileOfBlob); */\n    this.paymentForm.controls.receipt_photo.setValue(fileOfBlob);\n\t}\n\timageReceiptLoaded() {\n\t\tthis.isReceiptPhotoLoaded = true;\n  }\n  startCrop(event: ImageCroppedEvent) {\n\t\tthis.imageCropper.crop();\n  }\n  /* for receipt photo : end */\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n  openModal(): void {\n    console.log(\"this.paymentForm.value\", this.paymentForm.value);\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: this.paymentForm.value,\n        action: 'payment_add'\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        this.location.back();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  chooseDate(e) {\n    \n  }\n  savePrint() {\n    /* this.route.navigate(['/transactions/payments/print', this.item.id]); */\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: this.paymentForm.value,\n        action: 'payment_add'\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.route.navigate(['/transactions/payments/print', this.item.id, 'payment']);\n      }\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Egg Sizes',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Case',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Tray',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Pcs',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Pcs',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Price per Piece',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Price',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n]","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TransactionsService } from './../../../../services/transactions/transactions.service';\nimport { modeofpayment } from './../../../../components/datatables/filter/mode-of-payment/mode-of-payment';\nimport { realpaymentstatus } from './../../../../components/datatables/filter/payment-status/payment-status';\nimport { SessionStorageService } from \"ngx-webstorage\";\n\nimport { ImageCroppedEvent, ImageCropperComponent } from 'ngx-image-cropper';\nimport { strrandom } from 'src/app/lib/strrandom/strrandom';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { OrdersService } from './../../../../services/orders/orders.service';\n\nimport { datatable } from './../../../../components/datatables/payment/payment-form-print/payment-form-print';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-payment-print',\n  templateUrl: './payment-print.component.html',\n  styleUrls: ['./payment-print.component.scss']\n})\nexport class PaymentPrintComponent implements OnInit {\n\n  item: any = [];\n  order_id: number;\n  fromPage: any;\n  order_items: any = [];\n  isLoaded: boolean = false;\n\n  date_today: any = new Date();\n\n  ths: any = datatable;\n  visible_columns: any = [];\n\n  user_profile: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'portrait',\n        format: 'letter',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      image: {\n        type: 'jpeg',\n        quality: 0.95\n      },\n      html2canvas:  {\n        scale: 2\n      }\n    }\n  };\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private location: Location,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    public _route: ActivatedRoute,\n    public session: SessionStorageService,\n    private transactionsService: TransactionsService,\n    protected strand: strrandom,\n    private route: Router,\n    private exportAsService: ExportAsService,\n    private datePipe: DatePipe\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this._route.params.subscribe(params => {\n      console.log(params);\n      this.order_id = params['id'];\n      this.fromPage = params['from'];\n      this.getRecord();\n    });\n  }\n  async getRecord() {\n    await this.transactionsService.getRecord(this.order_id).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['data']['sub_total_price'] = Number(res['data']['total_price']) + Number(res['data']['discount']);\n        this.item = res['data'];\n        console.log(\"this item\", this.item);\n        res['data']['order_items'].forEach((data, index) => {\n          let d = [\n            {},\n            {},\n            {}\n          ];\n          let price = 0;\n          console.log(\"data\", data);\n          data.order_item_details.forEach(data => {\n            if (data.type_id == 1) {\n              d[0] = data;\n              price = data.price;\n            }\n            if (data.type_id == 2) {\n              d[1] = data;\n              price = data.price;\n            }\n            if (data.type_id == 3) {\n              d[2] = data;\n              price = data.price;\n            }\n          });\n          data.price = price;\n          data.order_item_details = d;\n          this.order_items.push(data);\n        });\n        console.log(\"order_items\", this.order_items);\n        /* this.order_items = res['data']['order_items']; */\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  goBack() {\n    if (this.fromPage == 'payment') {\n      this.route.navigate(['/transactions/view', this.order_id]);\n    } else {\n      this.location.back();\n    }\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Customer-Transaction-Form-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      \n    });\n  }\n}","export const datatable: any = [\n    {\n        label: 'Egg Size',\n        key: 'type',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Price per piece',\n        key: 'price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Price per tray',\n        key: 'price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Price per case',\n        key: 'price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Pricing effective date',\n        key: 'updated_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EventsService } from 'angular4-events';\n\nimport { PriceManagementService } from './../../../services/price-management/price-management.service';\nimport { ConfirmPasswordModalComponent } from './../confirm-password-modal/confirm-password-modal.component';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n};\n\n@Component({\n  selector: 'app-price-modal',\n  templateUrl: './price-modal.component.html',\n  styleUrls: ['./price-modal.component.scss']\n})\nexport class PriceModalComponent implements OnInit {\n\n  public priceForm: FormGroup;\n\n  item: any = [];\n  action: any = 'create';\n\n  modal_title: string = 'Update Price Details';\n  modal_primary_button: string = 'Update pricing';\n  modal_message: string = '';\n\n  isLoading: boolean = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<PriceModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private events: EventsService,\n    private formBuilder: FormBuilder,\n    private priceManagementService: PriceManagementService,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog\n  ) {\n    this.priceForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      current_price: [\n        ''\n      ],\n      price: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.min(0.01)\n        ])\n      ]\n    });\n  }\n\n  ngOnInit() {\n    this.item = this.data.item;\n    this.action = this.data.action;\n    console.log(this.item);\n    if (this.item) {\n      this.priceForm.controls.id.setValue(this.item.id);\n      this.priceForm.controls.current_price.setValue(this.item.per_piece);\n      this.modal_message = this.item.egg_type_type;\n    }\n  }\n  async submit() {\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: this.priceForm.value,\n        action: this.action == 'create' ? 'price_create' : 'price_update'\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n    this.closeModal();\n  }\n  async proceedProcess() {\n    this.isLoading = true;\n    this.modal_primary_button = this.action == 'create' ? 'Saving...' : 'Updating...';\n    await this.priceManagementService.save(this.priceForm.value).then(res => {\n      this.isLoading = false;\n      if (res['error'] == 0) {\n        this.closeModal(res['message']);\n      } else {\n        this.modal_primary_button = this.action == 'create' ? 'Save price' : 'Update pricing';\n        this._snackBar.open(res['message'], null, {\n          verticalPosition: 'top',\n          announcementMessage: res['message'],\n          duration: 3000\n        });\n      }\n    }).catch(e => {\n      this.isLoading = false;\n      console.log(\"e\", e);\n      this._snackBar.open(e, null, {\n        verticalPosition: 'top',\n        announcementMessage: e,\n        duration: 3000\n      });\n    });\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/price-management-listing/price-management-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { PriceManagementService } from './../../../../services/price-management/price-management.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { PriceModalComponent } from './../../../../components/modals/price-modal/price-modal.component';\nimport { EventsService } from 'angular4-events';\n\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ReportFooterComponent } from './../report-footer/report-footer.component';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  type: number,\n  from: any,\n  to: any,\n  order: any,\n  search: any,\n  ths: any,\n  visible_columns: any\n};\n\n@Component({\n  selector: 'app-report-egg-price',\n  templateUrl: './report-egg-price.component.html',\n  styleUrls: ['./report-egg-price.component.scss']\n})\nexport class ReportEggPriceComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  egg_type_options: any = [];\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'type',\n    order_by: 'asc'\n  };\n  search: any = '';\n  staff_items: any = [];\n  type: number;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'A4',\n      },\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        after: '.break-now'\n      },\n      showall: true,\n      pdfCallbackFn: this.pdfCallbackFn\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportEggPriceComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private exportAsService: ExportAsService,\n    private dialog: MatDialog,\n    private events: EventsService,\n    private _snackBar: MatSnackBar,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private generalService: GeneralService,\n    private priceManagementService: PriceManagementService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.ths = this.data.ths;\n    this.type = this.data.type;\n    this.order = this.data.order;\n    this.search = this.data.search;\n    this.visible_columns = this.data.visible_columns;\n    this.getList();\n  }\n  async getList() {\n    await this.priceManagementService.getList(this.page, this.limit, this.type, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          data.per_piece = Number(data.price);\n          data.per_case = 360 * Number(data.price);\n          data.per_tray = 30 * Number(data.price);\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  pdfCallbackFn (pdf: any) {\n    // example to add page number as footer to every page of pdf\n    /* pdf.showall */\n    const noOfPages = pdf.internal.getNumberOfPages();\n    for (let i = 1; i <= noOfPages; i++) {\n      pdf.setPage(i);\n      pdf.setFontSize(12);\n      pdf.text(i + ' of ' + noOfPages, pdf.internal.pageSize.getWidth() - 25, pdf.internal.pageSize.getHeight() - 10);\n    }\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Egg-Price-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/price-management-listing/price-management-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { PriceManagementService } from './../../../../services/price-management/price-management.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport { DatePipe } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { PriceModalComponent } from './../../../../components/modals/price-modal/price-modal.component';\nimport { EventsService } from 'angular4-events';\nimport { ReportEggPriceComponent } from './../../../../components/modals/reports/report-egg-price/report-egg-price.component';\nimport { AuthService } from './../../../../services/auth/auth.service';\nimport { ExportToCsv } from 'export-to-csv';\n\n@Component({\n  selector: 'app-price-management-listing',\n  templateUrl: './price-management-listing.component.html',\n  styleUrls: ['./price-management-listing.component.scss']\n})\nexport class PriceManagementListingComponent implements OnInit {\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  egg_type_options: any = [];\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'type',\n    order_by: 'asc'\n  };\n  search: any = '';\n  staff_items: any = [];\n  type: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  report_status: number;\n  show_filter: boolean = false;\n  activity: any = [];\n  showtimeago: boolean = true;\n\n  constructor(\n    private auth: AuthService,\n    private dialog: MatDialog,\n    private events: EventsService,\n    private _snackBar: MatSnackBar,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private generalService: GeneralService,\n    private priceManagementService: PriceManagementService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    this.events.subscribe('price_refresh', (res?) => {\n      if (res) {\n        this.isLoaded = false;\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n        this.ngOnInit();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getList();\n    this.getEggTypeList();\n    this.getActivity('price_management_listing');\n  }\n  async getList() {\n    await this.priceManagementService.getList(this.page, this.limit, this.type, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          data.per_piece = Number(data.price);\n          data.per_case = 360 * Number(data.price);\n          data.per_tray = 30 * Number(data.price);\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async getEggTypeList() {\n    await this.eggTypeService.getList().then(res => {\n      if (res['error'] == 0) {\n        this.egg_type_options = res['datas'];\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async changeType(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.type = 0;\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  async reloadData() {\n    this.isLoaded = false;\n    this.items = [];\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  openModal(item?, action?): void {\n    let dialog = this.dialog.open(PriceModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action ? action : 'create'\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.reloadData();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n  downloadModal() {\n    let dialog = this.dialog.open(ReportEggPriceComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        search: this.search,\n        visible_columns: this.visible_columns,\n        ths: this.ths\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  async exportToCsv() {\n    let datas = [];\n\n    await this.priceManagementService.getList(1, this.totalItems, this.type, this.from, this.to, this.order, this.search).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n\n          data.per_piece = Number(data.price);\n          data.per_case = 360 * Number(data.price);\n          data.per_tray = 30 * Number(data.price);\n\n          datas.push({\n            'Egg Size': data.egg_type_type,\n            'Price Per Piece': data.per_piece,\n            'Price Per Tray': data.per_tray,\n            'Price Per Case': data.per_case,\n            'Pricing Effective Date': this.datePipe.transform(new Date(data.updated_at), 'yyyy-MM-dd'),\n          });\n        });\n        \n        const options = { \n          fieldSeparator: ',',\n          quoteStrings: '\"',\n          decimalSeparator: '.',\n          showLabels: true, \n          showTitle: true,\n          title:  'Report-Egg-Price-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd'),\n          useTextFile: false,\n          useBom: true,\n          useKeysAsHeaders: true,\n          filename: 'Report-Egg-Price-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd')\n        };\n        const csvExporter = new ExportToCsv(options);\n        csvExporter.generateCsv(datas);\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    })\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Date',\n        key: 'updated_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Price',\n        key: 'price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    }\n]","import { Component, OnInit, Inject } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/price-management-view/price-management-view';\nimport { PriceManagementService } from './../../../../services/price-management/price-management.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport { DatePipe } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { MatDialog } from '@angular/material/dialog';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ExportAsService, ExportAsConfig, SupportedExtensions } from 'ngx-export-as';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\n\nexport interface DialogData {\n  page: number,\n  limit: number,\n  type: number,\n  from: any,\n  to: any,\n  order: any,\n  ths: any,\n  visible_columns: any\n};\n\n@Component({\n  selector: 'app-report-price-trend',\n  templateUrl: './report-price-trend.component.html',\n  styleUrls: ['./report-price-trend.component.scss']\n})\nexport class ReportPriceTrendComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  egg_type_options: any = [];\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'updated_at',\n    order_by: 'asc'\n  };\n  type: number;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  type_name: any = '';\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    spanGaps: true,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Price',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n          min: 0,\n          callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          beginAtZero: true,\n          min: 0\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function (tooltipItem, data) {\n          return tooltipItem.label/* this.datePipe.transform(new Date(tooltipItem.label), 'MMM dd') */;\n        },\n        footer: function(item, data) {\n          console.log(\"item\", item);\n          console.log(\"data\", data);\n          if (parseInt(item[0].value) >= 1000){\n            return 'Price: ₱ ' + item[0].value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          } else {\n            return 'Price: ₱ ' + item[0].value;\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#05172e',\n        formatter: (value, ctx) => {\n          return '';\n          /* if (value == 0) {\n            return '';\n          }\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix; */\n        },\n      },\n    }\n    /* animation: {\n      onComplete: function () {\n        var chartInstance = this.chart,\n        ctx = chartInstance.ctx;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'bottom';\n        this.data.datasets.forEach(function (dataset, i) {\n            var meta = chartInstance.controller.getDatasetMeta(i);\n            meta.data.forEach(function (bar, index) {\n                var data = dataset.data[index];\n                ctx.fillText(data, bar._model.x, bar._model.y - 5);\n            });\n        });\n      }\n    } */\n  };\n  public lineChartLabels: Label[] = [];\n  public lineChartType: ChartType = 'line';\n  public lineChartLegend = false;\n  public lineChartPlugins = [pluginDataLabels];\n  public lineChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  exportAsConfig: ExportAsConfig = {\n    type: 'pdf',\n    elementId: 'printable-section',\n    options: {\n      jsPDF: {\n        orientation: 'landscape',\n        format: 'legal',\n      },\n      /* html2canvas:  {\n        scale: 2\n      }, */\n      margin: 10,\n      compress: true,\n      pagebreak: {\n        /* mode: 'avoid-all', */\n        after: '.break-now'\n      },\n      /* image: {\n        type: 'jpeg',\n        quality: 0.95\n      }, */\n      /* compress: true,\n      \n      html2canvas:  {\n        scale: 2\n      },\n      pagebreak: {\n        before: '.break-now'\n      },\n      fileName: 'asd.pdf', */\n      /* pdfCallbackFn: this.pdfCallbackFn */ // to add header and footer\n    }\n  };\n  user_profile: any = [];\n  date_today: any = new Date();\n\n  constructor(\n    public dialogRef: MatDialogRef<ReportPriceTrendComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private exportAsService: ExportAsService,\n    public _route: ActivatedRoute,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private priceManagementService: PriceManagementService,\n    private dialog: MatDialog,\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.getEggTypeList();\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.user_profile = user;\n    this.page = this.data.page;\n    this.limit = this.data.limit;\n    this.from = this.data.from;\n    this.to = this.data.to;\n    this.ths = this.data.ths;\n    this.type = this.data.type;\n    this.order = this.data.order;\n    this.visible_columns = this.data.visible_columns;\n    /* this.getList(); */\n    this.loopDates();\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.lineChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      this.chartvalues.push(null);\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n    this.getList();\n  }\n  async getEggTypeList() {\n    await this.eggTypeService.getList().then(res => {\n      if (res['error'] == 0) {\n        this.egg_type_options = res['datas'];\n        let type_name = this.egg_type_options.find(x => x.id == this.type);\n        this.type_name = type_name.type;\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async getList() {\n    await this.priceManagementService.getPriceTrend(this.page, this.limit, this.type, this.from, this.to, this.order).then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n    this.getGraph();\n  }\n  async getGraph() {\n    this.chartvalues = [];\n    this.lineChartData = [];\n    await this.priceManagementService.getPriceTrend(1, this.limit, this.type, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          let getIndex = this.lineChartLabels.indexOf(this.datePipe.transform(new Date(data.updated_at), 'MM/dd'));\n          this.chartvalues[getIndex] = Number(data.price);\n        });\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Price',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n          }\n        ];\n      } else {\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Sales',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.lineChartData = [\n        {\n          data: this.chartvalues,\n          label: 'Sales',\n          borderColor: '#FF9F1A',\n          backgroundColor: 'transparent',\n          hoverBackgroundColor: 'transparent',\n        }\n      ];\n    });\n  }\n  async exportPdf(type: SupportedExtensions, opt?: string) {\n    let that = this;\n    this.exportAsConfig.type = type;\n    if (opt) {\n      this.exportAsConfig.options.jsPDF.orientation = opt;\n    }\n    let fileName = 'Report-Price-Trend-' + this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n    this.exportAsService.save(this.exportAsConfig, fileName).subscribe(() => {\n      this.dialogRef.close();\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/price-management-view/price-management-view';\nimport { PriceManagementService } from './../../../../services/price-management/price-management.service';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport { Location, DatePipe } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { MatDialog } from '@angular/material/dialog';\nimport { ChartOptions, ChartType, ChartDataSets } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ReportPriceTrendComponent } from './../../../../components/modals/reports/report-price-trend/report-price-trend.component';\nimport * as pluginDataLabels from 'chartjs-plugin-datalabels';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-price-management-view',\n  templateUrl: './price-management-view.component.html',\n  styleUrls: ['./price-management-view.component.scss']\n})\nexport class PriceManagementViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n\n  egg_type_options: any = [];\n\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'updated_at',\n    order_by: 'asc'\n  };\n  type: number;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  type_name: any = '';\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    aspectRatio: 0.8,\n    spanGaps: true,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Price',\n          fontSize: 16,\n          lineHeight: 4,\n          fontColor: '#05172e'\n        },\n        ticks: {\n          min: 0,\n          callback: function(label, index, labels) {\n            let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n            let tier = Math.log10(Math.abs(label)) / 3 | 0;\n            if(tier == 0) return label;\n            let postfix = SI_POSTFIXES[tier];\n            let scale = Math.pow(10, tier * 3);\n            let scaled = label / scale;\n            let formatted = scaled.toFixed(1) + '';\n            if (/\\.0$/.test(formatted))\n              formatted = formatted.substr(0, formatted.length - 2);\n            return formatted + postfix;\n            /* let parts = label.toString().split(\".\");\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return parts.join(\".\") + ' g'; */\n          }\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          beginAtZero: true,\n          min: 0\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: (title, data) => {\n          return null;\n        },\n        label: function (tooltipItem, data) {\n          return tooltipItem.label/* this.datePipe.transform(new Date(tooltipItem.label), 'MMM dd') */;\n        },\n        footer: function(item, data) {\n          console.log(\"item\", item);\n          console.log(\"data\", data);\n          if (parseInt(item[0].value) >= 1000){\n            return 'Price: ₱ ' + item[0].value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          } else {\n            return 'Price: ₱ ' + item[0].value;\n          }\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: '#05172e',\n        formatter: (value, ctx) => {\n          return '';\n          /* if (value == 0) {\n            return '';\n          }\n          let SI_POSTFIXES = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n          let tier = Math.log10(Math.abs(value)) / 3 | 0;\n          if(tier == 0) return value;\n          let postfix = SI_POSTFIXES[tier];\n          let scale = Math.pow(10, tier * 3);\n          let scaled = value / scale;\n          let formatted = scaled.toFixed(1) + '';\n          if (/\\.0$/.test(formatted))\n            formatted = formatted.substr(0, formatted.length - 2);\n          return formatted + postfix; */\n        },\n      },\n    }\n    /* animation: {\n      onComplete: function () {\n        var chartInstance = this.chart,\n        ctx = chartInstance.ctx;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'bottom';\n        this.data.datasets.forEach(function (dataset, i) {\n            var meta = chartInstance.controller.getDatasetMeta(i);\n            meta.data.forEach(function (bar, index) {\n                var data = dataset.data[index];\n                ctx.fillText(data, bar._model.x, bar._model.y - 5);\n            });\n        });\n      }\n    } */\n  };\n  public lineChartLabels: Label[] = [];\n  public lineChartType: ChartType = 'line';\n  public lineChartLegend = false;\n  public lineChartPlugins = [pluginDataLabels];\n  public lineChartData: ChartDataSets[] = [];\n\n  chartvalues: any = [];\n  chartlabels: any = [];\n\n  constructor(\n    private auth: AuthService,\n    public _route: ActivatedRoute,\n    private datePipe: DatePipe,\n    private eggTypeService: EggTypeService,\n    private priceManagementService: PriceManagementService,\n    private dialog: MatDialog,\n    private location: Location\n  ) {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.loopDates();\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n  loopDates() {\n    let loop = new Date(this.from);\n    while (loop <= new Date(this.to)) {\n      this.lineChartLabels.push(this.datePipe.transform(new Date(loop), 'MM/dd'));\n      this.chartvalues.push(null);\n      let newDate = loop.setDate(loop.getDate() + 1);\n      loop = new Date(newDate);\n    }\n  }\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getEggTypeList();\n    this._route.params.subscribe(params => {\n      this.type = params['id'];\n      this.getList();\n    });\n  }\n  async getList() {\n    await this.priceManagementService.getPriceTrend(this.page, this.limit, this.type, this.from, this.to, this.order).then(res => {\n      /* this.isLoaded = true; */\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          /* data.per_piece = Number(data.price);\n          data.per_case = 360 * Number(data.price);\n          data.per_tray = 30 * Number(data.price); */\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n    this.getGraph();\n  }\n  \n  async getEggTypeList() {\n    await this.eggTypeService.getList().then(res => {\n      if (res['error'] == 0) {\n        this.egg_type_options = res['datas'];\n\n        let type_name = this.egg_type_options.find(x => x.id == this.type);\n        this.type_name = type_name.type;\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async changeType(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    let type_name = this.egg_type_options.find(x => x.id == this.type);\n    this.type_name = type_name.type;\n    await this.getList();\n  }\n  async chooseCreatedAt(e) {\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.lineChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async clearFilters() {\n    let dateToday = new Date();\n    let year = dateToday.getFullYear();\n    let month = dateToday.getMonth();\n    this.from = this.datePipe.transform(new Date(year, month, 1), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(/* dateToday */year, month + 1, 0), 'yyyy-MM-dd');\n    this.created_at = {\n      begin: this.from,\n      end: this.to\n    };\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.chartvalues = [];\n    this.lineChartLabels = [];\n    this.loopDates();\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getGraph() {\n    this.chartvalues = [];\n    this.lineChartData = [];\n    await this.priceManagementService.getPriceTrend(1, this.totalItems, this.type, this.from, this.to, this.order).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          let getIndex = this.lineChartLabels.indexOf(this.datePipe.transform(new Date(data.updated_at), 'MM/dd'));\n          this.chartvalues[getIndex] = Number(data.price);\n        });\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Price',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n            lineTension: 0\n          }\n        ];\n      } else {\n        this.lineChartData = [\n          {\n            data: this.chartvalues,\n            label: 'Sales',\n            borderColor: '#FF9F1A',\n            backgroundColor: 'transparent',\n            hoverBackgroundColor: 'transparent',\n            lineTension: 0\n          }\n        ];\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n      this.isLoaded = true;\n      this.lineChartData = [\n        {\n          data: this.chartvalues,\n          label: 'Sales',\n          borderColor: '#FF9F1A',\n          backgroundColor: 'transparent',\n          hoverBackgroundColor: 'transparent',\n          lineTension: 0\n        }\n      ];\n    });\n  }\n  downloadModal() {\n    let dialog = this.dialog.open(ReportPriceTrendComponent, {\n      /* width: '400px', */\n      panelClass: \"scroll\",\n      data: {\n        page: 1,\n        limit: this.totalItems,\n        type: this.type,\n        from: this.from,\n        to: this.to,\n        order: this.order,\n        visible_columns: this.visible_columns,\n        ths: this.ths\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      \n    });\n  }\n  goBack() {\n    this.location.back();\n  }\n}\n","export const staffroleoptions: any = [\n    {\n        label: 'Flockman',\n        value: 8,\n    },\n    {\n        label: 'General Manager',\n        value: 4,\n    },\n    {\n        label: 'Inspector 1',\n        value: 6,\n    },\n    {\n        label: 'Inspector 2',\n        value: 7,\n    },\n    {\n        label: 'Sales Agent',\n        value: 5,\n    },\n    {\n        label: 'Sorter',\n        value: 9,\n    },\n    {\n        label: 'Warehouseman',\n        value: 10,\n    }\n];","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { staffroleoptions } from './../../../../components/datatables/filter/staff-role/staff-role';\nimport { ImageCroppedEvent, ImageCropperComponent } from 'ngx-image-cropper';\nimport { strrandom } from 'src/app/lib/strrandom/strrandom';\nimport { AuthService } from './../../../../services/auth/auth.service';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\n\n@Component({\n  selector: 'app-staff-create',\n  templateUrl: './staff-create.component.html',\n  styleUrls: ['./staff-create.component.scss']\n})\nexport class StaffCreateComponent implements OnInit {\n\n  public userForm: FormGroup;\n\n  roles: any = staffroleoptions;\n\n  profilePhoto: any;\n\tcroppedprofilePhoto: any;\n\tisProfileImageLoaded:boolean = false;\n\tisProfilePhotoCropped: boolean = false;\n  profileUploadWrongFile: boolean = false;\n  uploadMaxLimitReached: boolean = false;\n\n  @ViewChild(ImageCropperComponent, {static: false}) imageCropper: ImageCropperComponent;\n\n  constructor(\n    private auth: AuthService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private location: Location,\n    protected strand: strrandom\n  ) {\n    this.userForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      role: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      first_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      last_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      username: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      number: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\"^[0-9]*$\"),\n          Validators.maxLength(10),\n          Validators.minLength(10)\n        ])\n      ],\n      location: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(60)\n        ])\n      ],\n      photo: []\n    });\n  }\n  ngOnInit() {\n    this.auth.validateUserRole();\n  }\n  openModal(item, action): void {\n    console.log(item);\n    console.log(action);\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        this.location.back();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  changeRole(e): void {\n    if (this.userForm.controls.role.value == 4 || this.userForm.controls.role.value == 5) {\n      this.userForm.addControl('email',\n        new FormControl(\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n            Validators.maxLength(50),\n            Validators.minLength(6)\n          ])\n        )\n      );\n    } else {\n      this.userForm.removeControl('email');\n    }\n  }\n  fileChange(event: any): void {\n    console.log(event);\n\t\tlet fileType = event.target.files[0].type;\n\n\t\tif(fileType.match('image.*')){\n\t\t\tif (event.target.files[0].size > 1000000) {\n        this.uploadMaxLimitReached = true;\n      } else {\n        this.uploadMaxLimitReached = false;\n        this.isProfileImageLoaded = false;\n        this.isProfilePhotoCropped = false;\n        this.profileUploadWrongFile = false;\n        this.profilePhoto = event;\n      }\n\t\t} else {\n\t\t\tthis.isProfileImageLoaded = true;\n\t\t\tthis.isProfilePhotoCropped = true;\n\t\t\tthis.profileUploadWrongFile = true;\n\t\t\tthis.profilePhoto = null;\n\t\t}\n\t}\n\timageProfilePhotoCropped(event: ImageCroppedEvent) {\n\t\tthis.croppedprofilePhoto = event.base64;\n    this.isProfilePhotoCropped =  true;\n    let fileOfBlob = new File([event.file], this.strand.generateFileName());\n    /* console.log('fileOfBlob', fileOfBlob); */\n    this.userForm.controls.photo.setValue(fileOfBlob);\n\t}\n\timageProfileLoaded() {\n\t\tthis.isProfileImageLoaded = true;\n\t}\n\tstartCrop(event: ImageCroppedEvent) {\n\t\tthis.imageCropper.crop();\n\t}\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n\n}\n","export const datatable: any = [\n    {\n        label: 'ID',\n        key: 'id',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Staff Name',\n        key: 'first_name',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'User Role',\n        key: 'user_role_id',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Username',\n        key: 'username',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mobile Number',\n        key: 'number',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Last Login',\n        key: 'last_login',\n        canSort: true,\n        isVisible: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n\n]","import { Component, OnInit } from \"@angular/core\";\nimport { datatable } from './../../../../components/datatables/staff-listing/staff-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { staffroleoptions } from './../../../../components/datatables/filter/staff-role/staff-role';\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-staff-listing',\n  templateUrl: './staff-listing.component.html',\n  styleUrls: ['./staff-listing.component.scss']\n})\nexport class StaffListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n  \n  ths: any = datatable;\n  limits: any = limitoptions;\n  roles: any = staffroleoptions;\n  visible_columns: any = [];\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  /* filters */\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  role_id: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  /* filters */\n\n  show_filter: boolean = false;\n  \n  activity: any = [];\n  showtimeago: boolean = true;\n  max_date: any = new Date();\n\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private generalService: GeneralService,\n    private staffService: StaffService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    this.max_date.setDate(this.max_date.getDate());\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getList();\n    this.getActivity('staff_listing');\n  }\n  async getList() {\n    await this.staffService.getList(this.page, this.limit, this.order, this.role_id, this.from, this.to, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count']/* res['data']['total_number_of_staff'] */;\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeRole(e) {\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.role_id = 0;\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { staffroleoptions } from './../../../../components/datatables/filter/staff-role/staff-role';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { StaffService } from './../../../../services/staff/staff.service';\n\nimport { ImageCroppedEvent, ImageCropperComponent } from 'ngx-image-cropper';\nimport { strrandom } from 'src/app/lib/strrandom/strrandom';\n\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-staff-update',\n  templateUrl: './staff-update.component.html',\n  styleUrls: ['./staff-update.component.scss']\n})\nexport class StaffUpdateComponent implements OnInit {\n\n  public userForm: FormGroup;\n\n  roles: any = staffroleoptions;\n\n  profilePhoto: any;\n\tcroppedprofilePhoto: any;\n\tisProfileImageLoaded:boolean = false;\n\tisProfilePhotoCropped: boolean = false;\n  profileUploadWrongFile: boolean = false;\n  uploadMaxLimitReached: boolean = false;\n\n  @ViewChild(ImageCropperComponent, {static: false}) imageCropper: ImageCropperComponent;\n\n  user_info: any = [];\n  user_logged_in: any = [];\n\n  constructor(\n    public _route: ActivatedRoute,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private location: Location,\n    private staffService: StaffService,\n    protected strand: strrandom,\n    protected auth: AuthService\n  ) {\n    this.userForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      role: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ],\n      first_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      last_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      username: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      password: [\n        ''\n      ],\n      number: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\"^[0-9]*$\"),\n          Validators.maxLength(10),\n          Validators.minLength(10)\n        ])\n      ],\n      location: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(60)\n        ])\n      ],\n      photo: []\n    });\n    this.user_logged_in = JSON.parse(localStorage.getItem(\"user\"));\n  }\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this._route.params.subscribe(params => {\n      this.getRecord(params['id']);\n    });\n  }\n  async getRecord(id) {\n    await this.staffService.getProfile(id).then(res => {\n      if (res['error'] == 0) {\n        this.user_info = res['data'];\n        if (this.user_info.profile_picture) {\n          this.profilePhoto = this.user_info.profile_picture;\n        }\n        this.userForm.controls.id.setValue(this.user_info.id);\n        this.userForm.controls.role.setValue(Number(this.user_info.user_role_id));\n        this.userForm.controls.first_name.setValue(this.user_info.profile_first_name);\n        this.userForm.controls.last_name.setValue(this.user_info.profile_last_name);\n        this.userForm.controls.number.setValue(this.user_info.contact_number);\n        this.userForm.controls.username.setValue(this.user_info.username);\n        this.userForm.controls.location.setValue(this.user_info.address_address);\n        if (this.user_info.user_role_id == 4 || this.user_info.user_role_id == 5) {\n          this.userForm.addControl('email',\n            new FormControl(\n              this.user_info.email,\n              Validators.compose([\n                Validators.required,\n                Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n                Validators.maxLength(50),\n                Validators.minLength(6)\n              ])\n            )\n          );\n        }\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  openModal(item, action): void {\n    console.log(item);\n    console.log(action);\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n        if (action == 'user_delete') {\n          this.location.back();\n        }\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  changeRole(e): void {\n    if (this.userForm.controls.role.value == 4 || this.userForm.controls.role.value == 5) {\n      this.userForm.addControl('email',\n        new FormControl(\n          this.user_info.email ? this.user_info.email : '',\n          Validators.compose([\n            Validators.required,\n            Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n          ])\n        )\n      );\n    } else {\n      this.userForm.removeControl('email');\n    }\n  }\n  fileChange(event: any): void {\n    console.log(event);\n\t\tlet fileType = event.target.files[0].type;\n\n\t\tif(fileType.match('image.*')){\n\t\t\tif (event.target.files[0].size > 1000000) {\n        this.uploadMaxLimitReached = true;\n      } else {\n        this.uploadMaxLimitReached = false;\n        this.isProfileImageLoaded = false;\n        this.isProfilePhotoCropped = false;\n        this.profileUploadWrongFile = false;\n        this.profilePhoto = event;\n      }\n\t\t} else {\n\t\t\tthis.isProfileImageLoaded = true;\n\t\t\tthis.isProfilePhotoCropped = true;\n\t\t\tthis.profileUploadWrongFile = true;\n\t\t\tthis.profilePhoto = null;\n\t\t}\n\t}\n\n\timageProfilePhotoCropped(event: ImageCroppedEvent) {\n\t\tthis.croppedprofilePhoto = event.base64;\n    this.isProfilePhotoCropped =  true;\n    let fileOfBlob = new File([event.file], this.strand.generateFileName());\n    /* console.log('fileOfBlob', fileOfBlob); */\n    this.userForm.controls.photo.setValue(fileOfBlob);\n\t}\n\n\timageProfileLoaded() {\n\t\tthis.isProfileImageLoaded = true;\n\t}\n\n\tstartCrop(event: ImageCroppedEvent) {\n\t\tthis.imageCropper.crop();\n\t}\n  goBack(action?, type?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: type\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n  generatePassword(){\n    console.log(this.userForm.value);\n    this.auth.generate(this.userForm.value).then(res=>{\n      if(res['error']==0){\n        this.userForm.controls.password.setValue(res['data']);\n        /* console.log('res', res); */\n      }\n    }).catch(e=>{\n      console.log(e);\n    })\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Activity',\n        key: 'action',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Date',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    }\n]","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/staff-view/staff-view';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { reportstatus } from './../../../../components/datatables/filter/report-status/report-status';\nimport { Location, DatePipe } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { DailyReportsService } from './../../../../services/daily-reports/daily-reports.service';\nimport { DashboardService } from './../../../../services/dashboard/dashboard.service';\nimport { Options } from 'selenium-webdriver/opera';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-staff-view',\n  templateUrl: './staff-view.component.html',\n  styleUrls: ['./staff-view.component.scss']\n})\nexport class StaffViewComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n  \n  visible_columns: any = [];\n\n  report_status_options: any = reportstatus;\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  search: any = '';\n  report_status: number;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  user_profile: any = [];\n\n  code_options: any = [];\n  code: any;\n\n  show_password: boolean = false;\n\n  user_logged_in: any = [];\n  user_info: any = [];\n  constructor(\n    private auth: AuthService,\n    private datePipe: DatePipe,\n    private dailyReportsService: DailyReportsService,\n    private staffService: StaffService,\n    private location: Location,\n    public _route: ActivatedRoute,\n    public dashboardService: DashboardService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    this.user_logged_in = JSON.parse(localStorage.getItem(\"user\"));\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this._route.params.subscribe(params => {\n      this.getRecord(params['id']);\n    });\n  }\n  async getRecord(id) {\n    await this.staffService.getProfile(id).then(res => {\n      if (res['error'] == 0) {\n        this.user_profile = res['data'];\n        /* this.getList(); */\n        this.getListing();\n        this.getCodefilter();\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n/*   async getList() {\n    await this.dailyReportsService.getList(this.page, this.limit, this.report_status, this.user_profile.id, this.from, this.to, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  } */\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      this.getListing();\n      /* await this.getList(); */\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      this.getListing();\n      /* await this.getList(); */\n    }\n  }\n/*   async changePaymentStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  } */\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.report_status = null;\n    this.code = null;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  goBack() {\n    this.location.back();\n  }\n  async getListing() {\n    await this.dashboardService.getStaffActivities(this.page, this.limit, this.user_profile.id, this.from, this.to, this.code, this.order).then(res => {\n      this.isLoaded = true;\n      console.log('staffActivities', res);\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async getCodefilter(){\n    await this.dashboardService.getCode(this.user_profile.user_role_id).then(res => {\n      console.log('code', res);\n      if(res['error'] == 0){\n        this.code_options = res['datas'];\n        console.log('codeoptions', this.code_options);\n      }\n    });\n  }\n  async changeCode(e){\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getListing();\n  }\n  showPassword() {\n    this.show_password = !this.show_password;\n  }\n  openModal(item, action): void {\n    console.log(item);\n    console.log(action);\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: item ? item : null,\n        action: action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/staff-view/staff-view';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { reportstatus } from './../../../../components/datatables/filter/report-status/report-status';\nimport { Location, DatePipe } from '@angular/common';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { StaffService } from './../../../../services/staff/staff.service';\nimport { DailyReportsService } from './../../../../services/daily-reports/daily-reports.service';\nimport { DashboardService } from './../../../../services/dashboard/dashboard.service';\nimport { Options } from 'selenium-webdriver/opera';\nimport { SessionStorageService } from \"ngx-webstorage\";\n\n@Component({\n  selector: 'app-staff-my-profile',\n  templateUrl: './staff-my-profile.component.html',\n  styleUrls: ['./staff-my-profile.component.scss']\n})\nexport class StaffMyProfileComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n  \n  visible_columns: any = [];\n\n  report_status_options: any = reportstatus;\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'created_at',\n    order_by: 'asc'\n  };\n  search: any = '';\n  report_status: number;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  user_profile: any = [];\n\n  code_options: any = [];\n  code: any;\n\n  constructor(\n    private datePipe: DatePipe,\n    private dailyReportsService: DailyReportsService,\n    private staffService: StaffService,\n    private location: Location,\n    public _route: ActivatedRoute,\n    public dashboardService: DashboardService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this._route.params.subscribe(params => {\n      this.getRecord(user['id']);\n    });\n  }\n  async getRecord(id) {\n    await this.staffService.getProfile(id).then(res => {\n      if (res['error'] == 0) {\n        this.user_profile = res['data'];\n        /* this.getList(); */\n        this.getListing();\n        this.getCodefilter();\n      } else {\n\n      }\n    }).catch(e => {\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      this.getListing();\n      /* await this.getList(); */\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      this.getListing();\n      /* await this.getList(); */\n    }\n  }\n/*   async changePaymentStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  } */\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    this.report_status = null;\n    this.code = null;\n    this.getListing();\n    /* await this.getList(); */\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  goBack() {\n    this.location.back();\n  }\n  async getListing() {\n    await this.dashboardService.getStaffActivities(this.page, this.limit, this.user_profile.id, this.from, this.to, this.code, this.order).then(res => {\n      this.isLoaded = true;\n      console.log('staffActivities', res);\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async getCodefilter(){\n    await this.dashboardService.getCode(this.user_profile.user_role_id).then(res => {\n      console.log('code', res);\n      if(res['error'] == 0){\n        this.code_options = res['datas'];\n        console.log('codeoptions', this.code_options);\n      }\n    });\n  }\n  async changeCode(e){\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getListing();\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DatePipe } from '@angular/common';\nimport { modeofpayment } from './../../datatables/filter/mode-of-payment/mode-of-payment';\n\nexport interface DialogData {\n  item: any;\n  total_price: any;\n};\n\n@Component({\n  selector: 'app-transaction-create-modal',\n  templateUrl: './transaction-create-modal.component.html',\n  styleUrls: ['./transaction-create-modal.component.scss']\n})\nexport class TransactionCreateModalComponent implements OnInit {\n\n  public orderForm: FormGroup;\n\n  item: any = [];\n  action: any;\n  total_price: number = 0;\n  grand_total: number = 0;\n  mode_of_payment_options: any = modeofpayment;\n  modal_title: string = 'Choose Mode of Payment';\n  modal_primary_button: string = 'Yes, proceed';\n  modal_primary_button_class: string = 'btn-primary';\n  modal_message: string = 'Please choose a mode of payment';\n\n  min_date: any = new Date();\n  max_date: any = new Date();\n  mode_of_payment: any = null;\n\n  constructor(\n    public dialogRef: MatDialogRef<TransactionCreateModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private datePipe: DatePipe\n  ) {\n    this.max_date.setDate(this.max_date.getDate() + 7);\n    this.orderForm = this.formBuilder.group({\n      mode_of_payment: [\n\t\t\t\tnull\n      ],\n      total_price: [\n        null\n      ],\n      payment: [\n        null\n      ],\n      balance: [\n        null\n      ],\n      due_date: [\n        null\n      ]\n    });\n  }\n\n  async ngOnInit() {\n    this.item = this.data.item;\n    this.total_price = this.data.total_price;\n    await this.item.cart.forEach(data => {\n      this.grand_total += Number(data.total_price);\n    });\n    if (this.total_price < 100000) {\n      this.orderForm.controls.mode_of_payment.setValue(1);\n      this.mode_of_payment = 1;\n      this.orderForm.controls.payment.setValue(this.grand_total);\n      this.orderForm.controls.balance.setValue(0);\n    }\n    this.orderForm.controls.total_price.setValue(this.grand_total);\n  }\n  changePayment(e) {\n    this.mode_of_payment = this.orderForm.controls.mode_of_payment.value;\n    if (this.mode_of_payment == 1) {\n      this.orderForm.controls.due_date.clearValidators();\n      this.orderForm.controls.payment.setValue(this.grand_total);\n      this.orderForm.controls.balance.setValue(0);\n      this.orderForm.controls.due_date.setValue(null);\n\n      this.modal_title = 'Choose Mode of Payment';\n      this.modal_message =  'Please choose a mode of payment';\n      this.modal_primary_button = 'Next';\n      this.modal_primary_button_class = 'btn-primary';\n\n    } else if (this.mode_of_payment == 2) { /* with credit */\n      this.modal_title = 'Credit Form';\n      this.modal_message = 'Please fill up this credit form.';\n      this.modal_primary_button = 'Next';\n      this.modal_primary_button_class = 'btn-primary';\n\n      this.orderForm.controls.payment.clearValidators();\n      this.orderForm.controls.payment.setValue(0);\n      this.orderForm.controls.balance.setValue(this.grand_total);\n      this.orderForm.controls.due_date.setValidators([\n        Validators.required,\n        /* Validators.min(this.min_date),\n        Validators.max(this.max_date) */\n      ]);\n      this.orderForm.controls.due_date.setValue(null);\n    } else if (this.mode_of_payment == 3) { /* with balance */\n      this.modal_title = 'Balance Form';\n      this.modal_message = 'Please fill up this balance form.';\n      this.modal_primary_button = 'Next';\n      this.modal_primary_button_class = 'btn-primary';\n\n      this.orderForm.controls.payment.setValue(0);\n      this.orderForm.controls.balance.setValue(this.grand_total);\n      this.orderForm.controls.payment.setValidators([\n        Validators.required,\n        Validators.min(Number(this.grand_total) / 2),\n        Validators.max(this.grand_total)\n      ]);\n      this.orderForm.controls.due_date.setValidators([\n        Validators.required,\n        /* Validators.min(this.min_date),\n        Validators.max(this.max_date) */\n      ]);\n      this.orderForm.controls.due_date.setValue(null);\n    }\n  }\n  async calculateRemaining(e) {\n    let balance = Number(this.orderForm.controls.total_price.value) - Number(this.orderForm.controls.payment.value);\n    if (balance < 0) {\n      balance = 0;\n    }\n    this.orderForm.controls.balance.setValue(balance);\n  }\n  async submit() {\n    let due_date = this.orderForm.controls.due_date.value;\n    if (due_date) {\n      this.orderForm.controls.due_date.setValue(this.datePipe.transform(new Date(due_date), 'yyyy-MM-dd'));\n    }\n    let orderForm = {\n      customer: {\n        user_id: this.item.user_id,\n        customer_name: this.item.customer_name,\n        number: this.item.number,\n        location: this.item.location,\n        request: this.item.request\n      },\n      payment: this.orderForm.value,\n      cart: this.item.cart\n    };\n    this.closeModal(orderForm);\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Egg Size',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Unit Price',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Order Qty',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Qty',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Amount',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: '',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    }\n]","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { CustomerService } from './../../../../services/customer/customer.service';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { TransactionCreateModalComponent } from './../../../../components/modals/transaction-create-modal/transaction-create-modal.component';\nimport { EggTypeService } from './../../../../services/egg-type/egg-type.service';\nimport { datatable } from './../../../../components/datatables/transaction-create/transaction-create';\nimport { modeofpayment } from './../../../../components/datatables/filter/mode-of-payment/mode-of-payment';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-transactions-create',\n  templateUrl: './transactions-create.component.html',\n  styleUrls: ['./transactions-create.component.scss']\n})\nexport class TransactionsCreateComponent implements OnInit {\n\n  public orderForm: FormGroup;\n  customer_options: any = [];\n  ths: any = datatable;\n  \n  egg_type_options: any = [];\n  mode_of_payment_options: any = modeofpayment;\n  mode_of_payment_label: any = '';\n  total_pieces: any = 0;\n  cart: any = [{\n    id: null,\n    label: null,\n    price: 0,\n    total_qty: 0,\n    total_price: 0,\n    items: [\n      {\n        type_id: 1,\n        type: 'Case',\n        qty: 0\n      },\n      {\n        type_id: 2,\n        type: 'Tray',\n        qty: 0\n      },\n      {\n        type_id: 3,\n        type: 'Piece',\n        qty: 0\n      }\n    ]\n  }];\n  canProceed: boolean = false;\n  my_order: any = [];\n  constructor(\n    private customerService: CustomerService,\n    private eggTypeService: EggTypeService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private location: Location,\n    private router: Router\n  ) {\n    this.orderForm = this.formBuilder.group({\n      user_id: [\n        null\n      ],\n      customer_name: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(50)\n        ])\n      ],\n      number: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\"^[0-9]*$\"),\n          Validators.maxLength(10),\n          Validators.minLength(10)\n        ])\n      ],\n      location: [\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.maxLength(250)\n        ])\n      ],\n      /* mode_of_payment: [\n        '',\n        Validators.compose([\n          Validators.required\n        ])\n      ], */\n      request: [\n        '',\n        Validators.compose([\n          Validators.maxLength(250)\n        ])\n      ],\n      payment: [\n        null\n      ],\n      cart: [\n        null\n      ]\n    });\n  }\n\n  ngOnInit() {\n    console.log(\"init this\");\n    let my_order = JSON.parse(localStorage.getItem(\"my_order\"));\n    if (my_order) {\n      console.log(my_order);\n      this.orderForm.controls.user_id.setValue(my_order.customer.user_id);\n      this.orderForm.controls.customer_name.setValue(my_order.customer.customer_name);\n      this.orderForm.controls.number.setValue(my_order.customer.number);\n      this.orderForm.controls.location.setValue(my_order.customer.location);\n      this.orderForm.controls.request.setValue(my_order.customer.request);\n\n      this.cart = [];\n      my_order.cart.forEach((data, index) => {\n        this.cart.push(data);\n      });\n      this.validateProceed();\n    }\n    this.getEggTypeList();\n  }\n  async getEggTypeList() {\n    await this.eggTypeService.getList().then(res => {\n      if (res['error'] == 0) {\n        res['datas'].forEach(data => {\n          if (data.id < 12 || data.id > 13) {\n            data.isUsed = false;\n            this.egg_type_options.push(data);\n          }\n        })\n        /* this.egg_type_options = res['datas']; */\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  async getCustomerList() {\n    this.orderForm.controls.user_id.setValue(null);\n    await this.customerService.getList(1, 10, null, this.orderForm.controls.customer_name.value).then(res => {\n      if (res['error'] == 0) {\n        this.customer_options = res['datas'];\n      } else {\n        this.customer_options = [];\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  customerSelected(e: any) {\n    let get_customer_name = this.customer_options.find(a => a.id == this.orderForm.controls.customer_name.value);\n    if (get_customer_name) {\n      this.orderForm.controls.user_id.setValue(get_customer_name.id);\n      this.orderForm.controls.customer_name.setValue(get_customer_name.profile_first_name + ' ' + get_customer_name.profile_last_name);\n      this.orderForm.controls.number.setValue(get_customer_name.contact_number);\n      this.orderForm.controls.location.setValue(get_customer_name.address_address);\n    }\n  }\n  eggTypeSelected(e, i) {\n    console.log(\"eggTypeSelected\", e.value);\n\n    let egg = this.egg_type_options.find(a => a.id == e.value);\n    let isExist = this.cart.find(a => a.id == e.value);\n    if (isExist) {\n      this._snackBar.open('Egg type already exists in your basket', 'Okay', {\n        verticalPosition: 'top',\n        announcementMessage: 'Egg type already exists in your basket',\n        duration: 3000\n      });\n      this.cart[i] = {\n        id: null,\n        label: null,\n        price: 0,\n        total_qty: 0,\n        total_price: 0,\n        items: [\n          {\n            type_id: 1,\n            type: 'Case',\n            qty: null\n          },\n          {\n            type_id: 2,\n            type: 'Tray',\n            qty: null\n          },\n          {\n            type_id: 3,\n            type: 'Piece',\n            qty: null\n          }\n        ]\n      };\n    } else {\n      this.cart[i] = {\n        id: e.value,\n        label: egg.type,\n        price: egg.price.price,\n        total_qty: 0,\n        total_price: 0,\n        items: [\n          {\n            type_id: 1,\n            type: 'Case',\n            qty: null\n          },\n          {\n            type_id: 2,\n            type: 'Tray',\n            qty: null\n          },\n          {\n            type_id: 3,\n            type: 'Piece',\n            qty: null\n          }\n        ]\n      };\n    }\n    console.log(\"cart\", this.cart);\n    this.validateProceed();\n  }\n  addItemToCart() {\n    this.cart.push(\n      {\n        id: null,\n        label: null,\n        price: 0,\n        total_qty: 0,\n        total_price: 0,\n        items: [\n          {\n            type_id: 1,\n            qty: 0\n          },\n          {\n            type_id: 2,\n            qty: 0\n          },\n          {\n            type_id: 3,\n            qty: 0\n          }\n        ]\n      }\n    )\n    this.validateProceed();\n  }\n  changeQty(e, i, t) {\n    this.cart[i]['items'][t]['qty'] = e.target.value;\n    console.log(\"cart\", this.cart);\n    \n    let total_price: number = 0;\n    let total_qty: number = 0;\n\n    this.cart[i]['items'].forEach(item => {\n      if (item.type_id == 1) {\n        total_qty += Number(item.qty) * 360;\n      } else if (item.type_id == 2) {\n        total_qty += Number(item.qty) * 30;\n      } else if (item.type_id == 3) {\n        total_qty += Number(item.qty);\n      }\n    });\n    total_price = Number(total_qty) * Number(this.cart[i]['price']);\n    this.cart[i]['total_qty'] = total_qty;\n    this.cart[i]['total_price'] = total_price;\n    this.validateProceed();\n  }\n  async submit() {\n    let cartToRetain = this.cart.filter(e => e.total_qty > 0);\n    this.cart = [];\n    let total_price = 0;\n    await cartToRetain.forEach(data => {\n      total_price += Number(data.total_price);\n      this.cart.push(data);\n    });\n    this.orderForm.controls.cart.setValue(this.cart);\n    let dialog = this.dialog.open(TransactionCreateModalComponent, {\n      width: '400px',\n      data: {\n        item: this.orderForm.value,\n        total_price: total_price\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        localStorage.setItem(\"my_order\", JSON.stringify(result));\n        this.router.navigate([\"transactions/create/preview\"]);\n      }\n    });\n  }\n  goBack(action?, page?) {\n    let dialog = this.dialog.open(GeneralModalComponent, {\n      width: '400px',\n      data: {\n        item: null,\n        action: action,\n        page: page\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this.location.back();\n      }\n    });\n  }\n  async removeItemInCart(i) {\n    this.cart.splice(i, 1);\n    this.validateProceed();\n    if (this.cart.length == 0) {\n      this.addItemToCart();\n    }\n  }\n  async validateProceed() {\n    let canProceed = false;\n    let grand_total_pcs = 0;\n    await this.cart.forEach(cart => {\n      grand_total_pcs += Number(cart.total_qty);\n      canProceed = cart.total_qty > 0 ? true : false;\n    });\n    this.canProceed = canProceed && grand_total_pcs >= 30 ? true : false;\n  }\n  async clearFilters() {\n    this.orderForm.controls.user_id.setValue('');\n    this.orderForm.controls.customer_name.setValue('');\n    this.orderForm.controls.number.setValue('');\n    this.orderForm.controls.location.setValue('');\n    this.cart = [];\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { modeofpayment } from './../../../../components/datatables/filter/mode-of-payment/mode-of-payment';\nimport { ConfirmPasswordModalComponent } from './../../../../components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-transactions-create-preview',\n  templateUrl: './transactions-create-preview.component.html',\n  styleUrls: ['./transactions-create-preview.component.scss']\n})\nexport class TransactionsCreatePreviewComponent implements OnInit {\n\n  my_order: any = null;\n  mode_of_payment_options: any = modeofpayment;\n  mode_of_payment_label: any = null;\n  total_pieces: number = 0;\n\n  constructor(\n    private location: Location,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private router: Router,\n  ) { }\n\n  ngOnInit() {\n    this.my_order = JSON.parse(localStorage.getItem(\"my_order\"));\n    if (!this.my_order) {\n      this.router.navigate([\"transactions/create\"]);\n      this._snackBar.open('Please fill up the form to create a new order', 'Okay', {\n        verticalPosition: 'top',\n        announcementMessage: 'Please fill up the form to create a new order',\n        duration: 3000\n      });\n    } else {\n      let mode_of_payment_id = this.my_order.payment.mode_of_payment;\n      this.mode_of_payment_label = this.mode_of_payment_options.find(e => e.value == mode_of_payment_id).label;\n      let total_pieces = 0;\n      this.my_order.cart.forEach(item => {\n        total_pieces += Number(item.total_qty);\n      });\n      this.total_pieces = total_pieces;\n    }\n  }\n  goBack(action?, page?) {\n    if (page && page == 'transaction_preview') {\n      this.location.back();\n    } else {\n      localStorage.removeItem('my_order');\n      let dialog = this.dialog.open(GeneralModalComponent, {\n        width: '400px',\n        data: {\n          item: null,\n          action: action,\n          page: page\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          this.router.navigate([\"transactions\"]);\n        }\n      });\n    }\n  }\n  async openModal() {\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: this.my_order,\n        action: 'transaction_create'\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        /* this.reloadData(); */\n        localStorage.removeItem('my_order');\n        this.router.navigate([\"transactions\"]);\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Order no.',\n        key: 'transaction_id',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Date & Time Ordered',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Customer Name',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Order Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Egg Sizes',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Quantity',\n        key: 'total_pieces',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Bill',\n        key: 'total_price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mode of Payment',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Payment Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit } from \"@angular/core\";\nimport { datatable } from './../../../../components/datatables/transactions-listing/transactions-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { orderstatus } from './../../../../components/datatables/filter/order-status/order-status';\nimport { paymentstatus } from '../../../../components/datatables/filter/payment-status/payment-status';\nimport { TransactionsService } from './../../../../services/transactions/transactions.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-transactions-listing',\n  templateUrl: './transactions-listing.component.html',\n  styleUrls: ['./transactions-listing.component.scss']\n})\nexport class TransactionsListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n  \n  visible_columns: any = [];\n\n  order_status_options: any = orderstatus;\n  payment_status_options: any = paymentstatus;\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'transaction_id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  order_status: number = 0;\n  payment_status: number = 0;\n  mode_of_payment: number = 0;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n  \n  activity: any = [];\n  showtimeago: boolean = true;\n  constructor(\n    private datePipe: DatePipe,\n    private generalService: GeneralService,\n    private transactions: TransactionsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.getList();\n    this.getActivity('transactions_listing');\n  }\n  async getList() {\n    await this.transactions.getList(this.page, this.limit, this.order, null, this.order_status, this.payment_status, this.mode_of_payment, this.from, this.to, this.search).then(res => {\n      console.log('getTransactions', res);\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async changePaymentStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeOrderStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    this.payment_status = null;\n    this.order_status = null;\n\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page) {\n    await this.generalService.getActivity(page).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Order no.',\n        key: 'transaction_id',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Date & Time Ordered',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Customer Name',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Order Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Egg Sizes',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Quantity',\n        key: 'total_pieces',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Bill',\n        key: 'total_price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mode of Payment',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Payment Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { datatable } from './../../../../components/datatables/transactions-listing-by-order-status/transactions-listing-by-order-status';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { paymentstatus } from '../../../../components/datatables/filter/payment-status/payment-status';\nimport { TransactionsService } from './../../../../services/transactions/transactions.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-transactions-listing-by-order-status',\n  templateUrl: './transactions-listing-by-order-status.component.html',\n  styleUrls: ['./transactions-listing-by-order-status.component.scss']\n})\nexport class TransactionsListingByOrderStatusComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  payment_status_options: any = paymentstatus;\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  payment_status: number;\n  mode_of_payment: number;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  order_status: number = 1;\n  order_status_label: any = \"Pending Transactions\";\n  activity: any = [];\n  showtimeago: boolean = true;\n  constructor(\n    private datePipe: DatePipe,\n    public _route: ActivatedRoute,\n    private generalService: GeneralService,\n    private transactions: TransactionsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      console.log(params);\n      this.order_status = params['status'];\n      if (this.order_status == 4) {\n        this.order_status_label = \"Completed Transactions\";\n      } else {\n        this.order_status_label = \"Pending Transactions\";\n      }\n      this.clearFilters();\n      this.getActivity('transactions_listing', this.order_status);\n    });\n  }\n  async getList() {\n    await this.transactions.getList(this.page, this.limit, this.order, null, this.order_status, this.payment_status, this.mode_of_payment, this.from, this.to).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async changePaymentStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.payment_status = null;\n\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page, order_status) {\n    await this.generalService.getActivity(page, null, order_status).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Order no.',\n        key: 'transaction_id',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Date & Time Ordered',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Customer Name',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Order Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Due Date',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Egg Sizes',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Quantity',\n        key: 'total_pieces',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Bill',\n        key: 'total_price',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Mode of Payment',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Payment Status',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Action',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: false\n    }\n]","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { datatable } from './../../../../components/datatables/transactions-listing-by-payment-status/transactions-listing-by-payment-status';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { paymentstatus } from '../../../../components/datatables/filter/payment-status/payment-status';\nimport { TransactionsService } from './../../../../services/transactions/transactions.service';\nimport { GeneralService } from './../../../../services/general/general.service';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-transactions-listing-by-payment-status',\n  templateUrl: './transactions-listing-by-payment-status.component.html',\n  styleUrls: ['./transactions-listing-by-payment-status.component.scss']\n})\nexport class TransactionsListingByPaymentStatusComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n\n  payment_status_options: any = paymentstatus;\n\n  items: any = [];\n  totalItems: number = 0;\n  \n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n\n  page: number = 1;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n  order_status: number;\n  payment_status: number;\n  from: any = null;\n  to: any = null;\n  created_at: any = [];\n  show_filter: boolean = false;\n\n  mode_of_payment: number = 2;\n  mode_of_payment_label: any = \"With Credit Transactions\";\n  activity: any = [];\n  showtimeago: boolean = true;\n  constructor(\n    private datePipe: DatePipe,\n    public _route: ActivatedRoute,\n    private generalService: GeneralService,\n    private transactions: TransactionsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      console.log(params);\n      this.mode_of_payment = params['status'];\n      if (this.mode_of_payment == 3) {\n        this.mode_of_payment_label = \"With Balance Transactions\";\n      } else {\n        this.mode_of_payment_label = \"With Credit Transactions\";\n      }\n      this.clearFilters();\n      this.getActivity('transactions_listing', this.mode_of_payment);\n    });\n  }\n  async getList() {\n    await this.transactions.getList(this.page, this.limit, this.order, null, this.order_status, this.payment_status, this.mode_of_payment, this.from, this.to).then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async gotoPage(page) {\n    if (this.page != page) {\n      this.isLoaded = false;\n      this.page = page;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getList();\n    }\n  }\n  async changePaymentStatus(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  async chooseCreatedAt(e) {\n    /* console.log(\"e\", e);\n    console.log(\"created_at\", this.created_at); */\n    this.from = this.datePipe.transform(new Date(this.created_at.begin), 'yyyy-MM-dd');\n    this.to = this.datePipe.transform(new Date(this.created_at.end), 'yyyy-MM-dd');\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getList();\n  }\n  showFilter() {\n    this.show_filter = !this.show_filter;\n  }\n  async clearFilters() {\n    this.from = null;\n    this.to = null;\n    this.created_at = [];\n    this.payment_status = null;\n\n    this.isLoaded = false;\n    this.page = 1;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n\n    await this.getList();\n  }\n  async changeColumnVisibility(e) {\n    this.ths.forEach((data, index) => {\n      data.isVisible = this.visible_columns.some(e => e == index);\n    });\n    if (this.visible_columns.length == 1) {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = false;\n    } else {\n      let i = this.ths.length - 1;\n      this.ths[i].isVisible = true;\n    }\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async getActivity(page, mode_of_payment) {\n    await this.generalService.getActivity(page, null, null, mode_of_payment).then(res => {\n      if (res['error'] == 0) {\n        this.showtimeago = true;\n        this.activity = res['data'];\n      } else {\n        this.showtimeago = false;\n      }\n    }).catch(e => {\n      console.log(e);\n      this.showtimeago = false;\n    });\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Item Details',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Unit Price',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Order Qty',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Total Qty',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Amount',\n        key: '',\n        canSort: false,\n        isVisible: true,\n        canToggle: true\n    }\n]","import { Component, OnInit } from '@angular/core';\nimport { InventoryStocksService } from './../../../services/inventory-stocks/inventory-stocks.service';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-fresh-egg-inventory-modal',\n  templateUrl: './fresh-egg-inventory-modal.component.html',\n  styleUrls: ['./fresh-egg-inventory-modal.component.scss']\n})\nexport class FreshEggInventoryModalComponent implements OnInit {\n\n  items: any = [];\n\n  modal_title: string = 'Current Stocks';\n  modal_primary_button: string = 'Okay';\n  modal_primary_button_class: string = 'btn-primary';\n  modal_message: string = 'Latest inventory of fresh eggs';\n  isLoaded: boolean = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<FreshEggInventoryModalComponent>,\n    private inventoryStocksService: InventoryStocksService\n  ) { }\n\n  ngOnInit() {\n    this.getList();\n  }\n  async getList() {\n    await this.inventoryStocksService.search().then(res => {\n      this.isLoaded = true;\n      if (res['error'] == 0) {\n        this.items = res['data'];\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(e);\n    });\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmPasswordModalComponent } from './../confirm-password-modal/confirm-password-modal.component';\n\nimport { OrdersService } from './../../../services/orders/orders.service';\nimport { FeedsMedicineManagementService } from './../../../services/feeds-medicine-management/feeds-medicine-management.service';\n\nexport interface DialogData {\n  item: any;\n  action: any;\n};\n\n@Component({\n  selector: 'app-add-discount-modal',\n  templateUrl: './add-discount-modal.component.html',\n  styleUrls: ['./add-discount-modal.component.scss']\n})\nexport class AddDiscountModalComponent implements OnInit {\n\n  public discountForm: FormGroup;\n\n  item: any = [];\n  action: any;\n\n  modal_title: string = 'Add Discount';\n  modal_primary_button: string = 'Save';\n  modal_primary_button_class: string = 'btn-primary';\n  modal_message: string = 'Please enter discount amount below.';\n\n  constructor(\n    public dialogRef: MatDialogRef<AddDiscountModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private feedsMedicineManagementService: FeedsMedicineManagementService,\n    private formBuilder: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private ordersService: OrdersService\n  ) {\n    this.discountForm = this.formBuilder.group({\n      id: [\n        null\n      ],\n      total_price: [\n        0\n      ],\n      discount: [\n        0\n      ]\n    });\n  }\n\n  ngOnInit() {\n    this.item = this.data.item;\n    this.action = this.data.action;\n    console.log(\"iumte\", this.item);\n    console.log(\"action\", this.action);\n    if (this.item) {\n      if (this.item.mode_of_payment == 1) {\n        this.discountForm.controls.id.setValue(this.item.id);\n        this.discountForm.controls.total_price.setValue(this.item.total_price);\n        this.discountForm.controls.discount.setValue(this.item.discount);\n\n        this.discountForm.controls.discount.setValidators([\n          Validators.required,\n          Validators.min(0),\n          Validators.max(Number(this.item.total_price) - 1)\n        ]);\n      } else if (this.item.mode_of_payment == 2) {\n        this.discountForm.controls.id.setValue(this.item.id);\n        this.discountForm.controls.total_price.setValue(this.item.payment.balance);\n        this.discountForm.controls.discount.setValue(this.item.discount);\n\n        this.discountForm.controls.discount.setValidators([\n          Validators.required,\n          Validators.min(0),\n          Validators.max(Number(this.item.payment.balance) - 1)\n        ]);\n      } else if (this.item.mode_of_payment == 3) {\n        this.discountForm.controls.id.setValue(this.item.id);\n        this.discountForm.controls.total_price.setValue(this.item.payment.payment);\n        this.discountForm.controls.discount.setValue(this.item.discount);\n\n        this.discountForm.controls.discount.setValidators([\n          Validators.required,\n          Validators.min(0),\n          Validators.max(Number(this.item.payment.payment) - 1)\n        ]);\n      }\n    }\n  }\n  calculateFinalPrice(e) {\n    let sub = 0;\n    if (this.item.mode_of_payment == 1) {\n      sub = Number(this.item.total_price) - Number(this.discountForm.controls.discount.value);\n    } else if (this.item.mode_of_payment == 2) {\n      sub = Number(this.item.payment.balance) - Number(this.discountForm.controls.discount.value);\n    } else if (this.item.mode_of_payment == 3) {\n      sub = Number(this.item.payment.payment) - Number(this.discountForm.controls.discount.value);\n    }\n    if (sub >= 0) {\n      this.discountForm.controls.total_price.setValue(sub);\n    }\n  }\n  submit() {\n    this.closeModal();\n    let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n      width: '400px',\n      data: {\n        item: this.discountForm.value,\n        action: this.action\n      }\n    });\n    dialog.afterClosed().subscribe(result => {\n      if (result) {\n        this._snackBar.open(result, 'Okay', {\n          verticalPosition: 'top',\n          announcementMessage: result,\n          duration: 3000\n        });\n      }\n    });\n  }\n  async closeModal(refresh?) {\n    await this.dialogRef.close(refresh);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SessionStorageService } from \"ngx-webstorage\";\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { datatable } from './../../../../components/datatables/transactions-view/transactions-view';\nimport { TransactionsService } from './../../../../services/transactions/transactions.service';\nimport { EventsService } from 'angular4-events';\n\nimport { MatDialog } from '@angular/material/dialog';\nimport { GeneralModalComponent } from './../../../../components/modals/general-modal/general-modal.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ConfirmPasswordModalComponent } from 'src/app/components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { FreshEggInventoryModalComponent } from './../../../../components/modals/fresh-egg-inventory-modal/fresh-egg-inventory-modal.component';\nimport { AddDiscountModalComponent } from './../../../../components/modals/add-discount-modal/add-discount-modal.component';\n\n@Component({\n  selector: 'app-transactions-view',\n  templateUrl: './transactions-view.component.html',\n  styleUrls: ['./transactions-view.component.scss']\n})\nexport class TransactionsViewComponent implements OnInit {\n\n  item: any = [];\n  order_id: number;\n  \n  ths: any = datatable;\n  visible_columns: any = [];\n\n  order_items: any = [];\n  isLoaded: boolean = false;\n\n  primary_button: string = 'Approve Order';\n  primary_button_action: string = 'order_approve';\n\n  userProfile: any = [];\n\n  timerLabels: any = {\n    Hours: \"HRS\",\n    Minutes: \"MIN\",\n    Seconds: \"SEC\"\n  }\n  date_today: any = new Date();\n  date_to_pickup: any = null;\n  display_timer: boolean = false;\n  showAction: boolean = false;\n  /* display_timer: boolean = this.date_today <= this.date_to_pickup ? true : false; */\n  constructor(\n    private events: EventsService,\n    private dialog: MatDialog,\n    private _snackBar: MatSnackBar,\n    private location: Location,\n    private route: Router,\n    public _route: ActivatedRoute,\n    public session: SessionStorageService,\n    private transactionsService: TransactionsService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n    this.events.subscribe('order_refresh', (res?) => {\n      if (res) {\n        this.ngOnInit();\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.userProfile = JSON.parse(localStorage.getItem('user'));\n    this._route.params.subscribe(params => {\n      this.order_id = params['id'];\n      this.getRecord();\n    });\n  }\n  async getRecord() {\n    await this.transactionsService.getRecord(this.order_id).then(res => {\n      this.isLoaded = true;\n      console.log(\"getRecord\", res);\n      if (res['error'] == 0) {\n        this.item = res['data'];\n\n\n        this.item.total_price = Number(this.item.total_price) + Number(this.item.discount);\n        \n        if (this.item.mode_of_payment == 2) {\n          this.item.payment.balance = Number(this.item.payment.balance) + Number(this.item.discount);\n        } else if (this.item.mode_of_payment == 3) {\n          this.item.payment.payment = Number(this.item.payment.payment) + Number(this.item.discount);\n        }\n\n        this.display_timer = this.date_today <= new Date(this.item.date_to_pickup) ? true : false;\n        this.order_items = res['data']['order_items'];\n\n        this.showAction = false;\n\n        if (this.userProfile.user_role_id == 5) { /* kapag sales */\n          if (this.item.order_status == 1 && this.item.mode_of_payment == 1) {\n            this.primary_button = 'Approve Order';\n            this.primary_button_action = 'order_approve';\n            this.showAction = true;\n          }\n\n          if (this.item.order_status == 3 && this.item.prepared_by) {\n            /* this.primary_button = 'Update Payment';\n            this.primary_button_action = 'update_payment';\n            this.showAction = true;\n            if (this.item.payment_status == 1) {\n              this.showAction = false;\n            } */\n          }\n\n          if (this.item.order_status == 1 && this.item.mode_of_payment > 1 && this.item.balance_credit_approved == 1) {\n            this.primary_button = 'Approve Order';\n            this.primary_button_action = 'order_approve';\n            this.showAction = true;\n          }\n          \n        } else if (this.userProfile.user_role_id == 4) { /* kapag manager */\n          if (this.item.order_status == 1 && this.item.mode_of_payment == 1) {\n            this.primary_button = 'Approve Order';\n            this.primary_button_action = 'order_approve';\n            this.showAction = true;\n          }\n          if (this.item.order_status == 1 && this.item.mode_of_payment > 1 && this.item.balance_credit_approved == 0) {\n            let label = this.item.mode_of_payment == 2 ? 'Credit' : 'Balance';\n            this.primary_button = 'Approve ' + label + ' Request';\n            this.primary_button_action = 'payment_approve';\n            this.showAction = true;\n          }\n          if (this.item.order_status == 1 && this.item.mode_of_payment > 1 && this.item.balance_credit_approved == 1) {\n            this.primary_button = 'Approve Order';\n            this.primary_button_action = 'order_approve';\n            this.showAction = true;\n          }\n          if (this.item.order_status == 3 && this.item.prepared_by) {\n            /* this.primary_button = 'Update Payment';\n            this.primary_button_action = 'update_payment';\n            this.showAction = true;\n            if (this.item.payment_status == 1) {\n              this.showAction = false;\n            } */\n          }\n        }\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  openModal(item?, action?): void {\n    if (action == 'update_payment') {\n      this.route.navigate(['/transactions/update-payment', item.id]);\n    } else if (action == 'order_approve' || action == 'payment_approve') {\n      let dialog = this.dialog.open(ConfirmPasswordModalComponent, {\n        width: '400px',\n        data: {\n          item: item,\n          action: action\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          this.isLoaded = false;\n          this.getRecord();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    } else if (action == 'order_decline') {\n      let dialog = this.dialog.open(GeneralModalComponent, {\n        width: '400px',\n        data: {\n          item: item,\n          action: action\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          this.getRecord();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    } else if (action == 'show_stocks') {\n      this.dialog.open(FreshEggInventoryModalComponent, {\n        width: '600px'\n      });\n    } else if (action == 'add_discount') {\n      let dialog = this.dialog.open(AddDiscountModalComponent, {\n        width: '400px',\n        data: {\n          item: item,\n          action: action\n        }\n      });\n      dialog.afterClosed().subscribe(result => {\n        if (result) {\n          this.getRecord();\n          this._snackBar.open(result, 'Okay', {\n            verticalPosition: 'top',\n            announcementMessage: result,\n            duration: 3000\n          });\n        }\n      });\n    }\n  }\n  goBack() {\n    this.location.back();\n  }\n  removeTimer(e) {\n    console.log(\"e\", e);\n    this.display_timer = false;\n  }\n}\n","export const datatable: any = [\n    {\n        label: 'Name',\n        key: 'name',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Activity',\n        key: 'action',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    },\n    {\n        label: 'Date',\n        key: 'created_at',\n        canSort: true,\n        isVisible: true,\n        canToggle: true\n    }\n]","import { Component, OnInit } from '@angular/core';\nimport { datatable } from './../../../../components/datatables/activity-listing/activity-listing';\nimport { limitoptions } from './../../../../components/datatables/limit/limit';\nimport { DashboardService } from './../../../../services/dashboard/dashboard.service';\nimport { AuthService } from './../../../../services/auth/auth.service';\n\n@Component({\n  selector: 'app-activity-listing',\n  templateUrl: './activity-listing.component.html',\n  styleUrls: ['./activity-listing.component.scss']\n})\nexport class ActivityListingComponent implements OnInit {\n\n  isLoaded: boolean = false;\n\n  ths: any = datatable;\n  limits: any = limitoptions;\n\n  visible_columns: any = [];\n  items: any = [];\n  totalItems: number = 0;\n  page: number = 1;\n  prev_page: number = 0;\n  next_page: number = 0;\n  totalPages: number = 0;\n  limit: number = 10;\n  limit_disabled: number = 0;\n  order: any = {\n    order_by_column: 'id',\n    order_by: 'asc'\n  };\n  search: any = '';\n\n  constructor(\n    private auth: AuthService,\n    private dashboardService: DashboardService\n  ) {\n    this.ths.forEach((data, index) => {\n      this.visible_columns.push(index);\n    });\n  }\n\n  ngOnInit() {\n    this.auth.validateUserRole();\n    this.getListing();\n  }\n  async changeLimit(e) {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async gotoPage(page) {\n    this.isLoaded = false;\n    this.page = page;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n  async getListing() {\n    this.limit_disabled = this.limit;\n    await this.dashboardService.getStaffActivities(this.page, this.limit, null, null, null, null, this.order, this.search).then(res => {\n      this.isLoaded = true;\n      console.log('staffActivities',res);\n      if (res['error'] == 0) {\n        this.totalItems = res['total_count'];\n        this.totalPages = res['total_page'];\n        this.prev_page = res['previous_page'];\n        this.next_page = res['next_page'];\n        if (this.totalItems < 10) {\n          this.limit_disabled = this.totalItems;\n        }\n        res['datas'].forEach(data => {\n          this.items.push(data);\n        });\n      } else {\n        this.items = [];\n        this.totalItems = 0;\n        this.totalPages = 0;\n      }\n    }).catch(e => {\n      this.isLoaded = true;\n      console.log(\"e\", e);\n    });\n  }\n  counter(i: number) {\n    return new Array(i);\n  }\n  async orderList(can_sort, order_by_column, order_by) {\n    if (can_sort) {\n      this.order = {\n        order_by_column: order_by_column,\n        order_by: order_by\n      };\n      this.isLoaded = false;\n      this.items = [];\n      this.totalItems = 0;\n      this.totalPages = 0;\n      await this.getListing();\n    }\n  }\n  async searchItem() {\n    this.isLoaded = false;\n    this.items = [];\n    this.totalItems = 0;\n    this.totalPages = 0;\n    await this.getListing();\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { TemplateComponent } from \"./layout/template/template.component\";\nimport { AuthGuard } from './guard/auth/auth.guard';\nimport { LoginComponent } from \"./pages/auth/login/login.component\";\n\nimport { CustomerCreateComponent } from './pages/main/customer/customer-create/customer-create.component';\nimport { CustomerListingComponent } from './pages/main/customer/customer-listing/customer-listing.component';\nimport { CustomerUpdateComponent } from './pages/main/customer/customer-update/customer-update.component';\nimport { CustomerViewComponent } from './pages/main/customer/customer-view/customer-view.component';\n\nimport { DailyReportsHouseListingComponent } from './pages/main/daily-reports/daily-reports-house-listing/daily-reports-house-listing.component';\nimport { DailyReportsListingComponent } from './pages/main/daily-reports/daily-reports-listing/daily-reports-listing.component';\nimport { DailyReportsViewComponent } from './pages/main/daily-reports/daily-reports-view/daily-reports-view.component';\n\nimport { DashboardComponent } from './pages/main/dashboard/dashboard.component';\n\nimport { FeedsMedicineConsumptionCreateComponent } from './pages/main/feeds-medicine-consumption/feeds-medicine-consumption-create/feeds-medicine-consumption-create.component';\nimport { FeedsMedicineConsumptionListingComponent } from './pages/main/feeds-medicine-consumption/feeds-medicine-consumption-listing/feeds-medicine-consumption-listing.component';\nimport { FeedsMedicineConsumptionViewComponent } from './pages/main/feeds-medicine-consumption/feeds-medicine-consumption-view/feeds-medicine-consumption-view.component';\n\nimport { FeedsCreateComponent } from './pages/main/feeds-medicine-management/feeds/feeds-create/feeds-create.component';\nimport { FeedsListingComponent } from './pages/main/feeds-medicine-management/feeds/feeds-listing/feeds-listing.component';\nimport { FeedsUpdateComponent } from './pages/main/feeds-medicine-management/feeds/feeds-update/feeds-update.component';\n\nimport { MedicineCreateComponent } from './pages/main/feeds-medicine-management/medicine/medicine-create/medicine-create.component';\nimport { MedicineListingComponent } from './pages/main/feeds-medicine-management/medicine/medicine-listing/medicine-listing.component';\nimport { MedicineUpdateComponent } from './pages/main/feeds-medicine-management/medicine/medicine-update/medicine-update.component';\n\nimport { HouseListingComponent } from './pages/main/house/house-listing/house-listing.component';\n\nimport { FreshEggsListingComponent } from './pages/main/inventory-stocks/fresh-eggs/fresh-eggs-listing/fresh-eggs-listing.component';\nimport { FreshEggsViewComponent } from './pages/main/inventory-stocks/fresh-eggs/fresh-eggs-view/fresh-eggs-view.component';\n\nimport { SacksListingComponent } from './pages/main/inventory-stocks/sacks/sacks-listing/sacks-listing.component';\nimport { SacksViewComponent } from './pages/main/inventory-stocks/sacks/sacks-view/sacks-view.component';\n\nimport { TraysListingComponent } from './pages/main/inventory-stocks/trays/trays-listing/trays-listing.component';\nimport { TraysViewComponent } from './pages/main/inventory-stocks/trays/trays-view/trays-view.component';\n\nimport { FeedsComponent } from './pages/main/performance-report/consumption/feeds/feeds.component';\nimport { MedicineComponent } from './pages/main/performance-report/consumption/medicine/medicine.component';\n\nimport { ProductionByEggSizeComponent } from './pages/main/performance-report/harvested/production-by-egg-size/production-by-egg-size.component';\nimport { ProductionPerHouseComponent } from './pages/main/performance-report/harvested/production-per-house/production-per-house.component';\n\nimport { OverallSalesComponent } from './pages/main/performance-report/sales/overall-sales/overall-sales.component';\nimport { SalesByEggSizeComponent } from './pages/main/performance-report/sales/sales-by-egg-size/sales-by-egg-size.component';\n\nimport { StocksListingComponent } from './pages/main/performance-report/stocks/stocks-listing/stocks-listing.component';\nimport { StocksViewComponent } from './pages/main/performance-report/stocks/stocks-view/stocks-view.component';\n\nimport { PaymentListingComponent } from './pages/main/payment/payment-listing/payment-listing.component';\nimport { PaymentUpdateComponent } from './pages/main/payment/payment-update/payment-update.component';\nimport { PaymentPrintComponent } from './pages/main/payment/payment-print/payment-print.component';\n\nimport { PriceManagementListingComponent } from './pages/main/price-management/price-management-listing/price-management-listing.component';\nimport { PriceManagementViewComponent } from './pages/main/price-management/price-management-view/price-management-view.component';\n\nimport { StaffCreateComponent } from './pages/main/staff/staff-create/staff-create.component';\nimport { StaffListingComponent } from './pages/main/staff/staff-listing/staff-listing.component';\nimport { StaffUpdateComponent } from './pages/main/staff/staff-update/staff-update.component';\nimport { StaffViewComponent } from './pages/main/staff/staff-view/staff-view.component';\nimport { StaffMyProfileComponent } from './pages/main/staff/staff-my-profile/staff-my-profile.component';\n\nimport { TransactionsCreateComponent } from './pages/main/transactions/transactions-create/transactions-create.component';\nimport { TransactionsCreatePreviewComponent } from './pages/main/transactions/transactions-create-preview/transactions-create-preview.component';\nimport { TransactionsListingComponent } from './pages/main/transactions/transactions-listing/transactions-listing.component';\nimport { TransactionsListingByOrderStatusComponent } from './pages/main/transactions/transactions-listing-by-order-status/transactions-listing-by-order-status.component';\nimport { TransactionsListingByPaymentStatusComponent } from './pages/main/transactions/transactions-listing-by-payment-status/transactions-listing-by-payment-status.component';\nimport { TransactionsViewComponent } from './pages/main/transactions/transactions-view/transactions-view.component';\nimport { ActivityListingComponent } from './pages/main/activity/activity-listing/activity-listing.component';\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TemplateComponent,\n    canActivate: [\n      AuthGuard\n    ],\n    children: [\n      { path: \"dashboard\", component: DashboardComponent },\n      /* HOUSE : START */\n      {\n        path: 'house',\n        component: HouseListingComponent\n      },\n      /* HOUSE : END */\n      /* STAFF : START */\n      {\n        path: 'staffs/create',\n        component: StaffCreateComponent\n      },\n      {\n        path: 'staffs',\n        component: StaffListingComponent\n      },\n      {\n        path: 'staffs/update/:id',\n        component: StaffUpdateComponent\n      },\n      {\n        path: 'staffs/view/:id',\n        component: StaffViewComponent\n      },\n      /* STAFF : END */\n      /* MY PROFILE : START */\n      {\n        path: 'my-profile',\n        component: StaffMyProfileComponent\n      },\n      /* MY PROFILE : END */\n      /* CUSTOMER : START */\n      {\n        path: 'customers/create',\n        component: CustomerCreateComponent\n      },\n      {\n        path: 'customers',\n        component: CustomerListingComponent\n      },\n      {\n        path: 'customers/update/:id',\n        component: CustomerUpdateComponent\n      },\n      {\n        path: 'customers/view/:id',\n        component: CustomerViewComponent\n      },\n      /* CUSTOMER : END */\n      /* FEEDS MEDICINE MANAGEMENT : START */\n      {\n        path: 'feeds-medicine-management/feeds/create',\n        component: FeedsCreateComponent\n      },\n      {\n        path: 'feeds-medicine-management/feeds',\n        component: FeedsListingComponent\n      },\n      {\n        path: 'feeds-medicine-management/feeds/update/:id',\n        component: FeedsUpdateComponent\n      },\n      {\n        path: 'feeds-medicine-management/medicine/create',\n        component: MedicineCreateComponent\n      },\n      {\n        path: 'feeds-medicine-management/medicine',\n        component: MedicineListingComponent\n      },\n      {\n        path: 'feeds-medicine-management/medicine/update/:id',\n        component: MedicineUpdateComponent\n      },\n      /* FEEDS MEDICINE MANAGEMENT : END */\n      /* FEEDS MEDICINE CONSUMPTION : START */\n      {\n        path: 'feeds-medicine-consumption/create',\n        component: FeedsMedicineConsumptionCreateComponent\n      },\n      {\n        path: 'feeds-medicine-consumption/update/:id',\n        component: FeedsMedicineConsumptionCreateComponent\n      },\n      {\n        path: 'feeds-medicine-consumption',\n        component: FeedsMedicineConsumptionListingComponent\n      },\n      {\n        path: 'feeds-medicine-consumption/view/:house_id',\n        component: FeedsMedicineConsumptionViewComponent\n      },\n      /* FEEDS MEDICINE CONSUMPTION : START */\n      /* DAILY REPORTS : START */\n      {\n        path: 'daily-reports-house/:id',\n        component: DailyReportsHouseListingComponent\n      },\n      {\n        path: 'daily-reports',\n        component: DailyReportsListingComponent\n      },\n      {\n        path: 'daily-reports/view/:id',\n        component: DailyReportsViewComponent\n      },\n      /* DAILY REPORTS : END */\n      /* PAYMENT : START */\n      {\n        path: 'transactions/update-payment/:id',\n        component: PaymentUpdateComponent\n      },\n      {\n        path: 'transactions/payments/:id',\n        component: PaymentListingComponent\n      },\n      /* {\n        path: 'transactions/payments/print/:id',\n        component: PaymentPrintComponent\n      }, */\n      {\n        path: 'transactions/payments/print/:id/:from',\n        component: PaymentPrintComponent\n      },\n      /* PAYMENT : END */\n      /* TRANSACTIONS \" START */\n      {\n        path: 'transactions/create',\n        component: TransactionsCreateComponent\n      },\n      {\n        path: 'transactions/create/preview',\n        component: TransactionsCreatePreviewComponent\n      },\n      {\n        path: 'transactions',\n        component: TransactionsListingComponent\n      },\n      {\n        path: 'transactions-status/:status',\n        component: TransactionsListingByOrderStatusComponent\n      },\n      {\n        path: 'transactions-payment/:status',\n        component: TransactionsListingByPaymentStatusComponent\n      },\n      {\n        path: 'transactions/view/:id',\n        component: TransactionsViewComponent\n      },\n      /* TRANSACTIONS : END */\n      /* PRICE MANAGEMENT : START */\n      {\n        path: 'price-management',\n        component: PriceManagementListingComponent\n      },\n      {\n        path: 'price-management/view/:id',\n        component: PriceManagementViewComponent\n      },\n      /* PRICE MANAGEMENT : END */\n      /* PERFORMANCE REPORT : START */\n      {\n        path: 'performance-report/harvested/production-by-egg-size',\n        component: ProductionByEggSizeComponent\n      },\n      {\n        path: 'performance-report/harvested/production-per-house',\n        component: ProductionPerHouseComponent\n      },\n      {\n        path: 'performance-report/sales/overall-sales',\n        component: OverallSalesComponent\n      },\n      {\n        path: 'performance-report/sales/sales-by-egg-size',\n        component: SalesByEggSizeComponent\n      },\n      {\n        path: 'performance-report/consumption/feeds',\n        component: FeedsComponent\n      },\n      {\n        path: 'performance-report/consumption/medicine',\n        component: MedicineComponent\n      },\n      {\n        path: 'performance-report/stocks',\n        component: StocksListingComponent\n      },\n      {\n        path: 'performance-report/stocks/view/:id',\n        component: StocksViewComponent\n      },\n      /* PERFORMANCE REPORT : END */\n      /* INVENTORY STOCKS : START */\n      {\n        path: 'inventory-stocks/fresh-eggs',\n        component: FreshEggsListingComponent\n      },\n      {\n        path: 'inventory-stocks/fresh-eggs/view/:date',\n        component: FreshEggsViewComponent\n      },\n      {\n        path: 'inventory-stocks/trays',\n        component: TraysListingComponent\n      },\n      {\n        path: 'inventory-stocks/trays/view/:id',\n        component: TraysViewComponent\n      },\n      {\n        path: 'inventory-stocks/sacks',\n        component: SacksListingComponent\n      },\n      {\n        path: 'inventory-stocks/sacks/view/:id',\n        component: SacksViewComponent\n      },\n      /* INVENTORY STOCKS : END */\n      /* ACTIVITY LOGS : START */\n      {\n        path : 'activity-log/activity',\n        component: ActivityListingComponent\n      },\n      /* ACTIVITY LOGS : END */\n      { path: \"\", redirectTo: \"dashboard\", pathMatch: \"full\" }\n    ]\n  },\n  { path: \"login\", component: LoginComponent },\n  { path: \"**\", redirectTo: \"login\" }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\t\n\tconstructor() { }\n\n\tngOnInit() {\n\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatNativeDateModule, MatExpansionModule, MatListModule, MatMenuModule, MatIconModule } from '@angular/material';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { SatDatepickerModule, SatNativeDateModule } from 'saturn-datepicker';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { TimeagoModule } from 'ngx-timeago';\nimport { MatTabsModule } from '@angular/material/tabs';\n/* import { CountDown } from './../countdown/countdown'; */\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatBadgeModule } from '@angular/material/badge';\n\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nconst MaterialComponents = [\n  MatToolbarModule,\n  MatListModule,\n  MatExpansionModule,\n  MatIconModule,\n  MatMenuModule,\n  MatButtonModule,\n  MatSlideToggleModule,\n  MatNativeDateModule,\n  MatSidenavModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatSnackBarModule,\n  MatCheckboxModule,\n  MatSelectModule,\n  MatChipsModule,\n  SatDatepickerModule,\n  SatNativeDateModule,\n  TimeagoModule,\n  MatAutocompleteModule,\n  MatTabsModule,\n  MatBadgeModule,\n  MatCardModule,\n  MatProgressSpinnerModule\n]\n\n@NgModule({\n  declarations: [\n    /* CountDown */\n  ],\n  imports: [\n    MaterialComponents\n  ],\n  exports: [\n    MaterialComponents,\n    /* CountDown */\n  ]\n})\nexport class MaterialModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-reports-buttons',\n  templateUrl: './reports-buttons.component.html',\n  styleUrls: ['./reports-buttons.component.scss']\n})\nexport class ReportsButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyCEFbL7oEPDpdr37EfOM9Wrjbz7Xe3yx3k\",\n    authDomain: \"gapan-internal-app.firebaseapp.com\",\n    databaseURL: \"https://gapan-internal-app.firebaseio.com\",\n    projectId: \"gapan-internal-app\",\n    storageBucket: \"gapan-internal-app.appspot.com\",\n    messagingSenderId: \"520078777587\",\n    appId: \"1:520078777587:web:eee20e4aae163df997ab86\",\n    measurementId: \"G-1PH10PZTD0\"\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-report-footer',\n  templateUrl: './report-footer.component.html',\n  styleUrls: ['./report-footer.component.scss']\n})\nexport class ReportFooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { HttpModule } from \"@angular/http\";\nimport { DatePipe } from '@angular/common';\nimport { EventsModule } from 'angular4-events';\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { NgxSkeletonLoaderModule } from \"ngx-skeleton-loader\";\nimport { NgxWebstorageModule } from \"ngx-webstorage\";\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\n\n/* Default Layouts */\nimport { TemplateComponent } from './layout/template/template.component';\nimport { MaterialModule } from \"./components/modules/material/material.module\";\nimport { MatNativeDateModule } from '@angular/material';\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n/* import { ClickOutsideModule } from 'ng-click-outside'; */\n\nimport { ImageCropperModule } from 'ngx-image-cropper';\nimport { MomentModule } from 'ngx-moment';\n\nimport { LoginComponent } from \"./pages/auth/login/login.component\";\n\nimport { CustomerCreateComponent } from './pages/main/customer/customer-create/customer-create.component';\nimport { CustomerListingComponent } from './pages/main/customer/customer-listing/customer-listing.component';\nimport { CustomerUpdateComponent } from './pages/main/customer/customer-update/customer-update.component';\nimport { CustomerViewComponent } from './pages/main/customer/customer-view/customer-view.component';\n\nimport { DailyReportsHouseListingComponent } from './pages/main/daily-reports/daily-reports-house-listing/daily-reports-house-listing.component';\nimport { DailyReportsListingComponent } from './pages/main/daily-reports/daily-reports-listing/daily-reports-listing.component';\nimport { DailyReportsViewComponent } from './pages/main/daily-reports/daily-reports-view/daily-reports-view.component';\n\nimport { DashboardComponent } from './pages/main/dashboard/dashboard.component';\n\nimport { FeedsMedicineConsumptionCreateComponent } from './pages/main/feeds-medicine-consumption/feeds-medicine-consumption-create/feeds-medicine-consumption-create.component';\nimport { FeedsMedicineConsumptionListingComponent } from './pages/main/feeds-medicine-consumption/feeds-medicine-consumption-listing/feeds-medicine-consumption-listing.component';\nimport { FeedsMedicineConsumptionViewComponent } from './pages/main/feeds-medicine-consumption/feeds-medicine-consumption-view/feeds-medicine-consumption-view.component';\n\nimport { FeedsCreateComponent } from './pages/main/feeds-medicine-management/feeds/feeds-create/feeds-create.component';\nimport { FeedsListingComponent } from './pages/main/feeds-medicine-management/feeds/feeds-listing/feeds-listing.component';\nimport { FeedsUpdateComponent } from './pages/main/feeds-medicine-management/feeds/feeds-update/feeds-update.component';\n\nimport { MedicineCreateComponent } from './pages/main/feeds-medicine-management/medicine/medicine-create/medicine-create.component';\nimport { MedicineListingComponent } from './pages/main/feeds-medicine-management/medicine/medicine-listing/medicine-listing.component';\nimport { MedicineUpdateComponent } from './pages/main/feeds-medicine-management/medicine/medicine-update/medicine-update.component';\n\nimport { HouseListingComponent } from './pages/main/house/house-listing/house-listing.component';\n\nimport { FreshEggsListingComponent } from './pages/main/inventory-stocks/fresh-eggs/fresh-eggs-listing/fresh-eggs-listing.component';\nimport { FreshEggsViewComponent } from './pages/main/inventory-stocks/fresh-eggs/fresh-eggs-view/fresh-eggs-view.component';\n\nimport { SacksListingComponent } from './pages/main/inventory-stocks/sacks/sacks-listing/sacks-listing.component';\nimport { SacksViewComponent } from './pages/main/inventory-stocks/sacks/sacks-view/sacks-view.component';\n\nimport { TraysListingComponent } from './pages/main/inventory-stocks/trays/trays-listing/trays-listing.component';\nimport { TraysViewComponent } from './pages/main/inventory-stocks/trays/trays-view/trays-view.component';\n\nimport { FeedsComponent } from './pages/main/performance-report/consumption/feeds/feeds.component';\nimport { MedicineComponent } from './pages/main/performance-report/consumption/medicine/medicine.component';\n\nimport { ProductionByEggSizeComponent } from './pages/main/performance-report/harvested/production-by-egg-size/production-by-egg-size.component';\nimport { ProductionPerHouseComponent } from './pages/main/performance-report/harvested/production-per-house/production-per-house.component';\n\nimport { OverallSalesComponent } from './pages/main/performance-report/sales/overall-sales/overall-sales.component';\nimport { SalesByEggSizeComponent } from './pages/main/performance-report/sales/sales-by-egg-size/sales-by-egg-size.component';\n\nimport { StocksListingComponent } from './pages/main/performance-report/stocks/stocks-listing/stocks-listing.component';\nimport { StocksViewComponent } from './pages/main/performance-report/stocks/stocks-view/stocks-view.component';\n\nimport { PriceManagementListingComponent } from './pages/main/price-management/price-management-listing/price-management-listing.component';\nimport { PriceManagementViewComponent } from './pages/main/price-management/price-management-view/price-management-view.component';\n\nimport { StaffCreateComponent } from './pages/main/staff/staff-create/staff-create.component';\nimport { StaffListingComponent } from './pages/main/staff/staff-listing/staff-listing.component';\nimport { StaffUpdateComponent } from './pages/main/staff/staff-update/staff-update.component';\nimport { StaffViewComponent } from './pages/main/staff/staff-view/staff-view.component';\n\nimport { TransactionsCreateComponent } from './pages/main/transactions/transactions-create/transactions-create.component';\nimport { TransactionsListingComponent } from './pages/main/transactions/transactions-listing/transactions-listing.component';\nimport { TransactionsListingByOrderStatusComponent } from './pages/main/transactions/transactions-listing-by-order-status/transactions-listing-by-order-status.component';\nimport { TransactionsListingByPaymentStatusComponent } from './pages/main/transactions/transactions-listing-by-payment-status/transactions-listing-by-payment-status.component';\nimport { TransactionsViewComponent } from './pages/main/transactions/transactions-view/transactions-view.component';\nimport { NgxMasonryModule } from 'ngx-masonry';\n\nimport { HouseModalComponent } from './components/modals/house-modal/house-modal.component';\nimport { ConfirmPasswordModalComponent } from './components/modals/confirm-password-modal/confirm-password-modal.component';\nimport { GeneralModalComponent } from './components/modals/general-modal/general-modal.component';\nimport { ReportsButtonsComponent } from './components/reports/reports-buttons/reports-buttons.component';\nimport { MedicineUnitModalComponent } from './components/modals/medicine-unit-modal/medicine-unit-modal.component';\n\nimport { TimeagoModule } from 'ngx-timeago';\nimport { PriceModalComponent } from './components/modals/price-modal/price-modal.component';\nimport { TransactionCreateModalComponent } from './components/modals/transaction-create-modal/transaction-create-modal.component';\nimport { ActivityListingComponent } from './pages/main/activity/activity-listing/activity-listing.component';\n\nimport { CountdownModule } from \"ng2-countdown-timer\";\nimport { FreshEggInventoryModalComponent } from './components/modals/fresh-egg-inventory-modal/fresh-egg-inventory-modal.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { StaffMyProfileComponent } from './pages/main/staff/staff-my-profile/staff-my-profile.component';\nimport { TransactionsCreatePreviewComponent } from './pages/main/transactions/transactions-create-preview/transactions-create-preview.component';\nimport { ViewPaymentModalComponent } from './components/modals/view-payment-modal/view-payment-modal.component';\nimport { PaymentListingComponent } from './pages/main/payment/payment-listing/payment-listing.component';\nimport { PaymentUpdateComponent } from './pages/main/payment/payment-update/payment-update.component';\nimport { PaymentPrintComponent } from './pages/main/payment/payment-print/payment-print.component';\n\nimport { NgxPrintModule } from 'ngx-print';\nimport { AddDiscountModalComponent } from './components/modals/add-discount-modal/add-discount-modal.component';\n\nimport { ChartsModule } from 'ng2-charts';\nimport { ReportProductionByEggSizeComponent } from './components/modals/reports/report-production-by-egg-size/report-production-by-egg-size.component';\n\nimport { ExportAsModule } from 'ngx-export-as';\nimport { ReportOverallSalesComponent } from './components/modals/reports/report-overall-sales/report-overall-sales.component';\nimport { ReportDailyHouseComponent } from './components/modals/reports/report-daily-house/report-daily-house.component';\nimport { ReportDailyComponent } from './components/modals/reports/report-daily/report-daily.component';\nimport { ReportEggPriceComponent } from './components/modals/reports/report-egg-price/report-egg-price.component';\nimport { ReportPriceTrendComponent } from './components/modals/reports/report-price-trend/report-price-trend.component';\nimport { ReportSalesEggComponent } from './components/modals/reports/report-sales-egg/report-sales-egg.component';\nimport { ReportStocksComponent } from './components/modals/reports/report-stocks/report-stocks.component';\nimport { ReportProductionPerHouseComponent } from './components/modals/reports/report-production-per-house/report-production-per-house.component';\n\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestore, AngularFirestoreModule } from '@angular/fire/firestore';\nimport { AngularFireDatabaseModule } from '@angular/fire/database';\nimport { environment } from './../environments/environment';\nimport { ReportFeedsConsumptionComponent } from './components/modals/reports/report-feeds-consumption/report-feeds-consumption.component';\nimport { MedicineConsumptionUpdateModalComponent } from './components/modals/medicine-consumption-update-modal/medicine-consumption-update-modal.component';\nimport { ReportFreshEggsComponent } from './components/modals/reports/report-fresh-eggs/report-fresh-eggs.component';\nimport { ReportTraysComponent } from './components/modals/reports/report-trays/report-trays.component';\nimport { ReportSacksComponent } from './components/modals/reports/report-sacks/report-sacks.component';\nimport { ReportDailyViewComponent } from './components/modals/reports/report-daily-view/report-daily-view.component';\nimport { ReportMonthlyRecordComponent } from './components/modals/reports/report-monthly-record/report-monthly-record.component';\nimport { ReportFreshEggsViewComponent } from './components/modals/reports/report-fresh-eggs-view/report-fresh-eggs-view.component';\nimport { FeedConsumptionUpdateModalComponent } from './components/modals/feed-consumption-update-modal/feed-consumption-update-modal.component';\nimport { ReportMedicineComponent } from './components/modals/reports/report-medicine/report-medicine.component';\nimport { ReportFooterComponent } from './components/modals/reports/report-footer/report-footer.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TemplateComponent,\n\n    LoginComponent,\n\n    CustomerCreateComponent,\n    CustomerListingComponent,\n    CustomerUpdateComponent,\n    CustomerViewComponent,\n\n    DailyReportsHouseListingComponent,\n    DailyReportsListingComponent,\n    DailyReportsViewComponent,\n\n    DashboardComponent,\n\n    FeedsMedicineConsumptionCreateComponent,\n    FeedsMedicineConsumptionListingComponent,\n    FeedsMedicineConsumptionViewComponent,\n\n    FeedsCreateComponent,\n    FeedsListingComponent,\n    FeedsUpdateComponent,\n\n    MedicineCreateComponent,\n    MedicineListingComponent,\n    MedicineUpdateComponent,\n\n    HouseListingComponent,\n    HouseModalComponent,\n\n    FreshEggsListingComponent,\n    FreshEggsViewComponent,\n\n    SacksListingComponent,\n    SacksViewComponent,\n\n    TraysListingComponent,\n    TraysViewComponent,\n\n    FeedsComponent,\n    MedicineComponent,\n\n    ProductionByEggSizeComponent,\n    ProductionPerHouseComponent,\n\n    OverallSalesComponent,\n    SalesByEggSizeComponent,\n\n    StocksListingComponent,\n    StocksViewComponent,\n\n    PriceManagementListingComponent,\n    PriceManagementViewComponent,\n\n    StaffCreateComponent,\n    StaffListingComponent,\n    StaffUpdateComponent,\n    StaffViewComponent,\n\n    TransactionsCreateComponent,\n    TransactionsListingComponent,\n    TransactionsListingByOrderStatusComponent,\n    TransactionsListingByPaymentStatusComponent,\n    TransactionsViewComponent,\n    ConfirmPasswordModalComponent,\n    GeneralModalComponent,\n    ReportsButtonsComponent,\n    MedicineUnitModalComponent,\n    PriceModalComponent,\n    TransactionCreateModalComponent,\n    ActivityListingComponent,\n    FreshEggInventoryModalComponent,\n    StaffMyProfileComponent,\n    TransactionsCreatePreviewComponent,\n    ViewPaymentModalComponent,\n    PaymentListingComponent,\n    PaymentUpdateComponent,\n    PaymentPrintComponent,\n    AddDiscountModalComponent,\n    ReportProductionByEggSizeComponent,\n    ReportOverallSalesComponent,\n    ReportDailyHouseComponent,\n    ReportDailyComponent,\n    ReportEggPriceComponent,\n    ReportPriceTrendComponent,\n    ReportSalesEggComponent,\n    ReportStocksComponent,\n    ReportProductionPerHouseComponent,\n    ReportFeedsConsumptionComponent,\n    MedicineConsumptionUpdateModalComponent,\n    ReportFreshEggsComponent,\n    ReportTraysComponent,\n    ReportSacksComponent,\n    ReportDailyViewComponent,\n    ReportMonthlyRecordComponent,\n    ReportFreshEggsViewComponent,\n    FeedConsumptionUpdateModalComponent,\n    ReportMedicineComponent,\n    ReportFooterComponent,\n  ],\n  entryComponents: [\n    HouseModalComponent,\n    MedicineUnitModalComponent,\n    ConfirmPasswordModalComponent,\n    GeneralModalComponent,\n    PriceModalComponent,\n    TransactionCreateModalComponent,\n    FreshEggInventoryModalComponent,\n    ViewPaymentModalComponent,\n    AddDiscountModalComponent,\n    ReportProductionByEggSizeComponent,\n    ReportOverallSalesComponent,\n    ReportDailyComponent,\n    ReportDailyHouseComponent,\n    ReportEggPriceComponent,\n    ReportPriceTrendComponent,\n    ReportSalesEggComponent,\n    ReportStocksComponent,\n    ReportProductionPerHouseComponent,\n    ReportFeedsConsumptionComponent,\n    MedicineConsumptionUpdateModalComponent,\n    ReportFreshEggsComponent,\n    ReportTraysComponent,\n    ReportSacksComponent,\n    ReportDailyViewComponent,\n    ReportMonthlyRecordComponent,\n    ReportFreshEggsViewComponent,\n    FeedConsumptionUpdateModalComponent,\n    ReportMedicineComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    NgxSkeletonLoaderModule,\n    NgxWebstorageModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    PaginationModule.forRoot(),\n    EventsModule.forRoot(),\n    MaterialModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    /* ClickOutsideModule, */\n    ImageCropperModule,\n    MomentModule,\n    NgxMasonryModule,\n    TimeagoModule.forRoot(),\n    CountdownModule,\n    LayoutModule,\n    NgxPrintModule,\n    ChartsModule,\n    ExportAsModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig),\n    AngularFireDatabaseModule,\n    AngularFirestoreModule\n  ],\n  providers: [ \n    MatNativeDateModule,\n    DatePipe,\n    AngularFirestore\n   ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}